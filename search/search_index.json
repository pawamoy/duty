{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Duty \u00a4 A simple task runner. Inspired by Invoke . Requirements \u00a4 Duty requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12 Installation \u00a4 With pip : python3.6 -m pip install duty With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 duty Quick start \u00a4 Proper documentation pages will soon be available. Configuration \u00a4 Create a duties.py file at the root of your repository. Each task is declared as a \"duty\", using the duty.duty decorator. from duty import duty @duty def docs ( ctx ): ctx . run ( \"mkdocs build\" , title = \"Building documentation\" ) The ctx argument is the \"context\" of the duty. It is automatically created and passed to your function. It has only one purpose: running command with its run method. The run method accepts strings, list of strings, or even Python callables. The above duty can be rewritten as: from duty import duty @duty def docs ( ctx ): ctx . run ([ \"mkdocs\" , \"build\" ], title = \"Building documentation\" ) # avoid the overhead of an extra shell process Or: from duty import duty from mkdocs import build , config @duty def docs ( ctx ): ctx . run ( build . build , args = [ config . load_config ()], title = \"Building documentation\" ) # avoid the overhead of an extra Python process The run methods accepts various options, mostly coming from its underlying dependency: failprint . Arguments of the run method: Name Type Description Default cmd str , list of str , or Python callable The command to run. required args list Arguments to pass to the callable. [] kwargs dict Keyword arguments to pass to the callable. {} number int The command number (useful for the tap format). None output_type str The type of output: stdout , stderr , combine or nocapture combine title str The command title. cmd as a shell command or Python statement fmt str The output format as a Jinja template: pretty , tap or custom=... pretty pty bool Whether to run in a PTY. False progress bool Whether to show progress. True nofail bool Whether to always succeed. False quiet bool Don't print the command output, even if it failed. False silent bool Don't print anything. False Example usage of the silent option: @duty def clean ( ctx ): ctx . run ( \"find . -type d -name __pycache__ | xargs rm -rf\" , silent = True ) Now let's say you have more than one command, and you want to silence all of them: @duty ( silent = True ) def clean ( ctx ): ctx . run ( \"rm -rf .coverage*\" ) ctx . run ( \"rm -rf .mypy_cache\" ) ctx . run ( \"rm -rf .pytest_cache\" ) ctx . run ( \"rm -rf build\" ) ctx . run ( \"rm -rf dist\" ) ctx . run ( \"rm -rf pip-wheel-metadata\" ) ctx . run ( \"rm -rf site\" ) ctx . run ( \"find . -type d -name __pycache__ | xargs rm -rf\" ) ctx . run ( \"find . -name '*.rej' -delete\" ) Run \u00a4 To run a duty, simply use: duty clean If you are using Poetry : poetry run duty clean You can pass multiple duties in one command: duty clean docs If one of your duties accept arguments, you can pass them on the command line as well: @duty def docs ( ctx , serve = False ): command = \"serve\" if serve else \"build\" ctx . run ( f \"mkdocs { command } \" ) duty docs serve = 1 Note Note that arguments are not type-casted: they are always passed as strings to the duties. Todo \u00a4 Better handling of missing duties arguments. Maybe simply print the error without a traceback: release() missing 1 required positional argument: 'version' Arguments type casting, ideally based on type annotations!","title":"Overview"},{"location":"#duty","text":"A simple task runner. Inspired by Invoke .","title":"Duty"},{"location":"#requirements","text":"Duty requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12","title":"Requirements"},{"location":"#installation","text":"With pip : python3.6 -m pip install duty With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 duty","title":"Installation"},{"location":"#quick-start","text":"Proper documentation pages will soon be available.","title":"Quick start"},{"location":"#configuration","text":"Create a duties.py file at the root of your repository. Each task is declared as a \"duty\", using the duty.duty decorator. from duty import duty @duty def docs ( ctx ): ctx . run ( \"mkdocs build\" , title = \"Building documentation\" ) The ctx argument is the \"context\" of the duty. It is automatically created and passed to your function. It has only one purpose: running command with its run method. The run method accepts strings, list of strings, or even Python callables. The above duty can be rewritten as: from duty import duty @duty def docs ( ctx ): ctx . run ([ \"mkdocs\" , \"build\" ], title = \"Building documentation\" ) # avoid the overhead of an extra shell process Or: from duty import duty from mkdocs import build , config @duty def docs ( ctx ): ctx . run ( build . build , args = [ config . load_config ()], title = \"Building documentation\" ) # avoid the overhead of an extra Python process The run methods accepts various options, mostly coming from its underlying dependency: failprint . Arguments of the run method: Name Type Description Default cmd str , list of str , or Python callable The command to run. required args list Arguments to pass to the callable. [] kwargs dict Keyword arguments to pass to the callable. {} number int The command number (useful for the tap format). None output_type str The type of output: stdout , stderr , combine or nocapture combine title str The command title. cmd as a shell command or Python statement fmt str The output format as a Jinja template: pretty , tap or custom=... pretty pty bool Whether to run in a PTY. False progress bool Whether to show progress. True nofail bool Whether to always succeed. False quiet bool Don't print the command output, even if it failed. False silent bool Don't print anything. False Example usage of the silent option: @duty def clean ( ctx ): ctx . run ( \"find . -type d -name __pycache__ | xargs rm -rf\" , silent = True ) Now let's say you have more than one command, and you want to silence all of them: @duty ( silent = True ) def clean ( ctx ): ctx . run ( \"rm -rf .coverage*\" ) ctx . run ( \"rm -rf .mypy_cache\" ) ctx . run ( \"rm -rf .pytest_cache\" ) ctx . run ( \"rm -rf build\" ) ctx . run ( \"rm -rf dist\" ) ctx . run ( \"rm -rf pip-wheel-metadata\" ) ctx . run ( \"rm -rf site\" ) ctx . run ( \"find . -type d -name __pycache__ | xargs rm -rf\" ) ctx . run ( \"find . -name '*.rej' -delete\" )","title":"Configuration"},{"location":"#run","text":"To run a duty, simply use: duty clean If you are using Poetry : poetry run duty clean You can pass multiple duties in one command: duty clean docs If one of your duties accept arguments, you can pass them on the command line as well: @duty def docs ( ctx , serve = False ): command = \"serve\" if serve else \"build\" ctx . run ( f \"mkdocs { command } \" ) duty docs serve = 1 Note Note that arguments are not type-casted: they are always passed as strings to the duties.","title":"Run"},{"location":"#todo","text":"Better handling of missing duties arguments. Maybe simply print the error without a traceback: release() missing 1 required positional argument: 'version' Arguments type casting, ideally based on type annotations!","title":"Todo"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.4.1 - 2020-10-05 \u00a4 Compare with 0.4.0 Bug Fixes \u00a4 Fix -d option parsing ( a004c7f by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Accept args and kwargs in decorator ( 567334f by Timoth\u00e9e Mazzucotelli). 0.4.0 - 2020-10-05 \u00a4 Compare with 0.3.1 Features \u00a4 Add list options and aliases ( c238110 by Timoth\u00e9e Mazzucotelli). 0.3.1 - 2020-10-04 \u00a4 Compare with 0.3.0 Bug Fixes \u00a4 Add missing failprint dependency ( 5b1663c by Timoth\u00e9e Mazzucotelli). 0.3.0 - 2020-10-04 \u00a4 Compare with 0.2.0 Bug Fixes \u00a4 Add missing __call__ method to Duty ( 290e283 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Better handle CLI arguments ( 144b33d by Timoth\u00e9e Mazzucotelli). Features \u00a4 Handle keyboard interruptions ( 1c5b594 by Timoth\u00e9e Mazzucotelli). 0.2.0 - 2020-10-02 \u00a4 Compare with 0.1.0 Features \u00a4 Initial features ( 3c395d3 by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2020-10-02 \u00a4 Compare with first commit Features \u00a4 Initial commit ( 371ef31 by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#041-2020-10-05","text":"Compare with 0.4.0","title":"0.4.1 - 2020-10-05"},{"location":"changelog/#bug-fixes","text":"Fix -d option parsing ( a004c7f by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring","text":"Accept args and kwargs in decorator ( 567334f by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#040-2020-10-05","text":"Compare with 0.3.1","title":"0.4.0 - 2020-10-05"},{"location":"changelog/#features","text":"Add list options and aliases ( c238110 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#031-2020-10-04","text":"Compare with 0.3.0","title":"0.3.1 - 2020-10-04"},{"location":"changelog/#bug-fixes_1","text":"Add missing failprint dependency ( 5b1663c by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#030-2020-10-04","text":"Compare with 0.2.0","title":"0.3.0 - 2020-10-04"},{"location":"changelog/#bug-fixes_2","text":"Add missing __call__ method to Duty ( 290e283 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_1","text":"Better handle CLI arguments ( 144b33d by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#features_1","text":"Handle keyboard interruptions ( 1c5b594 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#020-2020-10-02","text":"Compare with 0.1.0","title":"0.2.0 - 2020-10-02"},{"location":"changelog/#features_2","text":"Initial features ( 3c395d3 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#010-2020-10-02","text":"Compare with first commit","title":"0.1.0 - 2020-10-02"},{"location":"changelog/#features_3","text":"Initial commit ( 371ef31 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd duty make setup Note If it fails for some reason, you'll need to install these tools manually: Poetry and Invoke . You can install them with: python3 -m pip install --user pipx pipx install poetry pipx install invoke Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run duty [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses Invoke to run tasks. A Makefile is also provided. The Makefile will try to run the task on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run invoke TASK , or invoke TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd duty make setup Note If it fails for some reason, you'll need to install these tools manually: Poetry and Invoke . You can install them with: python3 -m pip install --user pipx pipx install poetry pipx install invoke Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run duty [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses Invoke to run tasks. A Makefile is also provided. The Makefile will try to run the task on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run invoke TASK , or invoke TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build duty . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 autoflake | black | coverage | failprint | flake8-black | flake8-builtins | flake8-pytest-style | flake8-tidy-imports | flake8-variables-names | flakehell | git-changelog | httpx | invoke | ipython | isort | jinja2-cli | mkdocs | mkdocs-material | mkdocstrings | mypy | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | toml | wemake-python-styleguide | wrapt Indirect dependencies \u00a4 ansimarkup | apipkg | appdirs | appnope | astor | astroid | atomicwrites | attrs | backcall | bandit | beautifulsoup4 | certifi | chardet | click | colorama | contextvars | darglint | dataclasses | decorator | docutils | entrypoints | eradicate | execnet | flake8 | flake8-bandit | flake8-broken-line | flake8-bugbear | flake8-commas | flake8-comprehensions | flake8-debugger | flake8-docstrings | flake8-eradicate | flake8-isort | flake8-plugin-utils | flake8-polyfill | flake8-quotes | flake8-rst-docstrings | flake8-string-format | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | ipython-genutils | jedi | Jinja2 | joblib | lazy-object-proxy | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pep8-naming | pexpect | pickleshare | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pylint | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | restructuredtext-lint | rfc3986 | six | smmap | sniffio | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build duty . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"autoflake | black | coverage | failprint | flake8-black | flake8-builtins | flake8-pytest-style | flake8-tidy-imports | flake8-variables-names | flakehell | git-changelog | httpx | invoke | ipython | isort | jinja2-cli | mkdocs | mkdocs-material | mkdocstrings | mypy | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | toml | wemake-python-styleguide | wrapt","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | apipkg | appdirs | appnope | astor | astroid | atomicwrites | attrs | backcall | bandit | beautifulsoup4 | certifi | chardet | click | colorama | contextvars | darglint | dataclasses | decorator | docutils | entrypoints | eradicate | execnet | flake8 | flake8-bandit | flake8-broken-line | flake8-bugbear | flake8-commas | flake8-comprehensions | flake8-debugger | flake8-docstrings | flake8-eradicate | flake8-isort | flake8-plugin-utils | flake8-polyfill | flake8-quotes | flake8-rst-docstrings | flake8-string-format | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | ipython-genutils | jedi | Jinja2 | joblib | lazy-object-proxy | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pep8-naming | pexpect | pickleshare | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pylint | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | restructuredtext-lint | rfc3986 | six | smmap | sniffio | snowballstemmer | soupsieve | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | zipp More credits from the author","title":"Indirect dependencies"},{"location":"reference/cli/","text":"\u00a4 Module that contains the command line application. get_parser () \u00a4 Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in duty/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" parser = argparse . ArgumentParser ( prog = \"duty\" ) parser . add_argument ( \"-d\" , \"--duties-file\" , default = \"duties.py\" , help = \"Python file where the duties are defined.\" , ) parser . add_argument ( \"-l\" , \"--list\" , action = \"store_true\" , dest = \"list\" , help = \"List the available duties.\" , ) parser . add_argument ( \"DUTIES\" , metavar = \"DUTY\" , nargs = \"*\" ) return parser load_duties ( path ) \u00a4 Load duties from a Python file. Parameters: Name Type Description Default path str The path to the Python file to load. required Source code in duty/cli.py def load_duties ( path : str ) -> None : \"\"\" Load duties from a Python file. Arguments: path: The path to the Python file to load. \"\"\" logic . duties . clear () spec = importlib_util . spec_from_file_location ( \"duty.loaded\" , path ) duties = importlib_util . module_from_spec ( spec ) spec . loader . exec_module ( duties ) # type: ignore main ( args = None ) \u00a4 Run the main program. This function is executed when you type duty or python -m duty . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in duty/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : # noqa: WPS212 (return statements) \"\"\" Run the main program. This function is executed when you type `duty` or `python -m duty`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) load_duties ( opts . duties_file ) if opts . list : print_duties () return 0 try : selection = parse_selection ( opts . DUTIES ) except KeyError as error : print ( f \"Unknown duty: { error } \" , file = sys . stderr ) # noqa: WPS421 (print) return 1 except ValueError as error : print ( f \"Incorrect arguments: { error } \" , file = sys . stderr ) # noqa: WPS421 (print) return 1 if not selection : print ( \"Please choose at least one duty\" , file = sys . stderr ) # noqa: WPS421 (print) return 1 for duty , duty_args in selection : try : duty . run ( ** duty_args ) except logic . DutyFailure as failure : return failure . code return 0 parse_selection ( args ) \u00a4 Parse the arguments given on the command line to return a selection of actual duties. Parameters: Name Type Description Default args List[str] Arguments given on the command line. required Exceptions: Type Description ValueError When the arguments are incorrect. Returns: Type Description List[Tuple[duty.logic.Duty, Dict[str, str]]] A selection of duties and their keyword arguments. Source code in duty/cli.py def parse_selection ( args : List [ str ]) -> SelectionType : # noqa: WPS231 (not that complex) \"\"\" Parse the arguments given on the command line to return a selection of actual duties. Arguments: args: Arguments given on the command line. Raises: ValueError: When the arguments are incorrect. Returns: A selection of duties and their keyword arguments. \"\"\" if not args : return [] selection : SelectionType = [] duty : logic . Duty = None # type: ignore for arg in args : if \"=\" in arg : if not duty : raise ValueError ( f \"argument without a duty: { arg } \" ) duty_args . update (( arg . split ( \"=\" , 1 ),)) # type: ignore # this is correct else : if duty : # noqa: WPS513 (cannot replace by elif) selection . append (( duty , duty_args )) duty_args : Dict [ str , str ] = {} duty = logic . get_duty ( arg ) selection . append (( duty , duty_args )) return selection print_duties () \u00a4 Print duties. Source code in duty/cli.py def print_duties () -> None : \"\"\"Print duties.\"\"\" for name , duty in logic . duties . items (): description = duty . description . split ( \" \\n \" )[ 0 ] print ( f \" { name : 20 } - { description } \" ) # noqa: WPS421 (print)","title":"cli.py"},{"location":"reference/cli/#duty.cli","text":"Module that contains the command line application.","title":"duty.cli"},{"location":"reference/cli/#duty.cli.get_parser","text":"Return the CLI argument parser. Returns: Type Description ArgumentParser An argparse parser. Source code in duty/cli.py def get_parser () -> argparse . ArgumentParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" parser = argparse . ArgumentParser ( prog = \"duty\" ) parser . add_argument ( \"-d\" , \"--duties-file\" , default = \"duties.py\" , help = \"Python file where the duties are defined.\" , ) parser . add_argument ( \"-l\" , \"--list\" , action = \"store_true\" , dest = \"list\" , help = \"List the available duties.\" , ) parser . add_argument ( \"DUTIES\" , metavar = \"DUTY\" , nargs = \"*\" ) return parser","title":"get_parser()"},{"location":"reference/cli/#duty.cli.load_duties","text":"Load duties from a Python file. Parameters: Name Type Description Default path str The path to the Python file to load. required Source code in duty/cli.py def load_duties ( path : str ) -> None : \"\"\" Load duties from a Python file. Arguments: path: The path to the Python file to load. \"\"\" logic . duties . clear () spec = importlib_util . spec_from_file_location ( \"duty.loaded\" , path ) duties = importlib_util . module_from_spec ( spec ) spec . loader . exec_module ( duties ) # type: ignore","title":"load_duties()"},{"location":"reference/cli/#duty.cli.main","text":"Run the main program. This function is executed when you type duty or python -m duty . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in duty/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : # noqa: WPS212 (return statements) \"\"\" Run the main program. This function is executed when you type `duty` or `python -m duty`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) load_duties ( opts . duties_file ) if opts . list : print_duties () return 0 try : selection = parse_selection ( opts . DUTIES ) except KeyError as error : print ( f \"Unknown duty: { error } \" , file = sys . stderr ) # noqa: WPS421 (print) return 1 except ValueError as error : print ( f \"Incorrect arguments: { error } \" , file = sys . stderr ) # noqa: WPS421 (print) return 1 if not selection : print ( \"Please choose at least one duty\" , file = sys . stderr ) # noqa: WPS421 (print) return 1 for duty , duty_args in selection : try : duty . run ( ** duty_args ) except logic . DutyFailure as failure : return failure . code return 0","title":"main()"},{"location":"reference/cli/#duty.cli.parse_selection","text":"Parse the arguments given on the command line to return a selection of actual duties. Parameters: Name Type Description Default args List[str] Arguments given on the command line. required Exceptions: Type Description ValueError When the arguments are incorrect. Returns: Type Description List[Tuple[duty.logic.Duty, Dict[str, str]]] A selection of duties and their keyword arguments. Source code in duty/cli.py def parse_selection ( args : List [ str ]) -> SelectionType : # noqa: WPS231 (not that complex) \"\"\" Parse the arguments given on the command line to return a selection of actual duties. Arguments: args: Arguments given on the command line. Raises: ValueError: When the arguments are incorrect. Returns: A selection of duties and their keyword arguments. \"\"\" if not args : return [] selection : SelectionType = [] duty : logic . Duty = None # type: ignore for arg in args : if \"=\" in arg : if not duty : raise ValueError ( f \"argument without a duty: { arg } \" ) duty_args . update (( arg . split ( \"=\" , 1 ),)) # type: ignore # this is correct else : if duty : # noqa: WPS513 (cannot replace by elif) selection . append (( duty , duty_args )) duty_args : Dict [ str , str ] = {} duty = logic . get_duty ( arg ) selection . append (( duty , duty_args )) return selection","title":"parse_selection()"},{"location":"reference/cli/#duty.cli.print_duties","text":"Print duties. Source code in duty/cli.py def print_duties () -> None : \"\"\"Print duties.\"\"\" for name , duty in logic . duties . items (): description = duty . description . split ( \" \\n \" )[ 0 ] print ( f \" { name : 20 } - { description } \" ) # noqa: WPS421 (print)","title":"print_duties()"},{"location":"reference/logic/","text":"\u00a4 Module containing all the logic. Context \u00a4 A simple context class. Context instances are passed to functions decorated with duty . __init__ ( self , ** options ) special \u00a4 Initialize the object. Parameters: Name Type Description Default options Options passed internally to failprint functions. {} Source code in duty/logic.py def __init__ ( self , ** options ) -> None : \"\"\" Initialize the object. Arguments: options: Options passed internally to `failprint` functions. \"\"\" self . options = options run ( self , cmd , args = None , kwargs = None , ** options ) \u00a4 Run a command in a subprocess or a Python callable. Parameters: Name Type Description Default cmd Union[str, List[str], Callable] A command or a Python callable. required args Positional arguments passed to the Python callable. None kwargs Keyword arguments passed to the Python callable. None options Options passed to failprint functions. {} Exceptions: Type Description DutyFailure When the exit code / function result is greather than 0. Source code in duty/logic.py def run ( self , cmd : CmdType , args = None , kwargs = None , ** options ): \"\"\" Run a command in a subprocess or a Python callable. Arguments: cmd: A command or a Python callable. args: Positional arguments passed to the Python callable. kwargs: Keyword arguments passed to the Python callable. options: Options passed to `failprint` functions. Raises: DutyFailure: When the exit code / function result is greather than 0. \"\"\" final_options = dict ( self . options ) final_options . update ( options ) try : code = failprint_run ( cmd , args = args , kwargs = kwargs , ** final_options ) except KeyboardInterrupt : code = 130 if code : raise DutyFailure ( code ) Duty \u00a4 The main duty class. __call__ ( self , * args , ** kwargs ) special \u00a4 Run the duty function. Parameters: Name Type Description Default args Positional arguments passed to the function. () kwargs Keyword arguments passed to the function. {} Source code in duty/logic.py def __call__ ( self , * args , ** kwargs ) -> None : \"\"\" Run the duty function. Arguments: args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. \"\"\" self . run ( * args , ** kwargs ) __init__ ( self , name , description , function , pre = None , post = None , opts = None ) special \u00a4 Initialize the object. Parameters: Name Type Description Default name str The duty name. required description str The duty description. required function Callable The duty function. required pre Optional[List[Union[str, Callable, Duty]]] A list of duties to run before this one. None post Optional[List[Union[str, Callable, Duty]]] A list of duties to run after this one. None opts Dict[str, Any] Options used to create the context instance. None Source code in duty/logic.py def __init__ ( self , name : str , description : str , function : Callable , pre : Optional [ DutyListType ] = None , post : Optional [ DutyListType ] = None , opts : Dict [ str , Any ] = None , ) -> None : \"\"\" Initialize the object. Arguments: name: The duty name. description: The duty description. function: The duty function. pre: A list of duties to run before this one. post: A list of duties to run after this one. opts: Options used to create the context instance. \"\"\" self . name = name self . description = description self . function = function self . pre = pre or [] self . post = post or [] self . context = Context ( ** ( opts or self . default_options )) run ( self , * args , ** kwargs ) \u00a4 Run the duty function. This function also runs pre- and post-duties. Parameters: Name Type Description Default args Positional arguments passed to the function. () kwargs Keyword arguments passed to the function. {} Source code in duty/logic.py def run ( self , * args , ** kwargs ) -> None : \"\"\" Run the duty function. This function also runs pre- and post-duties. Arguments: args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. \"\"\" self . run_duties ( self . pre ) self . function ( self . context , * args , ** kwargs ) self . run_duties ( self . post ) run_duties ( self , duties_list ) \u00a4 Run a list of duties. Parameters: Name Type Description Default duties_list List[Union[str, Callable, Duty]] The list of duties to run. required Source code in duty/logic.py def run_duties ( self , duties_list : DutyListType ) -> None : \"\"\" Run a list of duties. Arguments: duties_list: The list of duties to run. \"\"\" for duty_item in duties_list : if isinstance ( duty_item , Duty ): duty_item . run () elif isinstance ( duty_item , str ): get_duty ( duty_item ) . run () elif callable ( duty_item ): duty_item ( self . context ) DutyFailure \u00a4 An exception raised when a duty fails. __init__ ( self , code ) special \u00a4 Initialize the object. Parameters: Name Type Description Default code The exit code of a command. required Source code in duty/logic.py def __init__ ( self , code ): \"\"\" Initialize the object. Arguments: code: The exit code of a command. \"\"\" super () . __init__ ( self ) self . code = code duty ( * args , ** kwargs ) \u00a4 Decorate a callable to transform it and register it as a duty. Parameters: Name Type Description Default args One callable. () kwargs Context options. {} Exceptions: Type Description ValueError When the decorator is misused. Examples: Decorate a function: @duty def clean ( ctx ): ctx . run ( \"rm -rf build\" , silent = True ) Pass options to the context: @duty ( silent = True ) def clean ( ctx ): ctx . run ( \"rm -rf build\" ) # silent=True is implied Returns: Type Description Callable A duty when used without parentheses, a decorator otherwise. Source code in duty/logic.py def duty ( * args , ** kwargs ) -> Union [ Callable , Duty ]: \"\"\" Decorate a callable to transform it and register it as a duty. Arguments: args: One callable. kwargs: Context options. Raises: ValueError: When the decorator is misused. Examples: Decorate a function: ```python @duty def clean(ctx): ctx.run(\"rm -rf build\", silent=True) ``` Pass options to the context: ```python @duty(silent=True) def clean(ctx): ctx.run(\"rm -rf build\") # silent=True is implied ``` Returns: A duty when used without parentheses, a decorator otherwise. \"\"\" if args : if len ( args ) > 1 : raise ValueError ( \"The duty decorator accepts only one positional argument\" , ) return register_duty ( args [ 0 ], ** kwargs ) def decorator ( func ): return register_duty ( func , ** kwargs ) return decorator get_duty ( name_or_alias ) \u00a4 Get a duty by its name or alias. Parameters: Name Type Description Default name_or_alias str The name or alias of the duty. required Returns: Type Description Duty A duty. Source code in duty/logic.py def get_duty ( name_or_alias : str ) -> Duty : \"\"\" Get a duty by its name or alias. Arguments: name_or_alias: The name or alias of the duty. Returns: A duty. \"\"\" try : return duties [ name_or_alias ] except KeyError : return duties_aliases [ name_or_alias ] register_duty ( func , name = None , aliases = None , pre = None , post = None , ** opts ) \u00a4 Register a duty in the duties dictionary. Parameters: Name Type Description Default func Callable The callable to register as a duty. required name Optional[str] The duty name. None aliases Optional[Iterable[str]] A set of aliases for this duty. None pre Optional[List[Union[str, Callable, Duty]]] Pre-duties. None post Optional[List[Union[str, Callable, Duty]]] Post-duties. None opts Options passed to the context. {} Returns: Type Description Duty The registered duty. Source code in duty/logic.py def register_duty ( func : Callable , name : Optional [ str ] = None , aliases : Optional [ Iterable [ str ]] = None , pre : Optional [ DutyListType ] = None , post : Optional [ DutyListType ] = None , ** opts , ) -> Duty : \"\"\" Register a duty in the `duties` dictionary. Arguments: func: The callable to register as a duty. name: The duty name. aliases: A set of aliases for this duty. pre: Pre-duties. post: Post-duties. opts: Options passed to the context. Returns: The registered duty. \"\"\" aliases = set ( aliases ) if aliases else set () name = name or func . __name__ dash_name = name . replace ( \"_\" , \"-\" ) if name != dash_name : aliases . add ( name ) name = dash_name description = inspect . getdoc ( func ) or \"\" duties [ name ] = Duty ( name , description , func , pre = pre , post = post , opts = opts ) for alias in aliases : duties_aliases [ alias ] = duties [ name ] return duties [ name ]","title":"logic.py"},{"location":"reference/logic/#duty.logic","text":"Module containing all the logic.","title":"duty.logic"},{"location":"reference/logic/#duty.logic.Context","text":"A simple context class. Context instances are passed to functions decorated with duty .","title":"Context"},{"location":"reference/logic/#duty.logic.Context.__init__","text":"Initialize the object. Parameters: Name Type Description Default options Options passed internally to failprint functions. {} Source code in duty/logic.py def __init__ ( self , ** options ) -> None : \"\"\" Initialize the object. Arguments: options: Options passed internally to `failprint` functions. \"\"\" self . options = options","title":"__init__()"},{"location":"reference/logic/#duty.logic.Context.run","text":"Run a command in a subprocess or a Python callable. Parameters: Name Type Description Default cmd Union[str, List[str], Callable] A command or a Python callable. required args Positional arguments passed to the Python callable. None kwargs Keyword arguments passed to the Python callable. None options Options passed to failprint functions. {} Exceptions: Type Description DutyFailure When the exit code / function result is greather than 0. Source code in duty/logic.py def run ( self , cmd : CmdType , args = None , kwargs = None , ** options ): \"\"\" Run a command in a subprocess or a Python callable. Arguments: cmd: A command or a Python callable. args: Positional arguments passed to the Python callable. kwargs: Keyword arguments passed to the Python callable. options: Options passed to `failprint` functions. Raises: DutyFailure: When the exit code / function result is greather than 0. \"\"\" final_options = dict ( self . options ) final_options . update ( options ) try : code = failprint_run ( cmd , args = args , kwargs = kwargs , ** final_options ) except KeyboardInterrupt : code = 130 if code : raise DutyFailure ( code )","title":"run()"},{"location":"reference/logic/#duty.logic.Duty","text":"The main duty class.","title":"Duty"},{"location":"reference/logic/#duty.logic.Duty.__call__","text":"Run the duty function. Parameters: Name Type Description Default args Positional arguments passed to the function. () kwargs Keyword arguments passed to the function. {} Source code in duty/logic.py def __call__ ( self , * args , ** kwargs ) -> None : \"\"\" Run the duty function. Arguments: args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. \"\"\" self . run ( * args , ** kwargs )","title":"__call__()"},{"location":"reference/logic/#duty.logic.Duty.__init__","text":"Initialize the object. Parameters: Name Type Description Default name str The duty name. required description str The duty description. required function Callable The duty function. required pre Optional[List[Union[str, Callable, Duty]]] A list of duties to run before this one. None post Optional[List[Union[str, Callable, Duty]]] A list of duties to run after this one. None opts Dict[str, Any] Options used to create the context instance. None Source code in duty/logic.py def __init__ ( self , name : str , description : str , function : Callable , pre : Optional [ DutyListType ] = None , post : Optional [ DutyListType ] = None , opts : Dict [ str , Any ] = None , ) -> None : \"\"\" Initialize the object. Arguments: name: The duty name. description: The duty description. function: The duty function. pre: A list of duties to run before this one. post: A list of duties to run after this one. opts: Options used to create the context instance. \"\"\" self . name = name self . description = description self . function = function self . pre = pre or [] self . post = post or [] self . context = Context ( ** ( opts or self . default_options ))","title":"__init__()"},{"location":"reference/logic/#duty.logic.Duty.run","text":"Run the duty function. This function also runs pre- and post-duties. Parameters: Name Type Description Default args Positional arguments passed to the function. () kwargs Keyword arguments passed to the function. {} Source code in duty/logic.py def run ( self , * args , ** kwargs ) -> None : \"\"\" Run the duty function. This function also runs pre- and post-duties. Arguments: args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. \"\"\" self . run_duties ( self . pre ) self . function ( self . context , * args , ** kwargs ) self . run_duties ( self . post )","title":"run()"},{"location":"reference/logic/#duty.logic.Duty.run_duties","text":"Run a list of duties. Parameters: Name Type Description Default duties_list List[Union[str, Callable, Duty]] The list of duties to run. required Source code in duty/logic.py def run_duties ( self , duties_list : DutyListType ) -> None : \"\"\" Run a list of duties. Arguments: duties_list: The list of duties to run. \"\"\" for duty_item in duties_list : if isinstance ( duty_item , Duty ): duty_item . run () elif isinstance ( duty_item , str ): get_duty ( duty_item ) . run () elif callable ( duty_item ): duty_item ( self . context )","title":"run_duties()"},{"location":"reference/logic/#duty.logic.DutyFailure","text":"An exception raised when a duty fails.","title":"DutyFailure"},{"location":"reference/logic/#duty.logic.DutyFailure.__init__","text":"Initialize the object. Parameters: Name Type Description Default code The exit code of a command. required Source code in duty/logic.py def __init__ ( self , code ): \"\"\" Initialize the object. Arguments: code: The exit code of a command. \"\"\" super () . __init__ ( self ) self . code = code","title":"__init__()"},{"location":"reference/logic/#duty.logic.duty","text":"Decorate a callable to transform it and register it as a duty. Parameters: Name Type Description Default args One callable. () kwargs Context options. {} Exceptions: Type Description ValueError When the decorator is misused. Examples: Decorate a function: @duty def clean ( ctx ): ctx . run ( \"rm -rf build\" , silent = True ) Pass options to the context: @duty ( silent = True ) def clean ( ctx ): ctx . run ( \"rm -rf build\" ) # silent=True is implied Returns: Type Description Callable A duty when used without parentheses, a decorator otherwise. Source code in duty/logic.py def duty ( * args , ** kwargs ) -> Union [ Callable , Duty ]: \"\"\" Decorate a callable to transform it and register it as a duty. Arguments: args: One callable. kwargs: Context options. Raises: ValueError: When the decorator is misused. Examples: Decorate a function: ```python @duty def clean(ctx): ctx.run(\"rm -rf build\", silent=True) ``` Pass options to the context: ```python @duty(silent=True) def clean(ctx): ctx.run(\"rm -rf build\") # silent=True is implied ``` Returns: A duty when used without parentheses, a decorator otherwise. \"\"\" if args : if len ( args ) > 1 : raise ValueError ( \"The duty decorator accepts only one positional argument\" , ) return register_duty ( args [ 0 ], ** kwargs ) def decorator ( func ): return register_duty ( func , ** kwargs ) return decorator","title":"duty()"},{"location":"reference/logic/#duty.logic.get_duty","text":"Get a duty by its name or alias. Parameters: Name Type Description Default name_or_alias str The name or alias of the duty. required Returns: Type Description Duty A duty. Source code in duty/logic.py def get_duty ( name_or_alias : str ) -> Duty : \"\"\" Get a duty by its name or alias. Arguments: name_or_alias: The name or alias of the duty. Returns: A duty. \"\"\" try : return duties [ name_or_alias ] except KeyError : return duties_aliases [ name_or_alias ]","title":"get_duty()"},{"location":"reference/logic/#duty.logic.register_duty","text":"Register a duty in the duties dictionary. Parameters: Name Type Description Default func Callable The callable to register as a duty. required name Optional[str] The duty name. None aliases Optional[Iterable[str]] A set of aliases for this duty. None pre Optional[List[Union[str, Callable, Duty]]] Pre-duties. None post Optional[List[Union[str, Callable, Duty]]] Post-duties. None opts Options passed to the context. {} Returns: Type Description Duty The registered duty. Source code in duty/logic.py def register_duty ( func : Callable , name : Optional [ str ] = None , aliases : Optional [ Iterable [ str ]] = None , pre : Optional [ DutyListType ] = None , post : Optional [ DutyListType ] = None , ** opts , ) -> Duty : \"\"\" Register a duty in the `duties` dictionary. Arguments: func: The callable to register as a duty. name: The duty name. aliases: A set of aliases for this duty. pre: Pre-duties. post: Post-duties. opts: Options passed to the context. Returns: The registered duty. \"\"\" aliases = set ( aliases ) if aliases else set () name = name or func . __name__ dash_name = name . replace ( \"_\" , \"-\" ) if name != dash_name : aliases . add ( name ) name = dash_name description = inspect . getdoc ( func ) or \"\" duties [ name ] = Duty ( name , description , func , pre = pre , post = post , opts = opts ) for alias in aliases : duties_aliases [ alias ] = duties [ name ] return duties [ name ]","title":"register_duty()"}]}