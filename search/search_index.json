{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"duty","text":"<p>A simple task runner.</p> <p>Inspired by Invoke.</p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>:</p> <pre><code>pip install duty\n</code></pre> <p>With <code>pipx</code>:</p> <pre><code>python3.8 -m pip install --user pipx\npipx install duty\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<p>Create a <code>duties.py</code> file at the root of your repository.</p> <pre><code>from duty import duty\n\n@duty\ndef docs(ctx):\n    ctx.run(\"mkdocs build\", title=\"Building documentation\")\n</code></pre> <p>You can now use the command line tool to run it:</p> <pre><code>duty docs\n</code></pre> <p>See the Usage section in the documentation for more examples.</p> <p>Also see \"Why choosing duty over...\".</p>"},{"location":"#why-duty-over","title":"Why duty over...","text":""},{"location":"#invoke","title":"Invoke?","text":"<p>The main difference is duty's ability to run Python callables, not just (sub)processes. Using Python callables brings three advantages:</p> <ul> <li>performance: creating subprocesses is costly. Running a callable     in the current Python process is much cheaper.</li> <li>containment: running an executable in a subprocess can load     various things in the process' environment which you do not     have control over. Running a callable in the current Python     process ensures that the current process' environment is used,     as you configured it.</li> <li>extensibility: get the full power of Python! You can define     functions dynamically in your tasks and run them through duty.     We actually provide a set of ready-to-use callables.</li> </ul> <p>Notable differences with Invoke:</p> <ul> <li>duty captures standard output and error by default.     For interactive commands, you have to pass the <code>capture=False</code> option.     See capturing commands output.</li> <li>on the CLI, parameters are passed with <code>param=value</code>, not <code>--param=value</code>.     For a boolean parameter: <code>param=true</code> instead of <code>--param</code>.     See passing parameters.</li> </ul> <p>duty provides additional facilities to:</p> <ul> <li>skip tasks</li> <li>create lazy callables</li> <li>format the output of commands</li> </ul> <p>The rest is pretty much similar to Invoke. duty has:</p> <ul> <li>tasks listing</li> <li>tasks aliasing</li> <li>tasks parameters</li> <li>before/after hooks</li> <li>working directory management</li> </ul>"},{"location":"#gnu-make","title":"GNU Make?","text":"<p>Make and duty are not really comparable. However they complement each other well. For example if you are managing your Python project with Poetry or PDM, it can be tedious to type <code>poetry run duty ...</code> or <code>pdm run duty ...</code> to run tasks. With a makefile you can shorten this to <code>make ...</code>:</p> <pre><code>DUTY := $(if $(VIRTUAL_ENV),,pdm run) duty\n\nclean:\n    @$(DUTY) clean\n</code></pre> <p>See our Makefile for inspiration. </p>"},{"location":"#task","title":"Task?","text":"<p>Task is based on a Taskfile written in YAML. Declarative languages are nice, but quickly get limited when you have complex things to run.</p> <p>Also Task is written in Go so you won't be able to specify it in your Python dev-dependencies.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#110-2023-10-25","title":"1.1.0 - 2023-10-25","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Exclude failprint 1.0 from accepted versions (25f088a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add <code>format</code> command to Ruff callable (d462425 by Kyle Wigley). PR #16</li> </ul>"},{"location":"changelog/#100-2023-06-27","title":"1.0.0 - 2023-06-27","text":"<p>Compare with 0.11.1</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li>Drop support for Python 3.7</li> </ul>"},{"location":"changelog/#dependencies_1","title":"Dependencies","text":"<ul> <li>Remove dependencies for Python 3.7 (a1d2629 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Cast parameters using default values' type when there's no annotation (c93db55 by Timoth\u00e9e Mazzucotelli). Issue #10</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix parameter casting for stringified annotations (56090e5 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Remove Python 3.7 related code (b412f29 by Timoth\u00e9e Mazzucotelli).</li> <li>Add duties module to <code>sys.modules</code> after loading it (5730f5f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0111-2023-05-23","title":"0.11.1 - 2023-05-23","text":"<p>Compare with 0.11.0</p>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Print help and duties when no arguments are given (eaab432 by Timoth\u00e9e Mazzucotelli). Issue #11</li> </ul>"},{"location":"changelog/#0110-2023-04-13","title":"0.11.0 - 2023-04-13","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add callable for <code>ssort</code> (11b54da by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0100-2023-04-10","title":"0.10.0 - 2023-04-10","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Support updated lazy decorator from <code>failprint</code> (a0446ac by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#090-2023-03-07","title":"0.9.0 - 2023-03-07","text":"<p>Compare with 0.8.0</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add callable for Interrogate (9be8068 by jexio). PR #8</li> </ul>"},{"location":"changelog/#080-2023-02-18","title":"0.8.0 - 2023-02-18","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Make all callables lazy, allowing to call them directly (a499e4b by Timoth\u00e9e Mazzucotelli).</li> <li>Provide callables for popular tools (0e065e2 by Timoth\u00e9e Mazzucotelli). Issue #7</li> <li>Add option to skip duties based on condition (629b988 by Timoth\u00e9e Mazzucotelli). Issue #6</li> </ul>"},{"location":"changelog/#070-2021-08-01","title":"0.7.0 - 2021-08-01","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Make <code>ctx.run</code> return the command output (1810623 by Timoth\u00e9e Mazzucotelli). Issue #4</li> <li>Add <code>allow_overrides</code> and <code>workdir</code> options (ddbf7a2 by Timoth\u00e9e Mazzucotelli). Issue #1</li> <li>Allow passing standard input to a command (thanks to failprint 0.8). Issue #3</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Make duties unwrappable (c96325a by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#060-2021-02-06","title":"0.6.0 - 2021-02-06","text":"<p>Compare with 0.5.0</p> <p>This release greatly improves usability on the command line! You will now be able to override <code>silent</code>, <code>capture</code> and other options with arguments like <code>--silent</code>, <code>--no-silent</code>, <code>--capture=both</code>, etc. See Usage in the docs for details!</p>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Implement type casting based on annotations (52ea614 by Timoth\u00e9e Mazzucotelli).</li> <li>Improve CLI usage (93e10cd by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#050-2020-10-11","title":"0.5.0 - 2020-10-11","text":"<p>Compare with 0.4.1</p>"},{"location":"changelog/#packaging","title":"Packaging","text":"<ul> <li>Use <code>failprint</code> version 0.6.0 (changelog).</li> </ul>"},{"location":"changelog/#041-2020-10-05","title":"0.4.1 - 2020-10-05","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fix <code>-d</code> option parsing (a004c7f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Accept args and kwargs in decorator (567334f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#040-2020-10-05","title":"0.4.0 - 2020-10-05","text":"<p>Compare with 0.3.1</p>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Add list options and aliases (c238110 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#031-2020-10-04","title":"0.3.1 - 2020-10-04","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Add missing <code>failprint</code> dependency (5b1663c by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#030-2020-10-04","title":"0.3.0 - 2020-10-04","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Add missing <code>__call__</code> method to <code>Duty</code> (290e283 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Better handle CLI arguments (144b33d by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Handle keyboard interruptions (1c5b594 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#020-2020-10-02","title":"0.2.0 - 2020-10-02","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Initial features (3c395d3 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#010-2020-10-02","title":"0.1.0 - 2020-10-02","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Initial commit (371ef31 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at pawamoy@pm.me. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd duty\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run duty [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build duty. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>colorama</code> Cross-platform colored terminal text. <code>0.4.6</code> BSD License <code>failprint</code> Run a command, print its output only if it fails. <code>&gt;=0.11,!=1.0.0</code> <code>1.0.2</code> ISC <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.1; python_version &lt; \"3.10\"</code> <code>4.8.0</code> Python Software Foundation License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>appdirs</code> A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>1.4.4</code> MIT <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.13.1</code> BSD-3-Clause <code>beautifulsoup4</code> Screen-scraping library <code>4.12.2</code> MIT License <code>black</code> The uncompromising code formatter. <code>&gt;=23.9</code> <code>23.10.1</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.16</code> <code>1.16.0</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.7.22</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.1</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.3.2</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.3</code> MIT license <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.3</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT License <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.3</code> <code>2.3.1</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.11</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.40</code> BSD <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.35</code> <code>0.36.7</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.3; python_version &lt; \"3.10\"</code> <code>6.8.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.10</code> <code>3.1.2</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>lxml</code> Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. <code>&gt;=4.9</code> <code>4.9.3</code> BSD-3-Clause <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.5</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.3</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.7.0.1.0.1</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.5.3</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of github committers and other useful GIT info such as last modified date <code>&gt;=1.2</code> <code>1.2.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=9.4</code> <code>9.4.6+insiders.4.42.2</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.2</code> <code>1.3</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7</code> <code>0.7.1</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.23</code> <code>0.23.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.7.3.1.5.1</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=1.5</code> <code>1.6.1</code> MIT License <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.2</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.11.2</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>3.11.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.3.0</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.16.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.3.1</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=7.4</code> <code>7.4.3</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=4.1</code> <code>4.1.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.3</code> <code>3.3.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2023.3.post1</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2023.10.3</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.18.2</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.13\"</code> <code>0.2.8</code> MIT <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;=0.0</code> <code>0.1.2</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2.3</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>68.2.2</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>soupsieve</code> A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.5</code> MIT License <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=2.0; python_version &lt; '3.11'</code> <code>2.0.1</code> ? <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.5</code> <code>3.5.0.0</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.12</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>4.8.0</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.0.7</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.17.0</code> ? <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2020, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#writing-duties","title":"Writing duties","text":"<p>Your tasks, or duties, are defined in a Python module. By default, <code>duty</code> will load these tasks from a <code>duties.py</code> file at the root of your repository.</p> <p>Each task is declared as a \"duty\", using the <code>duty.duty</code> decorator.</p> <pre><code>from duty import duty\n\n\n@duty\ndef docs(ctx):\n    ctx.run(\"mkdocs build\", title=\"Building documentation\")\n</code></pre> <p>The <code>ctx</code> argument is the \"context\" of the duty. It is automatically created and passed to your function.</p> <p>It has only one purpose: running command with its <code>run</code> method. The <code>run</code> method accepts strings, list of strings, or even Python callables.</p> <p>The above duty runs the command in a shell process. To avoid using a shell, pass a list of strings instead:</p> <pre><code>from duty import duty\n\n\n@duty\ndef docs(ctx):\n    ctx.run([\"mkdocs\", \"build\"], title=\"Building documentation\")\n    # avoid the overhead of an extra shell process\n</code></pre> <p>And to avoid using a subprocess completely, pass a Python callable:</p> <pre><code>from duty import duty\nfrom mkdocs import build, config\n\n\n@duty\ndef docs(ctx):\n    ctx.run(build.build, args=[config.load_config()], title=\"Building documentation\")\n    # avoid the overhead of an extra Python process\n</code></pre> <p>For convenience, <code>duty</code> provides callables for many popular Python tools, so that you don't have to read their source and learn how to call them. For example, the <code>mkdocs build</code> command can be called like this:</p> <pre><code>from duty import duty\nfrom duty.callables import mkdocs\n\n\n@duty\ndef docs(ctx):\n    ctx.run(mkdocs.build, kwargs={\"strict\": True}, title=\"Building documentation\")\n</code></pre>"},{"location":"usage/#lazy-callables","title":"Lazy callables","text":"<p>Our callables are lazy!</p> <p>Not only imports to third-party modules are deferred when our callables run, but the callables themselves are lazy, meaning you can call them directly, without passing arguments and keyword arguments with the <code>args</code> and <code>kwargs</code> parameters of <code>ctx.run()</code>:</p> <pre><code>from duty import duty\nfrom duty.callables import mkdocs\n\n\n@duty\ndef docs(ctx):\n    ctx.run(mkdocs.build(strict=True), title=\"Building documentation\")\n</code></pre> <p>The main benefit is that it enables IDE features like help tooltips and auto-completion, as well as improving readability and writability.</p> <p>See all our callables in the Code reference.</p> <p>You can also create your own lazy callables with <code>duty.callables.lazy</code>. The <code>lazy</code> function (which can also be used as a decorator) takes any other callable and makes it lazy:</p> <pre><code>from duty import duty\nfrom duty.callables import lazy\n\nfrom griffe.cli import check\n\n\n@duty\ndef check_api(ctx):\n    griffe_check = lazy(check, name=\"griffe.check\")\n    ctx.run(griffe_check(\"pkg\"))\n</code></pre>"},{"location":"usage/#ctxrun-options","title":"<code>ctx.run()</code> options","text":"<p>The <code>run</code> methods accepts various options, mostly coming from its underlying dependency: <code>failprint</code>.</p> <p>Arguments of the <code>run</code> method:</p> Name Type Description Default cmd <code>str</code>, <code>list of str</code>, or Python callable The command to run. required args <code>list</code> Arguments to pass to the callable. <code>[]</code> kwargs <code>dict</code> Keyword arguments to pass to the callable. <code>{}</code> number <code>int</code> The command number (useful for the <code>tap</code> format). <code>None</code> capture <code>str</code> The type of output: <code>\"stdout\"</code>, <code>\"stderr\"</code>, <code>\"both\"</code> (or <code>True</code>) and <code>\"none\"</code> (or <code>False</code>) <code>True</code> title <code>str</code> The command title. cmd as a shell command or Python statement fmt <code>str</code> The output format as a Jinja template: <code>\"pretty\"</code>, <code>\"tap\"</code> or <code>\"custom=...\"</code> <code>\"pretty\"</code> pty <code>bool</code> Whether to run in a PTY. <code>False</code> progress <code>bool</code> Whether to show progress. <code>True</code> nofail <code>bool</code> Whether to always succeed. <code>False</code> quiet <code>bool</code> Don't print the command output, even if it failed. <code>False</code> silent <code>bool</code> Don't print anything. <code>False</code> stdin <code>str</code> Pass text to a command as standard input. <code>None</code> workdir <code>str</code> Change the working directory. <code>None</code> command <code>str</code> The shell command equivalent to <code>cmd</code>, to show how to run it without duty (useful when passing Python callables). stringified <code>cmd</code> allow_overrides <code>bool</code> Allow options overrides via CLI arguments. <code>True</code> <p>Example usage of the <code>silent</code> option:</p> <pre><code>@duty\ndef clean(ctx):\n    ctx.run(\"find . -type d -name __pycache__ | xargs rm -rf\", silent=True)\n</code></pre>"},{"location":"usage/#default-options","title":"Default options","text":"<p>Let's say you have more than one command, and you want to silence all of them. Instead of passing <code>silent=True</code> to all <code>ctx.run()</code> calls, you can set this option as default in the decorator itself:</p> <pre><code>@duty(silent=True)\ndef clean(ctx):\n    ctx.run(\"rm -rf .coverage*\")\n    ctx.run(\"rm -rf .mypy_cache\")\n    ctx.run(\"rm -rf .pytest_cache\")\n    ctx.run(\"rm -rf build\")\n    ctx.run(\"rm -rf dist\")\n    ctx.run(\"rm -rf pip-wheel-metadata\")\n    ctx.run(\"rm -rf site\")\n    ctx.run(\"find . -type d -name __pycache__ | xargs rm -rf\")\n    ctx.run(\"find . -name '*.rej' -delete\")\n</code></pre> <p>You can of course override the default options in the <code>ctx.run()</code> calls:</p> <pre><code>@duty(capture=True)\ndef run_scripts(ctx):\n    ctx.run(\"bash script1.sh\")\n    ctx.run(\"bash script2.sh\")\n    ctx.run(\"bash script3.sh\", capture=False)\n</code></pre>"},{"location":"usage/#options-as-a-context-manager","title":"Options as a context manager","text":"<p>You can temporarily change options for several <code>run</code> calls with <code>ctx.options()</code>:</p> <pre><code>@duty\ndef run_scripts(ctx):\n    with ctx.options(nofail=True):\n        ctx.run(\"bash script1.sh\")\n        ctx.run(\"bash script2.sh\")\n    ctx.run(\"bash script3.sh\")\n</code></pre> <p>Such temporary changes will stack above the previous ones each time you enter the <code>with</code> clause, and unstack each time you leave it:</p> <pre><code>@duty\ndef run_scripts(ctx):\n    ctx.run(\"bash script0.sh\")  # defaults\n\n    with ctx.options(nofail=True):\n        ctx.run(\"bash script1.sh\")  # nofail=True\n\n        with ctx.options(quiet=True):\n            ctx.run(\"bash script2.sh\")  # nofail=True, quiet=True\n\n            with ctx.options(silent=True, nofail=False):\n                ctx.run(\"bash script3.sh\")  # nofail=False, quiet=True, silent=True\n\n            ctx.run(\"bash script4.sh\")  # nofail=True, quiet=True\n\n        ctx.run(\"bash script5.sh\")  # nofail=True\n\n    ctx.run(\"bash script6.sh\")  # defaults\n</code></pre>"},{"location":"usage/#changing-the-working-directory","title":"Changing the working directory","text":"<p>You can change the working directory for a specific <code>run</code>:</p> <pre><code>@duty\ndef run_scripts(ctx):\n    ctx.run(\"bash script3.sh\", workdir=\"subfolder\")\n</code></pre> <p>Or for a group of <code>run</code> calls, using the <code>options</code> context manager:</p> <pre><code>@duty\ndef run_scripts(ctx):\n    ctx.run(\"echo in .\")\n    ctx.run(\"ls\")\n    with ctx.options(workdir=\"subfolder\"):\n        ctx.run(\"echo in subfolder\")\n        ctx.run(\"ls\")\n</code></pre> <p>The change of directory is not immediate.</p> <p>When using the <code>workdir</code> option through the context manager, the actual change of directory is deferred to each of the <code>run</code> calls within that context.</p> <p>A nesting of <code>ctx.options(workdir=...)</code> will each time override the previous one:</p> <pre><code>@duty\ndef run_scripts(ctx):\n    ctx.run(\"echo in .\")  # run in ./\n    with ctx.options(workdir=\"A\"):\n        ctx.run(\"echo in A\")  # run in ./A\n        with ctx.options(workdir=\"B\"):\n            ctx.run(\"echo in...\")  # run in ./B, not ./A/B!\n</code></pre> <p>It also means instructions other than <code>ctx.run</code> still run in the original directory!</p> <pre><code>@duty\ndef run_scripts(ctx):\n    ctx.run(\"echo in .\")  # run in ./\n    with ctx.options(workdir=\"A\"):\n        ctx.run(\"echo in A\")  # run in ./A\n        l = os.listdir()  # run in ./, not ./A!\n</code></pre> <p>If you want to immediately enter the directory, or to nest multiple directory changes, use the <code>cd</code> context manager.</p> <p>Another way to change the working directory is to use the <code>ctx.cd(directory)</code> context manager:</p> <pre><code>@duty\ndef run_scripts(ctx):\n    ctx.run(\"echo in .\")  # run in ./\n\n    with ctx.cd(\"A\"):\n        ctx.run(\"echo in A\")  # run in ./A\n        l = os.listdir()  # run in ./A as well\n\n        with ctx.cd(\"B\"):\n            ctx.run(\"echo in A/B\")  # run in ./A/B\n            ctx.run(\"echo in A/B/C\", workdir=\"C\")  # run in ./A/B/C\n\n        ctx.run(\"echo in A\")  # back to ./A\n\n    ctx.run(\"echo in .\")  # back to ./\n</code></pre>"},{"location":"usage/#saving-the-output-of-a-command","title":"Saving the output of a command","text":"<p>In duty 0.7 (thanks to failprint 0.8), the <code>run</code> method of the context objects always returns the captured output of the command (even when it also prints it on the standard output). If nothing was captured, the returned output will be empty.</p> <p>You can therefore use <code>ctx.run</code> as a shortcut to get the output of a command.</p> <p>Before duty 0.7:</p> <pre><code>import subprocess\n\nfrom duty import duty\n\n\n@duty\ndef action(ctx):\n    requirements = subprocess.run(\n        [\"pip\", \"freeze\"],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        text=True,\n    ).output\n    ...\n</code></pre> <p>With duty 0.7:</p> <pre><code>from duty import duty\n\n\n@duty\ndef action(ctx):\n    requirements = ctx.run([\"pip\", \"freeze\"])\n    ...\n</code></pre>"},{"location":"usage/#passing-standard-input-to-a-command","title":"Passing standard input to a command","text":"<p>failprint 0.8 introduced the ability to pass text as standard input to a command. duty 0.7 takes advantage of this new failprint version, and therefore allows you to do the same in your duties.</p> <p>Before duty 0.7, to pass standard input to a command, you had to write a shell command, for example:</p> <pre><code>@duty\ndef check_dependencies(ctx):\n    ctx.run(\n        \"pdm export -f requirements --without-hashes | safety check --stdin --full-report\",\n        title=\"Checking dependencies\",\n    )\n</code></pre> <p>This had a few issues:</p> <ul> <li>you had to use a shell command, which brings its lot of platform-and-shell-dependent issues, such as:<ul> <li>shell might not be the same everywhere</li> <li>on Windows, there were high chances the <code>safety</code> executable would not be found</li> </ul> </li> </ul> <p>To fix the latter, you had to compute the absolute paths of all exectuables in the command before-hand (except the first one, which failprint handles itself):</p> <pre><code>@duty\ndef check_dependencies(ctx):\n    safety = which(\"safety\") or \"safety\"  # hope for the best\n    ctx.run(\n        f\"pdm export -f requirements --without-hashes | {safety} check --stdin --full-report\",\n        title=\"Checking dependencies\",\n        pty=PTY,\n    )\n</code></pre> <p>With duty 0.7, everything is easier and more robust since you can save the output of a command in a variable, and then pass this variable as standard input to another command! This allows to write commands as lists of strings (better cross-platform support, less resource-consuming), and reuse the output of one command as input of several others:</p> <pre><code>@duty\ndef check_dependencies(ctx):\n    requirements = ctx.run(\n        [\"pdm\", \"export\", \"-f\", \"requirements\", \"--without-hashes\"],\n        title=\"Exporting dependencies as requirements\",\n        allow_overrides=False,\n        # this is a preparation command that must not be altered\n        # by CLI options targetted at the next commands,\n        # see \"Preventing options overrides\"\n    )\n    ctx.run(\n        [\"safety\", \"check\", \"--stdin\", \"--full-report\"],\n        title=\"Checking dependencies\",\n        stdin=requirements,\n    )\n    ctx.run(\n        [\"other\", \"command\", \"using\", \"requirements\"],\n        title=\"Checking one more thing\",\n        stdin=requirements,\n    )\n</code></pre>"},{"location":"usage/#prepost-duties","title":"Pre/post duties","text":"<p>Each duty can be configured to run other duties before or after itself, with the <code>pre</code> and <code>post</code> decorator options.</p> <p>The <code>pre</code> and <code>post</code> options accept a list of other duties to run. These other duties can be passed directly, or can be looked up using their names. You can also pass any callable that accepts a context argument, just like any duty.</p> <p>For example, you can create a composite duty <code>check</code> that calls other, more specific checking duties:</p> <pre><code># looking up duties thanks to their names, allowing to reference duties\n# that have not yet been declared in the collection\n@duty(pre=[\"check_quality\", \"check_types\", \"check_docs\", \"check_dependencies\"])\ndef check(ctx):\n    \"\"\"Check it all!\"\"\"\n</code></pre> <p>Or you can make sure to always run the <code>clean</code> duty before running your tests, and print a coverage report after running them:</p> <pre><code>@duty\ndef clean(ctx):\n    ctx.run(\"rm -rf tests/tmp\")\n\n\n@duty\ndef coverage(ctx):\n    ctx.run(\"coverage combine\", nofail=True)\n    ctx.run(\"coverage report\", capture=False)\n\n\n@duty(pre=[clean], post=[coverage])\ndef test(ctx):\n    ctx.run(\"pytest tests\")\n</code></pre> <p>Important</p> <p>The pre/post duties will be passed the context of the running duty. This allows to alter the behavior in both the running duties, as well as its pre/post duties. If you wish to run the pre/post duties with unaltered context, you can pass a lambda that calls their <code>run</code> method:</p> <pre><code>@duty(nofail=True, capture=False)\ndef coverage(ctx):\n    ctx.run(\"coverage combine\")\n    ctx.run(\"coverage report\")\n\n\n@duty(post=[lambda ctx: coverage.run()])\ndef test(ctx):\n    ctx.run(\"pytest tests\")\n</code></pre>"},{"location":"usage/#defining-aliases","title":"Defining aliases","text":"<p>Duties can have aliases. By default, duty will create an alias for each duty by replacing underscores with dashes. It means that, even if you duty is called <code>check_docs</code>, you can call it with <code>duty check-docs</code> on the command line, or reference it using <code>check-docs</code> in pre/post duties.</p> <p>If you wish to add more aliases to a duty (for example to provide shorter names), use the decorator <code>aliases</code> option:</p> <pre><code>@duty(aliases=[\"start\", \"up\"])\ndef start_backend(ctx):\n    ctx.run(\"docker-compose up\")\n</code></pre> <p>With this example, you'll be able to start the backend with any of the four equivalent commands:</p> <pre><code>duty start_backend\nduty start-backend\nduty start\nduty up\n</code></pre>"},{"location":"usage/#skipping-duties","title":"Skipping duties","text":"<p>You can tell duty to always skip a duty if a certain condition is met. This feature is inspired by pytest's <code>skip_if</code> marker.</p> <pre><code>@duty(\n    skip_if=sys.version_info &lt; (3, 8),\n    skip_reason=\"Building docs is not supported on Python 3.7\",\n)\ndef docs(ctx):\n    ctx.run(\"mkdocs build\")\n</code></pre> <p>By default, <code>skip_reason</code> will be \"duty: skipped\" where \"duty\" is replaced by the name of the duty.</p>"},{"location":"usage/#listing-duties","title":"Listing duties","text":"<p>Once you have defined some duties, you can list them from the CLI with the <code>-l</code>, <code>--list</code> option. Example:</p> <pre><code>$ duty --list\n  changelog             Update the changelog in-place with latest commits.\n  check                 Check it all!\n  check-api             Check for API breaking changes.\n  check-dependencies    Check for vulnerabilities in dependencies.\n  check-docs            Check if the documentation builds correctly.\n  check-quality         Check the code quality.\n  check-types           Check that the code is correctly typed.\n  clean                 Delete temporary files.\n  cov                   Report coverage as text and HTML.\n  docs                  Serve the documentation (localhost:8000).\n  docs-deploy           Deploy the documentation on GitHub pages.\n  format                Run formatting tools on the code.\n  release               Release a new Python package.\n  test                  Run the test suite.\n</code></pre> <p>You can also show help for given duties with the <code>-h</code>, <code>--help</code> option:</p> <pre><code>$ duty --help release\nusage: duty release [-c {stdout,stderr,both,none}] [-f {pretty,tap}] [-y | -Y] [-p | -P] [-q | -Q] [-s | -S] [-z | -Z]\n\nRelease a new Python package.\n\nParameters:\n    ctx: The context instance (passed automatically).\n    version: The new version number to use.\n\noptions:\n  -c {stdout,stderr,both,none}, --capture {stdout,stderr,both,none}\n                        Which output to capture. Colors are supported with 'both' only, unless the command has a 'force color' option.\n  -f {pretty,tap}, --fmt {pretty,tap}, --format {pretty,tap}\n                        Output format. Pass your own Jinja2 template as a string with '-f custom=TEMPLATE'. Available variables: command, title (command or title passed with -t), code (exit\n                        status), success (boolean), failure (boolean), number (command number passed with -n), output (command output), nofail (boolean), quiet (boolean), silent (boolean).\n                        Available filters: indent (textwrap.indent).\n  -y, --pty             Enable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\n  -Y, --no-pty          Disable the use of a pseudo-terminal. PTY doesn't allow programs to use standard input.\n  -p, --progress        Print progress while running a command.\n  -P, --no-progress     Don't print progress while running a command.\n  -q, --quiet           Don't print the command output, even if it failed.\n  -Q, --no-quiet        Print the command output when it fails.\n  -s, --silent          Don't print anything.\n  -S, --no-silent       Print output as usual.\n  -z, --zero, --nofail  Don't fail. Always return a success (0) exit code.\n  -Z, --no-zero, --strict\n                        Return the original exit code.\n</code></pre> <p>It prints the docstring of the corresponding function as well as all the duty options you can use (same options for every duties).</p>"},{"location":"usage/#running-duties","title":"Running duties","text":"<p>To run a duty, simply use:</p> <pre><code>duty clean\n</code></pre> <p>If you are using Poetry or PDM:</p> <pre><code>poetry run duty clean\npdm run duty clean\n</code></pre> <p>You can pass multiple duties in one command:</p> <pre><code>duty clean docs\n</code></pre>"},{"location":"usage/#passing-parameters","title":"Passing parameters","text":"<p>Duties can accept arguments (or parameters):</p> <pre><code>@duty\ndef docs(ctx, serve: bool = False):\n    command = \"serve\" if serve else \"build\"\n    ctx.run(f\"mkdocs {command}\")\n</code></pre> <p>When passing the argument from the command line, it will be type-casted using the parameter annotation in the duty's signature. If there is no annotation but a default value, it will be type-casted using the type of the default value.</p> <p>We only support types that are callable and accept one positional argument: a string. Examples of supported builtin types: <code>int</code>, <code>str</code>, <code>float</code>, <code>bool</code>, <code>list</code>, etc.</p> <p>The <code>bool</code> type uses a special conversion table:</p> Value (case-insensitive) Result <code>\"\"</code> (empty string) <code>False</code> <code>\"0\"</code> <code>False</code> <code>\"off\"</code> <code>False</code> <code>\"n\"</code> <code>False</code> <code>\"no\"</code> <code>False</code> <code>\"false\"</code> <code>False</code> anything else (including <code>\"-1\"</code>) <code>True</code> <p>To pass a parameter as a keyword argument, use the <code>name=value</code> form:</p> <pre><code>duty docs serve=yes  # --&gt; serve = True\n</code></pre> <p>You can use your own custom types as well:</p> <pre><code>class Point:\n    def __init__(self, xy: str):\n        self.x, self.y = xy.split(\",\")\n\n\n@duty\ndef shoot(ctx, point: Point):\n    ctx.run(f\"shoot -x {point.x} -y {point.y}\")\n</code></pre> <p>Then, when running the duty:</p> <pre><code>duty shoot point=5,15\n</code></pre> <p>You can also pass parameters as positional arguments:</p> <pre><code>duty shoot 5,15\n</code></pre> <p>Limitation with positional arguments</p> <p>When passing positional arguments, make sure there is no overlap between other duties' names and the argument value, otherwise <code>duty</code> will not be able to parse the command correctly.</p>"},{"location":"usage/#passing-options","title":"Passing options","text":"<p>Usage summary:</p> <pre><code>duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...]\n</code></pre>"},{"location":"usage/#global-options","title":"Global options","text":"<p>The <code>duty</code> command line tool accepts global options that will affect all the duties selected to run. These options are the same you can use in <code>ctx.run()</code> calls, except for <code>number</code> and <code>title</code> (because it wouldn't make sense).</p> <p>The specified global options will override the default options of duties, as well as the options passed in <code>ctx.run()</code> calls!</p> <p>For example, with a duty declaring these options:</p> <pre><code>@duty(capture=\"both\")\ndef play(ctx, file):\n    ctx.run(f\"play {file}\", nofail=True)\n</code></pre> <p>...you can override both the <code>capture</code> and <code>nofail</code> options like this:</p> <pre><code>duty --capture=none --strict play this-file.mp4\n# or with the short options\nduty -Zc none play this-file.mp4 \n</code></pre>"},{"location":"usage/#local-options","title":"Local options","text":"<p>Local options are the same as global options. Instead of passing them to <code>duty</code> directly, you can pass them to a specific duty on the command line. If we use the previous example again:</p> <pre><code>duty play -Zc none this-file.mp4 \n</code></pre> <p>It allows to use different options for different duties selected on the command line. In the following example, the <code>format</code> and <code>check</code> duties will have their output captured, while the <code>test</code> duty will not:</p> <pre><code>duty -cboth format check test -cnone\n</code></pre>"},{"location":"usage/#preventing-options-overrides-from-the-cli","title":"Preventing options overrides from the CLI","text":"<p>If for some reason you would like to prevent the ability to override an option with the command line global or local options, pass <code>allow_overrides=False</code> to your <code>ctx.run()</code> call, or even to your <code>ctx.options()</code> context manager:</p> <pre><code>@duty\ndef run_scripts(ctx):\n    # no option can be changed from the CLI for the following run\n    ctx.run(\"bash script1.sh\", quiet=False, allow_overrides=False)\n\n    # not for these runs either\n    with ctx.options(nofail=True, allow_overrides=False):\n        ctx.run(\"bash script2.sh\")\n        ctx.run(\"bash script3.sh\")\n</code></pre>"},{"location":"usage/#capturing-commands-output","title":"Capturing commands output","text":"<p>When running a command through <code>ctx.run()</code>, you can choose to capture its standard output, its standard error, both, or none.</p> <p>Captured output is then available as an <code>output</code> variable when formatting duty's output.</p> <ul> <li><code>capture=stdout</code> will capture both stdout and stderr,   but will only make stdout available while formatting</li> <li><code>capture=stderr</code> will capture both stdout and stderr,   but will only make stderr available while formatting</li> <li><code>capture=both</code> will capture both stdout and stderr as one single stream,   and will make it available while formatting</li> <li><code>capture=none</code> will not capture anything, and both stdout and stderr   will be printed in real-time to the console</li> </ul> <p>It is not possible to capture only stdout, or only stderr, and let the other one be printed to the console. Capturing one is capturing both, but discarding the other.</p>"},{"location":"usage/#formatting-duty-output","title":"Formatting duty output","text":"<p>Thanks to its underlying <code>failprint</code> dependency, it is possible to change the output of command runs. The output of a command is rendered using a Jinja template string. For example, the two builtin <code>failprint</code> formats are:</p> <ul> <li> <p><code>pretty</code> (default)   <pre><code>{% if success %}&lt;green&gt;\u2713&lt;/green&gt;\n{% elif nofail %}&lt;yellow&gt;\u2717&lt;/yellow&gt;\n{% else %}&lt;red&gt;\u2717&lt;/red&gt;{% endif %} \n&lt;bold&gt;{{ title or command }}&lt;/bold&gt;\n{% if failure %} ({{ code }}){% endif %}\n{% if failure and output and not quiet %}\\n\n{{ ('  &gt; ' + command + '\\n') if title else '' }}\n{{ output|indent(2 * ' ') }}{% endif %}\n</code></pre>   Its \"progress\" template is <code>&gt; {{ title or command }}</code>.</p> </li> <li> <p><code>tap</code> <pre><code>{% if failure %}not {% endif %}ok {{ number }} - {{ title or command }}\n{% if failure and output %}\\n  ---\n\\n  {{ ('command: ' + command + '\\n  ') if title else '' }}\noutput: |\\n{{ output|indent(4 * ' ') }}\\n  ...{% endif %}\n</code></pre></p> </li> </ul> <p>As you can see there are variables you can use in your format template:</p> Variable Description <code>command</code> A stringified version of the command. <code>title</code> The title passed with the <code>title</code> option. <code>code</code> The command exit status. <code>success</code> A boolean indicating if the command succeeded. <code>failure</code> A boolean indicating if the command failed. <code>number</code> The command number passed with the <code>number</code> option. <code>output</code> The command output (stdout, stderr, both or none, depending on the <code>capture</code> option). <code>nofail</code> A boolean indicating if the command was allowed to fail. <code>quiet</code> A boolean instructing to be quiet, i.e. don't print the command output even if it failed. <code>silent</code> A boolean indicating to be silent, i.e. don't print anything. <p>There is also one Jinja filter available</p> Filter Description <code>indent</code> The <code>textwrap.indent</code> function <p>To select a different format than the default one, or to provide your own, you can use the <code>fmt</code> option of <code>ctx.run()</code>, the <code>--format</code> CLI option (global and local), and the <code>FAILPRINT_FORMAT</code> environment variable.</p> <p>For example, here is how to use the <code>tap</code> format:</p> <pre><code># in the ctx.run() call\n@duty\ndef task1(ctx):\n    ctx.run(\"echo failed &amp;&amp; false\", fmt=\"tap\")\n\n\n# or as a default duty option\n@duty(fmt=\"tap\")\ndef task2(ctx):\n    ctx.run(\"echo failed &amp;&amp; false\")\n    ctx.run(\"echo failed &amp;&amp; false\")\n</code></pre> <pre><code># or with the CLI global option\nduty --format tap task1 task2\n\n# or with a CLI local option\nduty task1 -ftap task2\n\n# or with an environment variable\nFAILPRINT_FORMAT=tap duty task1 task2\n</code></pre> <p>To use your own format template, just make the value of the <code>fmt</code> option start with <code>custom=</code>. For example, with an environment variable:</p> <pre><code>export FAILPRINT_FORMAT=\"custom={{output}}\"\n# always print the captured output, nothing else\n\nduty task1 task2\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> duty<ul> <li> callables<ul> <li> autoflake</li> <li> black</li> <li> blacken_docs</li> <li> coverage</li> <li> flake8</li> <li> interrogate</li> <li> isort</li> <li> mkdocs</li> <li> mypy</li> <li> pytest</li> <li> ruff</li> <li> safety</li> <li> ssort</li> </ul> </li> <li> cli</li> <li> collection</li> <li> context</li> <li> debug</li> <li> decorator</li> <li> exceptions</li> <li> validation</li> </ul> </li> </ul>"},{"location":"reference/duty/","title":"duty","text":""},{"location":"reference/duty/#duty","title":"duty","text":"<p>duty package.</p> <p>A simple task runner.</p> <p>Modules:</p> <ul> <li> <code>callables</code>         \u2013          <p>Module containing callables for many tools.</p> </li> <li> <code>cli</code>         \u2013          <p>Module that contains the command line application.</p> </li> <li> <code>collection</code>         \u2013          <p>Module containing all the logic.</p> </li> <li> <code>context</code>         \u2013          <p>Module containing the context definition.</p> </li> <li> <code>debug</code>         \u2013          <p>Debugging utilities.</p> </li> <li> <code>decorator</code>         \u2013          <p>Module containing the decorator provided to users.</p> </li> <li> <code>exceptions</code>         \u2013          <p>Module containing the project's exceptions.</p> </li> <li> <code>validation</code>         \u2013          <p>This module contains logic used to validate parameters passed to duties.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>duty</code>           \u2013            <p>Decorate a callable to transform it and register it as a duty.</p> </li> </ul>"},{"location":"reference/duty/#duty.duty","title":"duty","text":"<pre><code>duty(**kwargs: Any) -&gt; Callable[[Callable], Duty]\n</code></pre><pre><code>duty(func: Callable) -&gt; Duty\n</code></pre> <pre><code>duty(*args: Any, **kwargs: Any) -&gt; Callable | Duty\n</code></pre> <p>Decorate a callable to transform it and register it as a duty.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>One callable.</p> </li> <li> <code>kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Context options.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the decorator is misused.</p> </li> </ul> <p>Examples:</p> <p>Decorate a function:</p> <pre><code>@duty\ndef clean(ctx):\n    ctx.run(\"rm -rf build\", silent=True)\n</code></pre> <p>Pass options to the context:</p> <pre><code>@duty(silent=True)\ndef clean(ctx):\n    ctx.run(\"rm -rf build\")  # silent=True is implied\n</code></pre> <p>Returns:</p> <ul> <li> <code>Callable | Duty</code>         \u2013          <p>A duty when used without parentheses, a decorator otherwise.</p> </li> </ul> Source code in <code>src/duty/decorator.py</code> <pre><code>def duty(*args: Any, **kwargs: Any) -&gt; Callable | Duty:\n    \"\"\"Decorate a callable to transform it and register it as a duty.\n\n    Parameters:\n        args: One callable.\n        kwargs: Context options.\n\n    Raises:\n        ValueError: When the decorator is misused.\n\n    Examples:\n        Decorate a function:\n\n        ```python\n        @duty\n        def clean(ctx):\n            ctx.run(\"rm -rf build\", silent=True)\n        ```\n\n        Pass options to the context:\n\n        ```python\n        @duty(silent=True)\n        def clean(ctx):\n            ctx.run(\"rm -rf build\")  # silent=True is implied\n        ```\n\n    Returns:\n        A duty when used without parentheses, a decorator otherwise.\n    \"\"\"\n    if args:\n        if len(args) &gt; 1:\n            raise ValueError(\"The duty decorator accepts only one positional argument\")\n        return create_duty(args[0], **kwargs)\n\n    def decorator(func: Callable) -&gt; Duty:\n        return create_duty(func, **kwargs)\n\n    return decorator\n</code></pre>"},{"location":"reference/duty/cli/","title":"cli","text":""},{"location":"reference/duty/cli/#duty.cli","title":"cli","text":"<p>Module that contains the command line application.</p> <p>Functions:</p> <ul> <li> <code>get_duty_parser</code>           \u2013            <p>Get a duty-specific options parser.</p> </li> <li> <code>get_parser</code>           \u2013            <p>Return the CLI argument parser.</p> </li> <li> <code>main</code>           \u2013            <p>Run the main program.</p> </li> <li> <code>parse_args</code>           \u2013            <p>Parse the positional and keyword arguments of a duty.</p> </li> <li> <code>parse_commands</code>           \u2013            <p>Parse argument lists into ready-to-run duties.</p> </li> <li> <code>parse_options</code>           \u2013            <p>Parse options for a duty.</p> </li> <li> <code>print_help</code>           \u2013            <p>Print general help or duties help.</p> </li> <li> <code>specified_options</code>           \u2013            <p>Cast an argparse Namespace into a dictionary of options.</p> </li> <li> <code>split_args</code>           \u2013            <p>Split command line arguments into duty commands.</p> </li> </ul>"},{"location":"reference/duty/cli/#duty.cli.get_duty_parser","title":"get_duty_parser","text":"<pre><code>get_duty_parser(duty: Duty) -&gt; ArgParser\n</code></pre> <p>Get a duty-specific options parser.</p> <p>Parameters:</p> <ul> <li> <code>duty</code>             (<code>Duty</code>)         \u2013          <p>The duty to parse for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ArgParser</code>         \u2013          <p>A duty-specific parser.</p> </li> </ul> Source code in <code>src/duty/cli.py</code> <pre><code>def get_duty_parser(duty: Duty) -&gt; ArgParser:\n    \"\"\"Get a duty-specific options parser.\n\n    Parameters:\n        duty: The duty to parse for.\n\n    Returns:\n        A duty-specific parser.\n    \"\"\"\n    parser = ArgParser(\n        prog=f\"duty {duty.name}\",\n        add_help=False,\n        description=duty.description,\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n    )\n    add_flags(parser, set_defaults=False)\n    return parser\n</code></pre>"},{"location":"reference/duty/cli/#duty.cli.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgParser</code>         \u2013          <p>An argparse parser.</p> </li> </ul> Source code in <code>src/duty/cli.py</code> <pre><code>def get_parser() -&gt; ArgParser:\n    \"\"\"Return the CLI argument parser.\n\n    Returns:\n        An argparse parser.\n    \"\"\"\n    usage = \"duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...]\"\n    description = \"A simple task runner.\"\n    parser = ArgParser(add_help=False, usage=usage, description=description)\n\n    parser.add_argument(\n        \"-d\",\n        \"--duties-file\",\n        default=\"duties.py\",\n        help=\"Python file where the duties are defined.\",\n    )\n    parser.add_argument(\n        \"-l\",\n        \"--list\",\n        action=\"store_true\",\n        dest=\"list\",\n        help=\"List the available duties.\",\n    )\n    parser.add_argument(\n        \"-h\",\n        \"--help\",\n        dest=\"help\",\n        nargs=\"*\",\n        metavar=\"DUTY\",\n        help=\"Show this help message and exit. Pass duties names to print their help.\",\n    )\n    parser.add_argument(\"-V\", \"--version\", action=\"version\", version=f\"%(prog)s {debug.get_version()}\")\n    parser.add_argument(\"--debug-info\", action=_DebugInfo, help=\"Print debug information.\")\n\n    add_flags(parser, set_defaults=False)\n    parser.add_argument(\"remainder\", nargs=argparse.REMAINDER)\n\n    parser._optionals.title = \"Global options\"\n\n    return parser\n</code></pre>"},{"location":"reference/duty/cli/#duty.cli.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>duty</code> or <code>python -m duty</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>An exit code.</p> </li> </ul> Source code in <code>src/duty/cli.py</code> <pre><code>def main(args: list[str] | None = None) -&gt; int:\n    \"\"\"Run the main program.\n\n    This function is executed when you type `duty` or `python -m duty`.\n\n    Parameters:\n        args: Arguments passed from the command line.\n\n    Returns:\n        An exit code.\n    \"\"\"\n    parser = get_parser()\n    opts = parser.parse_args(args=args)\n    remainder = opts.remainder\n\n    collection = Collection(opts.duties_file)\n    collection.load()\n\n    if opts.help is not None:\n        print_help(parser, opts, collection)\n        return 0\n\n    if opts.list:\n        print(textwrap.indent(collection.format_help(), prefix=\"  \"))\n        return 0\n\n    try:\n        arg_lists = split_args(remainder, collection.names())\n    except ValueError as error:\n        print(error, file=sys.stderr)\n        return 1\n\n    if not arg_lists:\n        print_help(parser, opts, collection)\n        return 1\n\n    global_opts = specified_options(opts, exclude={\"duties_file\", \"list\", \"help\", \"remainder\"})\n    try:\n        commands = parse_commands(arg_lists, global_opts, collection)\n    except TypeError as error:\n        print(f\"&gt; {error}\", file=sys.stderr)\n        return 1\n\n    for duty, posargs, kwargs in commands:\n        try:\n            duty.run(*posargs, **kwargs)\n        except DutyFailure as failure:\n            return failure.code\n\n    return 0\n</code></pre>"},{"location":"reference/duty/cli/#duty.cli.parse_args","title":"parse_args","text":"<pre><code>parse_args(duty: Duty, args: list[str]) -&gt; tuple\n</code></pre> <p>Parse the positional and keyword arguments of a duty.</p> <p>Parameters:</p> <ul> <li> <code>duty</code>             (<code>Duty</code>)         \u2013          <p>The duty to parse for.</p> </li> <li> <code>args</code>             (<code>list[str]</code>)         \u2013          <p>The list of arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple</code>         \u2013          <p>The positional and keyword arguments.</p> </li> </ul> Source code in <code>src/duty/cli.py</code> <pre><code>def parse_args(duty: Duty, args: list[str]) -&gt; tuple:\n    \"\"\"Parse the positional and keyword arguments of a duty.\n\n    Parameters:\n        duty: The duty to parse for.\n        args: The list of arguments.\n\n    Returns:\n        The positional and keyword arguments.\n    \"\"\"\n    posargs = []\n    kwargs = {}\n\n    for arg in args:\n        if \"=\" in arg:\n            # we found a keyword argument\n            arg_name, arg_value = arg.split(\"=\", 1)\n            kwargs[arg_name] = arg_value\n        else:\n            # we found a positional argument\n            posargs.append(arg)\n\n    return validate(duty.function, *posargs, **kwargs)\n</code></pre>"},{"location":"reference/duty/cli/#duty.cli.parse_commands","title":"parse_commands","text":"<pre><code>parse_commands(\n    arg_lists: list[list[str]],\n    global_opts: dict[str, Any],\n    collection: Collection,\n) -&gt; list[tuple]\n</code></pre> <p>Parse argument lists into ready-to-run duties.</p> <p>Parameters:</p> <ul> <li> <code>arg_lists</code>             (<code>list[list[str]]</code>)         \u2013          <p>Lists of arguments lists.</p> </li> <li> <code>global_opts</code>             (<code>dict[str, Any]</code>)         \u2013          <p>The global options.</p> </li> <li> <code>collection</code>             (<code>Collection</code>)         \u2013          <p>The duties collection.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[tuple]</code>         \u2013          <p>A list of tuples composed of:</p> <ul> <li>a duty</li> <li>its positional arguments</li> <li>its keyword arguments</li> </ul> </li> </ul> Source code in <code>src/duty/cli.py</code> <pre><code>def parse_commands(arg_lists: list[list[str]], global_opts: dict[str, Any], collection: Collection) -&gt; list[tuple]:\n    \"\"\"Parse argument lists into ready-to-run duties.\n\n    Parameters:\n        arg_lists: Lists of arguments lists.\n        global_opts: The global options.\n        collection: The duties collection.\n\n    Returns:\n        A list of tuples composed of:\n\n            - a duty\n            - its positional arguments\n            - its keyword arguments\n    \"\"\"\n    commands = []\n    for arg_list in arg_lists:\n        duty = collection.get(arg_list[0])\n        opts, remainder = parse_options(duty, arg_list[1:])\n        duty.options_override = {**global_opts, **opts}\n        commands.append((duty, *parse_args(duty, remainder)))\n    return commands\n</code></pre>"},{"location":"reference/duty/cli/#duty.cli.parse_options","title":"parse_options","text":"<pre><code>parse_options(\n    duty: Duty, args: list[str]\n) -&gt; tuple[dict, list[str]]\n</code></pre> <p>Parse options for a duty.</p> <p>Parameters:</p> <ul> <li> <code>duty</code>             (<code>Duty</code>)         \u2013          <p>The duty to parse for.</p> </li> <li> <code>args</code>             (<code>list[str]</code>)         \u2013          <p>The CLI args passed for this duty.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[dict, list[str]]</code>         \u2013          <p>The parsed opts, and the remaining arguments.</p> </li> </ul> Source code in <code>src/duty/cli.py</code> <pre><code>def parse_options(duty: Duty, args: list[str]) -&gt; tuple[dict, list[str]]:\n    \"\"\"Parse options for a duty.\n\n    Parameters:\n        duty: The duty to parse for.\n        args: The CLI args passed for this duty.\n\n    Returns:\n        The parsed opts, and the remaining arguments.\n    \"\"\"\n    parser = get_duty_parser(duty)\n    opts, remainder = parser.parse_known_args(args)\n    return specified_options(opts), remainder\n</code></pre>"},{"location":"reference/duty/cli/#duty.cli.print_help","title":"print_help","text":"<pre><code>print_help(\n    parser: ArgParser,\n    opts: Namespace,\n    collection: Collection,\n) -&gt; None\n</code></pre> <p>Print general help or duties help.</p> <p>Parameters:</p> <ul> <li> <code>parser</code>             (<code>ArgParser</code>)         \u2013          <p>The main parser.</p> </li> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The main parsed options.</p> </li> <li> <code>collection</code>             (<code>Collection</code>)         \u2013          <p>A collection of duties.</p> </li> </ul> Source code in <code>src/duty/cli.py</code> <pre><code>def print_help(parser: ArgParser, opts: argparse.Namespace, collection: Collection) -&gt; None:\n    \"\"\"Print general help or duties help.\n\n    Parameters:\n        parser: The main parser.\n        opts: The main parsed options.\n        collection: A collection of duties.\n    \"\"\"\n    if opts.help:\n        for duty_name in opts.help:\n            try:\n                duty = collection.get(duty_name)\n            except KeyError:\n                print(f\"&gt; Unknown duty '{duty_name}'\")\n            else:\n                print(get_duty_parser(duty).format_help())\n    else:\n        print(parser.format_help())\n        print(\"Available duties:\")\n        print(textwrap.indent(collection.format_help(), prefix=\"  \"))\n</code></pre>"},{"location":"reference/duty/cli/#duty.cli.specified_options","title":"specified_options","text":"<pre><code>specified_options(\n    opts: Namespace, exclude: set[str] | None = None\n) -&gt; dict\n</code></pre> <p>Cast an argparse Namespace into a dictionary of options.</p> <p>Remove all options that were not specified (equal to None).</p> <p>Parameters:</p> <ul> <li> <code>opts</code>             (<code>Namespace</code>)         \u2013          <p>The namespace to cast.</p> </li> <li> <code>exclude</code>             (<code>set[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Names of options to exclude from the result.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>         \u2013          <p>A dictionary of specified-only options.</p> </li> </ul> Source code in <code>src/duty/cli.py</code> <pre><code>def specified_options(opts: argparse.Namespace, exclude: set[str] | None = None) -&gt; dict:\n    \"\"\"Cast an argparse Namespace into a dictionary of options.\n\n    Remove all options that were not specified (equal to None).\n\n    Parameters:\n        opts: The namespace to cast.\n        exclude: Names of options to exclude from the result.\n\n    Returns:\n        A dictionary of specified-only options.\n    \"\"\"\n    exclude = exclude or set()\n    options = opts.__dict__.items()\n    return {opt: value for opt, value in options if value is not None and opt not in exclude}\n</code></pre>"},{"location":"reference/duty/cli/#duty.cli.split_args","title":"split_args","text":"<pre><code>split_args(\n    args: list[str], names: list[str]\n) -&gt; list[list[str]]\n</code></pre> <p>Split command line arguments into duty commands.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>list[str]</code>)         \u2013          <p>The CLI arguments.</p> </li> <li> <code>names</code>             (<code>list[str]</code>)         \u2013          <p>The known duty names.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When a duty name is missing before an argument, or when the duty name is unknown.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list[str]]</code>         \u2013          <p>The split commands.</p> </li> </ul> Source code in <code>src/duty/cli.py</code> <pre><code>def split_args(args: list[str], names: list[str]) -&gt; list[list[str]]:\n    \"\"\"Split command line arguments into duty commands.\n\n    Parameters:\n        args: The CLI arguments.\n        names: The known duty names.\n\n    Raises:\n        ValueError: When a duty name is missing before an argument,\n            or when the duty name is unknown.\n\n    Returns:\n        The split commands.\n    \"\"\"\n    arg_lists = []\n    current_arg_list: list[str] = []\n\n    for arg in args:\n        if arg in names:\n            # We found a duty name.\n            if current_arg_list:\n                # Append the previous arg list to the result and reset it.\n                arg_lists.append(current_arg_list)\n                current_arg_list = []\n            current_arg_list.append(arg)\n        elif current_arg_list:\n            # We found an argument.\n            current_arg_list.append(arg)\n        else:\n            # We found an argument but no duty name.\n            raise ValueError(f\"&gt; Missing duty name before argument '{arg}', or unknown duty name\")\n\n    # Don't forget the last arg list.\n    if current_arg_list:\n        arg_lists.append(current_arg_list)\n\n    return arg_lists\n</code></pre>"},{"location":"reference/duty/collection/","title":"collection","text":""},{"location":"reference/duty/collection/#duty.collection","title":"collection","text":"<p>Module containing all the logic.</p> <p>Classes:</p> <ul> <li> <code>Collection</code>         \u2013          <p>A collection of duties.</p> </li> <li> <code>Duty</code>         \u2013          <p>The main duty class.</p> </li> </ul>"},{"location":"reference/duty/collection/#duty.collection.Collection","title":"Collection","text":"<pre><code>Collection(path: str = default_duties_file)\n</code></pre> <p>A collection of duties.</p> <p>Attributes:</p> <ul> <li> <code>path</code>         \u2013          <p>The path to the duties file.</p> </li> <li> <code>duties</code>             (<code>dict[str, Duty]</code>)         \u2013          <p>The list of duties.</p> </li> <li> <code>aliases</code>             (<code>dict[str, Duty]</code>)         \u2013          <p>A dictionary of aliases pointing to their respective duties.</p> </li> </ul> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str</code>, default:                 <code>default_duties_file</code> )         \u2013          <p>The path to the duties file.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add</code>           \u2013            <p>Add a duty to the collection.</p> </li> <li> <code>clear</code>           \u2013            <p>Clear the collection.</p> </li> <li> <code>format_help</code>           \u2013            <p>Format a message listing the duties.</p> </li> <li> <code>get</code>           \u2013            <p>Get a duty by its name or alias.</p> </li> <li> <code>load</code>           \u2013            <p>Load duties from a Python file.</p> </li> <li> <code>names</code>           \u2013            <p>Return the list of duties names and aliases.</p> </li> </ul> Source code in <code>src/duty/collection.py</code> <pre><code>def __init__(self, path: str = default_duties_file) -&gt; None:\n    \"\"\"Initialize the collection.\n\n    Parameters:\n        path: The path to the duties file.\n    \"\"\"\n    self.path = path\n    self.duties: dict[str, Duty] = {}\n    self.aliases: dict[str, Duty] = {}\n</code></pre>"},{"location":"reference/duty/collection/#duty.collection.Collection.add","title":"add","text":"<pre><code>add(duty: Duty) -&gt; None\n</code></pre> <p>Add a duty to the collection.</p> <p>Parameters:</p> <ul> <li> <code>duty</code>             (<code>Duty</code>)         \u2013          <p>The duty to add.</p> </li> </ul> Source code in <code>src/duty/collection.py</code> <pre><code>def add(self, duty: Duty) -&gt; None:\n    \"\"\"Add a duty to the collection.\n\n    Parameters:\n        duty: The duty to add.\n    \"\"\"\n    if duty.collection is not None:\n        # we must copy the duty to be able to add it\n        # in multiple collections\n        duty = deepcopy(duty)\n    duty.collection = self\n    self.duties[duty.name] = duty\n    for alias in duty.aliases:\n        self.aliases[alias] = duty\n</code></pre>"},{"location":"reference/duty/collection/#duty.collection.Collection.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear the collection.</p> Source code in <code>src/duty/collection.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"Clear the collection.\"\"\"\n    self.duties.clear()\n    self.aliases.clear()\n</code></pre>"},{"location":"reference/duty/collection/#duty.collection.Collection.format_help","title":"format_help","text":"<pre><code>format_help() -&gt; str\n</code></pre> <p>Format a message listing the duties.</p> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A string listing the duties and their summary.</p> </li> </ul> Source code in <code>src/duty/collection.py</code> <pre><code>def format_help(self) -&gt; str:\n    \"\"\"Format a message listing the duties.\n\n    Returns:\n        A string listing the duties and their summary.\n    \"\"\"\n    lines = []\n    # 20 makes the summary aligned with options description\n    longest_name = max(*(len(name) for name in self.duties), 20)\n    for name, duty in self.duties.items():\n        description = duty.description.split(\"\\n\")[0]\n        lines.append(f\"{name:{longest_name}}  {description}\")\n    return \"\\n\".join(lines)\n</code></pre>"},{"location":"reference/duty/collection/#duty.collection.Collection.get","title":"get","text":"<pre><code>get(name_or_alias: str) -&gt; Duty\n</code></pre> <p>Get a duty by its name or alias.</p> <p>Parameters:</p> <ul> <li> <code>name_or_alias</code>             (<code>str</code>)         \u2013          <p>The name or alias of the duty.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Duty</code>         \u2013          <p>A duty.</p> </li> </ul> Source code in <code>src/duty/collection.py</code> <pre><code>def get(self, name_or_alias: str) -&gt; Duty:\n    \"\"\"Get a duty by its name or alias.\n\n    Parameters:\n        name_or_alias: The name or alias of the duty.\n\n    Returns:\n        A duty.\n    \"\"\"\n    try:\n        return self.duties[name_or_alias]\n    except KeyError:\n        return self.aliases[name_or_alias]\n</code></pre>"},{"location":"reference/duty/collection/#duty.collection.Collection.load","title":"load","text":"<pre><code>load(path: str | None = None) -&gt; None\n</code></pre> <p>Load duties from a Python file.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The path to the Python file to load. Uses the collection's path by default.</p> </li> </ul> Source code in <code>src/duty/collection.py</code> <pre><code>def load(self, path: str | None = None) -&gt; None:\n    \"\"\"Load duties from a Python file.\n\n    Parameters:\n        path: The path to the Python file to load.\n            Uses the collection's path by default.\n    \"\"\"\n    path = path or self.path\n    spec = importlib_util.spec_from_file_location(\"duty.duties\", path)\n    if spec:\n        duties = importlib_util.module_from_spec(spec)\n        sys.modules[\"duty.duties\"] = duties\n        spec.loader.exec_module(duties)  # type: ignore[union-attr]\n        declared_duties = inspect.getmembers(duties, lambda member: isinstance(member, Duty))\n        for _, duty in declared_duties:\n            self.add(duty)\n</code></pre>"},{"location":"reference/duty/collection/#duty.collection.Collection.names","title":"names","text":"<pre><code>names() -&gt; list[str]\n</code></pre> <p>Return the list of duties names and aliases.</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>The list of duties names and aliases.</p> </li> </ul> Source code in <code>src/duty/collection.py</code> <pre><code>def names(self) -&gt; list[str]:\n    \"\"\"Return the list of duties names and aliases.\n\n    Returns:\n        The list of duties names and aliases.\n    \"\"\"\n    return list(self.duties.keys()) + list(self.aliases.keys())\n</code></pre>"},{"location":"reference/duty/collection/#duty.collection.Duty","title":"Duty","text":"<pre><code>Duty(\n    name: str,\n    description: str,\n    function: Callable,\n    collection: Collection | None = None,\n    aliases: set | None = None,\n    pre: DutyListType | None = None,\n    post: DutyListType | None = None,\n    opts: dict[str, Any] | None = None,\n)\n</code></pre> <p>The main duty class.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>The duty name.</p> </li> <li> <code>description</code>             (<code>str</code>)         \u2013          <p>The duty description.</p> </li> <li> <code>function</code>             (<code>Callable</code>)         \u2013          <p>The duty function.</p> </li> <li> <code>collection</code>             (<code>Collection | None</code>, default:                 <code>None</code> )         \u2013          <p>The collection on which to attach this duty.</p> </li> <li> <code>aliases</code>             (<code>set | None</code>, default:                 <code>None</code> )         \u2013          <p>A list of aliases for this duty.</p> </li> <li> <code>pre</code>             (<code>DutyListType | None</code>, default:                 <code>None</code> )         \u2013          <p>A list of duties to run before this one.</p> </li> <li> <code>post</code>             (<code>DutyListType | None</code>, default:                 <code>None</code> )         \u2013          <p>A list of duties to run after this one.</p> </li> <li> <code>opts</code>             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Options used to create the context instance.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>run</code>           \u2013            <p>Run the duty.</p> </li> <li> <code>run_duties</code>           \u2013            <p>Run a list of duties.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>context</code>             (<code>Context</code>)         \u2013          <p>Return a new context instance.</p> </li> </ul> Source code in <code>src/duty/collection.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    description: str,\n    function: Callable,\n    collection: Collection | None = None,\n    aliases: set | None = None,\n    pre: DutyListType | None = None,\n    post: DutyListType | None = None,\n    opts: dict[str, Any] | None = None,\n) -&gt; None:\n    \"\"\"Initialize the duty.\n\n    Parameters:\n        name: The duty name.\n        description: The duty description.\n        function: The duty function.\n        collection: The collection on which to attach this duty.\n        aliases: A list of aliases for this duty.\n        pre: A list of duties to run before this one.\n        post: A list of duties to run after this one.\n        opts: Options used to create the context instance.\n    \"\"\"\n    self.name = name\n    self.description = description\n    self.function = function\n    self.aliases = aliases or set()\n    self.pre = pre or []\n    self.post = post or []\n    self.options = opts or self.default_options\n    self.options_override: dict = {}\n\n    self.collection: Collection | None = None\n    if collection:\n        collection.add(self)\n</code></pre>"},{"location":"reference/duty/collection/#duty.collection.Duty.context","title":"context  <code>property</code>","text":"<pre><code>context: Context\n</code></pre> <p>Return a new context instance.</p> <p>Returns:</p> <ul> <li> <code>Context</code>         \u2013          <p>A new context instance.</p> </li> </ul>"},{"location":"reference/duty/collection/#duty.collection.Duty.run","title":"run","text":"<pre><code>run(*args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Run the duty.</p> <p>This is just a shortcut for <code>duty(duty.context, *args, **kwargs)</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>Positional arguments passed to the function.</p> </li> <li> <code>kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Keyword arguments passed to the function.</p> </li> </ul> Source code in <code>src/duty/collection.py</code> <pre><code>def run(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Run the duty.\n\n    This is just a shortcut for `duty(duty.context, *args, **kwargs)`.\n\n    Parameters:\n        args: Positional arguments passed to the function.\n        kwargs: Keyword arguments passed to the function.\n    \"\"\"\n    self(self.context, *args, **kwargs)\n</code></pre>"},{"location":"reference/duty/collection/#duty.collection.Duty.run_duties","title":"run_duties","text":"<pre><code>run_duties(\n    context: Context, duties_list: DutyListType\n) -&gt; None\n</code></pre> <p>Run a list of duties.</p> <p>Parameters:</p> <ul> <li> <code>context</code>             (<code>Context</code>)         \u2013          <p>The context to use.</p> </li> <li> <code>duties_list</code>             (<code>DutyListType</code>)         \u2013          <p>The list of duties to run.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>           \u2013          <p>When a duty name is given to pre or post duties. Indeed, without a parent collection, it is impossible to find another duty by its name.</p> </li> </ul> Source code in <code>src/duty/collection.py</code> <pre><code>def run_duties(self, context: Context, duties_list: DutyListType) -&gt; None:\n    \"\"\"Run a list of duties.\n\n    Parameters:\n        context: The context to use.\n        duties_list: The list of duties to run.\n\n    Raises:\n        RuntimeError: When a duty name is given to pre or post duties.\n            Indeed, without a parent collection, it is impossible\n            to find another duty by its name.\n    \"\"\"\n    for duty_item in duties_list:\n        if callable(duty_item):\n            # Item is a proper duty, or a callable: run it.\n            duty_item(context)\n        elif isinstance(duty_item, str):\n            # Item is a reference to a duty.\n            if self.collection is None:\n                raise RuntimeError(f\"Can't find duty by name without a collection ({duty_item})\")\n            # Get the duty and run it.\n            self.collection.get(duty_item)(context)\n</code></pre>"},{"location":"reference/duty/context/","title":"context","text":""},{"location":"reference/duty/context/#duty.context","title":"context","text":"<p>Module containing the context definition.</p> <p>Classes:</p> <ul> <li> <code>Context</code>         \u2013          <p>A simple context class.</p> </li> </ul>"},{"location":"reference/duty/context/#duty.context.Context","title":"Context","text":"<pre><code>Context(\n    options: dict[str, Any],\n    options_override: dict[str, Any] | None = None,\n)\n</code></pre> <p>A simple context class.</p> <p>Context instances are passed to functions decorated with <code>duty</code>.</p> <p>Parameters:</p> <ul> <li> <code>options</code>             (<code>dict[str, Any]</code>)         \u2013          <p>Base options specified in <code>@duty(**options)</code>.</p> </li> <li> <code>options_override</code>             (<code>dict[str, Any] | None</code>, default:                 <code>None</code> )         \u2013          <p>Options that override <code>run</code> and <code>@duty</code> options. This argument is used to allow users to override options from the CLI or environment.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>cd</code>           \u2013            <p>Change working directory as a context manager.</p> </li> <li> <code>options</code>           \u2013            <p>Change options as a context manager.</p> </li> <li> <code>run</code>           \u2013            <p>Run a command in a subprocess or a Python callable.</p> </li> </ul> Source code in <code>src/duty/context.py</code> <pre><code>def __init__(self, options: dict[str, Any], options_override: dict[str, Any] | None = None) -&gt; None:\n    \"\"\"Initialize the context.\n\n    Parameters:\n        options: Base options specified in `@duty(**options)`.\n        options_override: Options that override `run` and `@duty` options.\n            This argument is used to allow users to override options from the CLI or environment.\n    \"\"\"\n    self._options = options\n    self._option_stack: list[dict[str, Any]] = []\n    self._options_override = options_override or {}\n</code></pre>"},{"location":"reference/duty/context/#duty.context.Context.cd","title":"cd","text":"<pre><code>cd(directory: str) -&gt; Iterator\n</code></pre> <p>Change working directory as a context manager.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>             (<code>str</code>)         \u2013          <p>The directory to go into.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Iterator</code>         \u2013          <p>Nothing.</p> </li> </ul> Source code in <code>src/duty/context.py</code> <pre><code>@contextmanager\ndef cd(self, directory: str) -&gt; Iterator:\n    \"\"\"Change working directory as a context manager.\n\n    Parameters:\n        directory: The directory to go into.\n\n    Yields:\n        Nothing.\n    \"\"\"\n    if not directory:\n        yield\n        return\n    old_wd = os.getcwd()\n    os.chdir(directory)\n    try:\n        yield\n    finally:\n        os.chdir(old_wd)\n</code></pre>"},{"location":"reference/duty/context/#duty.context.Context.options","title":"options","text":"<pre><code>options(**opts: Any) -&gt; Iterator\n</code></pre> <p>Change options as a context manager.</p> <p>Can be nested as will, previous options will pop once out of the with clause.</p> <p>Parameters:</p> <ul> <li> <code>**opts</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Options used in <code>run</code>.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>Iterator</code>         \u2013          <p>Nothing.</p> </li> </ul> Source code in <code>src/duty/context.py</code> <pre><code>@contextmanager\ndef options(self, **opts: Any) -&gt; Iterator:\n    \"\"\"Change options as a context manager.\n\n    Can be nested as will, previous options will pop once out of the with clause.\n\n    Parameters:\n        **opts: Options used in `run`.\n\n    Yields:\n        Nothing.\n    \"\"\"\n    self._option_stack.append(self._options)\n    self._options = {**self._options, **opts}\n    try:\n        yield\n    finally:\n        self._options = self._option_stack.pop()\n</code></pre>"},{"location":"reference/duty/context/#duty.context.Context.run","title":"run","text":"<pre><code>run(cmd: CmdType, **options: Any) -&gt; str\n</code></pre> <p>Run a command in a subprocess or a Python callable.</p> <p>Parameters:</p> <ul> <li> <code>cmd</code>             (<code>CmdType</code>)         \u2013          <p>A command or a Python callable.</p> </li> <li> <code>options</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Options passed to <code>failprint</code> functions.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>DutyFailure</code>           \u2013          <p>When the exit code / function result is greather than 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>The output of the command.</p> </li> </ul> Source code in <code>src/duty/context.py</code> <pre><code>def run(self, cmd: CmdType, **options: Any) -&gt; str:\n    \"\"\"Run a command in a subprocess or a Python callable.\n\n    Parameters:\n        cmd: A command or a Python callable.\n        options: Options passed to `failprint` functions.\n\n    Raises:\n        DutyFailure: When the exit code / function result is greather than 0.\n\n    Returns:\n        The output of the command.\n    \"\"\"\n    final_options = dict(self._options)\n    final_options.update(options)\n\n    allow_overrides = final_options.pop(\"allow_overrides\", True)\n    workdir = final_options.pop(\"workdir\", None)\n\n    if allow_overrides:\n        final_options.update(self._options_override)\n\n    with self.cd(workdir):\n        try:\n            result = failprint_run(cmd, **final_options)\n        except KeyboardInterrupt as ki:\n            raise DutyFailure(130) from ki\n\n    if result.code:\n        raise DutyFailure(result.code)\n\n    return result.output\n</code></pre>"},{"location":"reference/duty/debug/","title":"debug","text":""},{"location":"reference/duty/debug/#duty.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>         \u2013          <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>         \u2013          <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>           \u2013            <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>           \u2013            <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>           \u2013            <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/duty/debug/#duty.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>             (<code>str</code>)         \u2013          <p>Python interpreter name.</p> </li> <li> <code>interpreter_version</code>             (<code>str</code>)         \u2013          <p>Python interpreter version.</p> </li> <li> <code>packages</code>             (<code>list[Package]</code>)         \u2013          <p>Installed packages.</p> </li> <li> <code>platform</code>             (<code>str</code>)         \u2013          <p>Operating System.</p> </li> <li> <code>variables</code>             (<code>list[Variable]</code>)         \u2013          <p>Environment variables.</p> </li> </ul>"},{"location":"reference/duty/debug/#duty.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/duty/debug/#duty.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/duty/debug/#duty.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/duty/debug/#duty.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/duty/debug/#duty.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/duty/debug/#duty.debug.Package","title":"Package  <code>dataclass</code>","text":"<p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Package name.</p> </li> <li> <code>version</code>             (<code>str</code>)         \u2013          <p>Package version.</p> </li> </ul>"},{"location":"reference/duty/debug/#duty.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/duty/debug/#duty.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/duty/debug/#duty.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>Variable name.</p> </li> <li> <code>value</code>             (<code>str</code>)         \u2013          <p>Variable value.</p> </li> </ul>"},{"location":"reference/duty/debug/#duty.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/duty/debug/#duty.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/duty/debug/#duty.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Environment information.</p> </li> </ul> Source code in <code>src/duty/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"duty\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"DUTY\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/duty/debug/#duty.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'duty') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>             (<code>str</code>, default:                 <code>'duty'</code> )         \u2013          <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A version number.</p> </li> </ul> Source code in <code>src/duty/debug.py</code> <pre><code>def get_version(dist: str = \"duty\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/duty/debug/#duty.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/duty/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version}\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/duty/decorator/","title":"decorator","text":""},{"location":"reference/duty/decorator/#duty.decorator","title":"decorator","text":"<p>Module containing the decorator provided to users.</p> <p>Functions:</p> <ul> <li> <code>create_duty</code>           \u2013            <p>Register a duty in the collection.</p> </li> <li> <code>duty</code>           \u2013            <p>Decorate a callable to transform it and register it as a duty.</p> </li> </ul>"},{"location":"reference/duty/decorator/#duty.decorator.create_duty","title":"create_duty","text":"<pre><code>create_duty(\n    func: Callable,\n    *,\n    name: str | None = None,\n    aliases: Iterable[str] | None = None,\n    pre: DutyListType | None = None,\n    post: DutyListType | None = None,\n    skip_if: bool = False,\n    skip_reason: str | None = None,\n    **opts: Any\n) -&gt; Duty\n</code></pre> <p>Register a duty in the collection.</p> <p>Parameters:</p> <ul> <li> <code>func</code>             (<code>Callable</code>)         \u2013          <p>The callable to register as a duty.</p> </li> <li> <code>name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The duty name.</p> </li> <li> <code>aliases</code>             (<code>Iterable[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>A set of aliases for this duty.</p> </li> <li> <code>pre</code>             (<code>DutyListType | None</code>, default:                 <code>None</code> )         \u2013          <p>Pre-duties.</p> </li> <li> <code>post</code>             (<code>DutyListType | None</code>, default:                 <code>None</code> )         \u2013          <p>Post-duties.</p> </li> <li> <code>skip_if</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Skip running the duty if the given condition is met.</p> </li> <li> <code>skip_reason</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Custom message when skipping.</p> </li> <li> <code>opts</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Options passed to the context.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Duty</code>         \u2013          <p>The registered duty.</p> </li> </ul> Source code in <code>src/duty/decorator.py</code> <pre><code>def create_duty(\n    func: Callable,\n    *,\n    name: str | None = None,\n    aliases: Iterable[str] | None = None,\n    pre: DutyListType | None = None,\n    post: DutyListType | None = None,\n    skip_if: bool = False,\n    skip_reason: str | None = None,\n    **opts: Any,\n) -&gt; Duty:\n    \"\"\"Register a duty in the collection.\n\n    Parameters:\n        func: The callable to register as a duty.\n        name: The duty name.\n        aliases: A set of aliases for this duty.\n        pre: Pre-duties.\n        post: Post-duties.\n        skip_if: Skip running the duty if the given condition is met.\n        skip_reason: Custom message when skipping.\n        opts: Options passed to the context.\n\n    Returns:\n        The registered duty.\n    \"\"\"\n    aliases = set(aliases) if aliases else set()\n    name = name or func.__name__\n    dash_name = name.replace(\"_\", \"-\")\n    if name != dash_name:\n        aliases.add(name)\n        name = dash_name\n    description = inspect.getdoc(func) or \"\"\n    if skip_if:\n        func = _skip(func, skip_reason or f\"{dash_name}: skipped\")\n    duty = Duty(name, description, func, aliases=aliases, pre=pre, post=post, opts=opts)\n    duty.__name__ = name  # type: ignore[attr-defined]\n    duty.__doc__ = description\n    duty.__wrapped__ = func  # type: ignore[attr-defined]\n    return duty\n</code></pre>"},{"location":"reference/duty/decorator/#duty.decorator.duty","title":"duty","text":"<pre><code>duty(**kwargs: Any) -&gt; Callable[[Callable], Duty]\n</code></pre><pre><code>duty(func: Callable) -&gt; Duty\n</code></pre> <pre><code>duty(*args: Any, **kwargs: Any) -&gt; Callable | Duty\n</code></pre> <p>Decorate a callable to transform it and register it as a duty.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>One callable.</p> </li> <li> <code>kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Context options.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>           \u2013          <p>When the decorator is misused.</p> </li> </ul> <p>Examples:</p> <p>Decorate a function:</p> <pre><code>@duty\ndef clean(ctx):\n    ctx.run(\"rm -rf build\", silent=True)\n</code></pre> <p>Pass options to the context:</p> <pre><code>@duty(silent=True)\ndef clean(ctx):\n    ctx.run(\"rm -rf build\")  # silent=True is implied\n</code></pre> <p>Returns:</p> <ul> <li> <code>Callable | Duty</code>         \u2013          <p>A duty when used without parentheses, a decorator otherwise.</p> </li> </ul> Source code in <code>src/duty/decorator.py</code> <pre><code>def duty(*args: Any, **kwargs: Any) -&gt; Callable | Duty:\n    \"\"\"Decorate a callable to transform it and register it as a duty.\n\n    Parameters:\n        args: One callable.\n        kwargs: Context options.\n\n    Raises:\n        ValueError: When the decorator is misused.\n\n    Examples:\n        Decorate a function:\n\n        ```python\n        @duty\n        def clean(ctx):\n            ctx.run(\"rm -rf build\", silent=True)\n        ```\n\n        Pass options to the context:\n\n        ```python\n        @duty(silent=True)\n        def clean(ctx):\n            ctx.run(\"rm -rf build\")  # silent=True is implied\n        ```\n\n    Returns:\n        A duty when used without parentheses, a decorator otherwise.\n    \"\"\"\n    if args:\n        if len(args) &gt; 1:\n            raise ValueError(\"The duty decorator accepts only one positional argument\")\n        return create_duty(args[0], **kwargs)\n\n    def decorator(func: Callable) -&gt; Duty:\n        return create_duty(func, **kwargs)\n\n    return decorator\n</code></pre>"},{"location":"reference/duty/exceptions/","title":"exceptions","text":""},{"location":"reference/duty/exceptions/#duty.exceptions","title":"exceptions","text":"<p>Module containing the project's exceptions.</p> <p>Classes:</p> <ul> <li> <code>DutyFailure</code>         \u2013          <p>An exception raised when a duty fails.</p> </li> </ul>"},{"location":"reference/duty/exceptions/#duty.exceptions.DutyFailure","title":"DutyFailure","text":"<pre><code>DutyFailure(code: int)\n</code></pre> <p>             Bases: <code>Exception</code></p> <p>An exception raised when a duty fails.</p> <p>Parameters:</p> <ul> <li> <code>code</code>             (<code>int</code>)         \u2013          <p>The exit code of a command.</p> </li> </ul> Source code in <code>src/duty/exceptions.py</code> <pre><code>def __init__(self, code: int) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        code: The exit code of a command.\n    \"\"\"\n    super().__init__(self)\n    self.code = code\n</code></pre>"},{"location":"reference/duty/validation/","title":"validation","text":""},{"location":"reference/duty/validation/#duty.validation","title":"validation","text":"<p>This module contains logic used to validate parameters passed to duties.</p> <p>We validate the parameters before running the duties, effectively checking all CLI arguments and failing early if they are incorrect.</p> <p>Classes:</p> <ul> <li> <code>ParamsCaster</code>         \u2013          <p>A helper class to cast parameters based on a function's signature annotations.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>cast_arg</code>           \u2013            <p>Cast an argument using a type annotation.</p> </li> <li> <code>to_bool</code>           \u2013            <p>Convert a string to a boolean.</p> </li> <li> <code>validate</code>           \u2013            <p>Validate positional and keyword arguments against a function.</p> </li> </ul>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster","title":"ParamsCaster","text":"<pre><code>ParamsCaster(signature: Signature)\n</code></pre> <p>A helper class to cast parameters based on a function's signature annotations.</p> <p>Parameters:</p> <ul> <li> <code>signature</code>             (<code>Signature</code>)         \u2013          <p>The signature to use to cast arguments.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>annotation_at_pos</code>           \u2013            <p>Give the annotation for the parameter at the given position.</p> </li> <li> <code>cast</code>           \u2013            <p>Cast all positional and keyword arguments.</p> </li> <li> <code>cast_kwarg</code>           \u2013            <p>Cast a keyword argument.</p> </li> <li> <code>cast_posarg</code>           \u2013            <p>Cast a positional argument.</p> </li> <li> <code>eaten_by_var_positional</code>           \u2013            <p>Tell if the parameter at this position is eaten by a variable positional parameter.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>has_var_positional</code>             (<code>bool</code>)         \u2013          <p>Tell if there is a variable positional parameter.</p> </li> <li> <code>var_keyword_annotation</code>             (<code>Any</code>)         \u2013          <p>Give the variable keyword parameter (<code>**kwargs</code>) annotation if any.</p> </li> <li> <code>var_positional_annotation</code>             (<code>Any</code>)         \u2013          <p>Give the variable positional parameter (<code>*args</code>) annotation if any.</p> </li> <li> <code>var_positional_position</code>             (<code>int</code>)         \u2013          <p>Give the position of the variable positional parameter in the signature.</p> </li> </ul> Source code in <code>src/duty/validation.py</code> <pre><code>def __init__(self, signature: Signature) -&gt; None:\n    \"\"\"Initialize the object.\n\n    Parameters:\n        signature: The signature to use to cast arguments.\n    \"\"\"\n    self.params_dict = signature.parameters\n    self.params_list = list(self.params_dict.values())\n</code></pre>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster.has_var_positional","title":"has_var_positional  <code>cached</code> <code>property</code>","text":"<pre><code>has_var_positional: bool\n</code></pre> <p>Tell if there is a variable positional parameter.</p> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster.var_keyword_annotation","title":"var_keyword_annotation  <code>cached</code> <code>property</code>","text":"<pre><code>var_keyword_annotation: Any\n</code></pre> <p>Give the variable keyword parameter (<code>**kwargs</code>) annotation if any.</p> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The variable keyword parameter annotation.</p> </li> </ul>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster.var_positional_annotation","title":"var_positional_annotation  <code>cached</code> <code>property</code>","text":"<pre><code>var_positional_annotation: Any\n</code></pre> <p>Give the variable positional parameter (<code>*args</code>) annotation if any.</p> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The variable positional parameter annotation.</p> </li> </ul>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster.var_positional_position","title":"var_positional_position  <code>cached</code> <code>property</code>","text":"<pre><code>var_positional_position: int\n</code></pre> <p>Give the position of the variable positional parameter in the signature.</p> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>The position of the variable positional parameter.</p> </li> </ul>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster.annotation_at_pos","title":"annotation_at_pos","text":"<pre><code>annotation_at_pos(pos: int) -&gt; Any\n</code></pre> <p>Give the annotation for the parameter at the given position.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>             (<code>int</code>)         \u2013          <p>The position of the parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The positional parameter annotation.</p> </li> </ul> Source code in <code>src/duty/validation.py</code> <pre><code>def annotation_at_pos(self, pos: int) -&gt; Any:\n    \"\"\"Give the annotation for the parameter at the given position.\n\n    Parameters:\n        pos: The position of the parameter.\n\n    Returns:\n        The positional parameter annotation.\n    \"\"\"\n    return self.params_list[pos].annotation\n</code></pre>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster.cast","title":"cast","text":"<pre><code>cast(\n    *args: Any, **kwargs: Any\n) -&gt; tuple[Sequence, dict[str, Any]]\n</code></pre> <p>Cast all positional and keyword arguments.</p> <p>Parameters:</p> <ul> <li> <code>*args</code>             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>The positional arguments.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>The keyword arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Sequence, dict[str, Any]]</code>         \u2013          <p>The cast arguments.</p> </li> </ul> Source code in <code>src/duty/validation.py</code> <pre><code>def cast(self, *args: Any, **kwargs: Any) -&gt; tuple[Sequence, dict[str, Any]]:\n    \"\"\"Cast all positional and keyword arguments.\n\n    Parameters:\n        *args: The positional arguments.\n        **kwargs: The keyword arguments.\n\n    Returns:\n        The cast arguments.\n    \"\"\"\n    positional = tuple(self.cast_posarg(pos, arg) for pos, arg in enumerate(args))\n    keyword = {name: self.cast_kwarg(name, value) for name, value in kwargs.items()}\n    return positional, keyword\n</code></pre>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster.cast_kwarg","title":"cast_kwarg","text":"<pre><code>cast_kwarg(name: str, value: Any) -&gt; Any\n</code></pre> <p>Cast a keyword argument.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>The name of the argument in the signature.</p> </li> <li> <code>value</code>             (<code>Any</code>)         \u2013          <p>The argument value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The cast value.</p> </li> </ul> Source code in <code>src/duty/validation.py</code> <pre><code>def cast_kwarg(self, name: str, value: Any) -&gt; Any:\n    \"\"\"Cast a keyword argument.\n\n    Parameters:\n        name: The name of the argument in the signature.\n        value: The argument value.\n\n    Returns:\n        The cast value.\n    \"\"\"\n    if name in self.params_dict:\n        return cast_arg(value, self.params_dict[name].annotation)\n    return cast_arg(value, self.var_keyword_annotation)\n</code></pre>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster.cast_posarg","title":"cast_posarg","text":"<pre><code>cast_posarg(pos: int, arg: Any) -&gt; Any\n</code></pre> <p>Cast a positional argument.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>             (<code>int</code>)         \u2013          <p>The position of the argument in the signature.</p> </li> <li> <code>arg</code>             (<code>Any</code>)         \u2013          <p>The argument value.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The cast value.</p> </li> </ul> Source code in <code>src/duty/validation.py</code> <pre><code>def cast_posarg(self, pos: int, arg: Any) -&gt; Any:\n    \"\"\"Cast a positional argument.\n\n    Parameters:\n        pos: The position of the argument in the signature.\n        arg: The argument value.\n\n    Returns:\n        The cast value.\n    \"\"\"\n    if self.eaten_by_var_positional(pos):\n        return cast_arg(arg, self.var_positional_annotation)\n    return cast_arg(arg, self.annotation_at_pos(pos))\n</code></pre>"},{"location":"reference/duty/validation/#duty.validation.ParamsCaster.eaten_by_var_positional","title":"eaten_by_var_positional","text":"<pre><code>eaten_by_var_positional(pos: int) -&gt; bool\n</code></pre> <p>Tell if the parameter at this position is eaten by a variable positional parameter.</p> <p>Parameters:</p> <ul> <li> <code>pos</code>             (<code>int</code>)         \u2013          <p>The position of the parameter.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Whether the parameter is eaten.</p> </li> </ul> Source code in <code>src/duty/validation.py</code> <pre><code>def eaten_by_var_positional(self, pos: int) -&gt; bool:\n    \"\"\"Tell if the parameter at this position is eaten by a variable positional parameter.\n\n    Parameters:\n        pos: The position of the parameter.\n\n    Returns:\n        Whether the parameter is eaten.\n    \"\"\"\n    return self.has_var_positional and pos &gt;= self.var_positional_position\n</code></pre>"},{"location":"reference/duty/validation/#duty.validation.cast_arg","title":"cast_arg","text":"<pre><code>cast_arg(arg: Any, annotation: Any) -&gt; Any\n</code></pre> <p>Cast an argument using a type annotation.</p> <p>Parameters:</p> <ul> <li> <code>arg</code>             (<code>Any</code>)         \u2013          <p>The argument value.</p> </li> <li> <code>annotation</code>             (<code>Any</code>)         \u2013          <p>A type annotation.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>         \u2013          <p>The cast value.</p> </li> </ul> Source code in <code>src/duty/validation.py</code> <pre><code>def cast_arg(arg: Any, annotation: Any) -&gt; Any:\n    \"\"\"Cast an argument using a type annotation.\n\n    Parameters:\n        arg: The argument value.\n        annotation: A type annotation.\n\n    Returns:\n        The cast value.\n    \"\"\"\n    if annotation is Parameter.empty:\n        return arg\n    if annotation is bool:\n        annotation = to_bool\n    try:\n        return annotation(arg)\n    except Exception:  # noqa: BLE001\n        return arg\n</code></pre>"},{"location":"reference/duty/validation/#duty.validation.to_bool","title":"to_bool","text":"<pre><code>to_bool(value: str) -&gt; bool\n</code></pre> <p>Convert a string to a boolean.</p> <p>Parameters:</p> <ul> <li> <code>value</code>             (<code>str</code>)         \u2013          <p>The string to convert.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>True or False.</p> </li> </ul> Source code in <code>src/duty/validation.py</code> <pre><code>def to_bool(value: str) -&gt; bool:\n    \"\"\"Convert a string to a boolean.\n\n    Parameters:\n        value: The string to convert.\n\n    Returns:\n        True or False.\n    \"\"\"\n    return value.lower() not in {\"\", \"0\", \"no\", \"n\", \"false\", \"off\"}\n</code></pre>"},{"location":"reference/duty/validation/#duty.validation.validate","title":"validate","text":"<pre><code>validate(\n    func: Callable, *args: Any, **kwargs: Any\n) -&gt; tuple[Sequence, dict[str, Any]]\n</code></pre> <p>Validate positional and keyword arguments against a function.</p> <p>First we clone the function, removing the first parameter (the context) and the body, to fail early with a <code>TypeError</code> if the arguments are incorrect: not enough, too much, in the wrong order, etc.</p> <p>Then we cast all the arguments using the function's signature and we return them.</p> <p>Parameters:</p> <ul> <li> <code>func</code>             (<code>Callable</code>)         \u2013          <p>The function to copy.</p> </li> <li> <code>*args</code>             (<code>Any</code>, default:                 <code>()</code> )         \u2013          <p>The positional arguments.</p> </li> <li> <code>**kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>The keyword arguments.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Sequence, dict[str, Any]]</code>         \u2013          <p>The casted arguments.</p> </li> </ul> Source code in <code>src/duty/validation.py</code> <pre><code>def validate(\n    func: Callable,\n    *args: Any,\n    **kwargs: Any,\n) -&gt; tuple[Sequence, dict[str, Any]]:\n    \"\"\"Validate positional and keyword arguments against a function.\n\n    First we clone the function, removing the first parameter (the context)\n    and the body, to fail early with a `TypeError` if the arguments\n    are incorrect: not enough, too much, in the wrong order, etc.\n\n    Then we cast all the arguments using the function's signature\n    and we return them.\n\n    Parameters:\n        func: The function to copy.\n        *args: The positional arguments.\n        **kwargs: The keyword arguments.\n\n    Returns:\n        The casted arguments.\n    \"\"\"\n    return _get_params_caster(func, *args, **kwargs).cast(*args, **kwargs)\n</code></pre>"},{"location":"reference/duty/callables/","title":"callables","text":""},{"location":"reference/duty/callables/#duty.callables","title":"callables","text":"<p>Module containing callables for many tools.</p> Call to developers! <p>If you are the author or maintainer of one of the tools we support (or more generally if you are the author/maintainer of a Python CLI/library), we kindly request that you add such a callable to your code base. Why?</p> <ul> <li>Most of the time, all <code>duty</code> can do is hook into the CLI entrypoint     for the lack of a better alternative. This is not ideal because     we have to translate function arguments to CLI arguments,     that are then parsed again and translated back to Python objects     by the tool itself. This is not efficient.</li> <li>It is not feasible for <code>duty</code> to maintain callables for different versions     of these tools. Having the callables maintained in the tools     themselves would make this support transparent.</li> <li>We believe it simply provides a better user- and developer-experience.     Clear separation of concerns: don't intertwine logic into the CLI parser.     Easy to maintain, easy to test. The CLI parser just has to translate CLI args     to their equivalent Python arguments.</li> </ul> <p>Tips for writing such a library entry point:</p> <ul> <li>Make it equivalent to the CLI entry point: every flag and option must have an equivalent parameter.     Slight customizations can be made to support <code>--flag</code> / <code>--no-flag</code> with single parameters.</li> <li>Use only built-in types: don't make users import and use objects from your API.     For example, accept a list of strings, not a list of <code>MyCustomClass</code> instances.</li> </ul> <p>Modules:</p> <ul> <li> <code>autoflake</code>         \u2013          <p>Callable for autoflake.</p> </li> <li> <code>black</code>         \u2013          <p>Callable for Black.</p> </li> <li> <code>blacken_docs</code>         \u2013          <p>Callable for blacken-docs.</p> </li> <li> <code>coverage</code>         \u2013          <p>Callable for Coverage.py.</p> </li> <li> <code>flake8</code>         \u2013          <p>Callable for Flake8.</p> </li> <li> <code>interrogate</code>         \u2013          <p>Callable for Interrogate.</p> </li> <li> <code>isort</code>         \u2013          <p>Callable for isort.</p> </li> <li> <code>mkdocs</code>         \u2013          <p>Callable for MkDocs.</p> </li> <li> <code>mypy</code>         \u2013          <p>Callable for Mypy.</p> </li> <li> <code>pytest</code>         \u2013          <p>Callable for pytest.</p> </li> <li> <code>ruff</code>         \u2013          <p>Callable for Ruff.</p> </li> <li> <code>safety</code>         \u2013          <p>Callable for Safety.</p> </li> <li> <code>ssort</code>         \u2013          <p>Callable for ssort.</p> </li> </ul>"},{"location":"reference/duty/callables/autoflake/","title":"autoflake","text":""},{"location":"reference/duty/callables/autoflake/#duty.callables.autoflake","title":"autoflake","text":"<p>Callable for autoflake.</p> <p>Functions:</p> <ul> <li> <code>run</code>           \u2013            <p>Run <code>autoflake</code>.</p> </li> </ul>"},{"location":"reference/duty/callables/autoflake/#duty.callables.autoflake.run","title":"run","text":"<pre><code>run(\n    *files: str,\n    config: str | None = None,\n    check: bool | None = None,\n    check_diff: bool | None = None,\n    imports: list[str] | None = None,\n    remove_all_unused_imports: bool | None = None,\n    recursive: bool | None = None,\n    jobs: int | None = None,\n    exclude: list[str] | None = None,\n    expand_star_imports: bool | None = None,\n    ignore_init_module_imports: bool | None = None,\n    remove_duplicate_keys: bool | None = None,\n    remove_unused_variables: bool | None = None,\n    remove_rhs_for_unused_variables: bool | None = None,\n    ignore_pass_statements: bool | None = None,\n    ignore_pass_after_docstring: bool | None = None,\n    quiet: bool | None = None,\n    verbose: bool | None = None,\n    stdin_display_name: str | None = None,\n    in_place: bool | None = None,\n    stdout: bool | None = None\n) -&gt; int\n</code></pre> <p>Run <code>autoflake</code>.</p> <p>Parameters:</p> <ul> <li> <code>*files</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Files to format.</p> </li> <li> <code>config</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Explicitly set the config file instead of auto determining based on file location.</p> </li> <li> <code>check</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Return error code if changes are needed.</p> </li> <li> <code>check_diff</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Return error code if changes are needed, also display file diffs.</p> </li> <li> <code>imports</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>By default, only unused standard library imports are removed; specify a comma-separated list of additional modules/packages.</p> </li> <li> <code>remove_all_unused_imports</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Remove all unused imports (not just those from the standard library).</p> </li> <li> <code>recursive</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Drill down directories recursively.</p> </li> <li> <code>jobs</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of parallel jobs; match CPU count if value is 0 (default: 0).</p> </li> <li> <code>exclude</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Exclude file/directory names that match these comma-separated globs.</p> </li> <li> <code>expand_star_imports</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Expand wildcard star imports with undefined names; this only triggers if there is only one star import in the file; this is skipped if there are any uses of <code>__all__</code> or <code>del</code> in the file.</p> </li> <li> <code>ignore_init_module_imports</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Exclude <code>__init__.py</code> when removing unused imports.</p> </li> <li> <code>remove_duplicate_keys</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Remove all duplicate keys in objects.</p> </li> <li> <code>remove_unused_variables</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Remove unused variables.</p> </li> <li> <code>remove_rhs_for_unused_variables</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Remove RHS of statements when removing unused variables (unsafe).</p> </li> <li> <code>ignore_pass_statements</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore all pass statements.</p> </li> <li> <code>ignore_pass_after_docstring</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore pass statements after a newline ending on <code>\\\"\\\"\\\"</code>.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Suppress output if there are no issues.</p> </li> <li> <code>verbose</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Print more verbose logs (you can repeat <code>-v</code> to make it more verbose).</p> </li> <li> <code>stdin_display_name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The name used when processing input from stdin.</p> </li> <li> <code>in_place</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Make changes to files instead of printing diffs.</p> </li> <li> <code>stdout</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Print changed text to stdout. defaults to true when formatting stdin, or to false otherwise.</p> </li> </ul> Source code in <code>src/duty/callables/autoflake.py</code> <pre><code>@lazy(name=\"autoflake\")\ndef run(\n    *files: str,\n    config: str | None = None,\n    check: bool | None = None,\n    check_diff: bool | None = None,\n    imports: list[str] | None = None,\n    remove_all_unused_imports: bool | None = None,\n    recursive: bool | None = None,\n    jobs: int | None = None,\n    exclude: list[str] | None = None,\n    expand_star_imports: bool | None = None,\n    ignore_init_module_imports: bool | None = None,\n    remove_duplicate_keys: bool | None = None,\n    remove_unused_variables: bool | None = None,\n    remove_rhs_for_unused_variables: bool | None = None,\n    ignore_pass_statements: bool | None = None,\n    ignore_pass_after_docstring: bool | None = None,\n    quiet: bool | None = None,\n    verbose: bool | None = None,\n    stdin_display_name: str | None = None,\n    in_place: bool | None = None,\n    stdout: bool | None = None,\n) -&gt; int:\n    r\"\"\"Run `autoflake`.\n\n    Parameters:\n        *files: Files to format.\n        config: Explicitly set the config file instead of auto determining based on file location.\n        check: Return error code if changes are needed.\n        check_diff: Return error code if changes are needed, also display file diffs.\n        imports: By default, only unused standard library imports are removed; specify a comma-separated list of additional modules/packages.\n        remove_all_unused_imports: Remove all unused imports (not just those from the standard library).\n        recursive: Drill down directories recursively.\n        jobs: Number of parallel jobs; match CPU count if value is 0 (default: 0).\n        exclude: Exclude file/directory names that match these comma-separated globs.\n        expand_star_imports: Expand wildcard star imports with undefined names; this only triggers if there is only one star import in the file; this is skipped if there are any uses of `__all__` or `del` in the file.\n        ignore_init_module_imports: Exclude `__init__.py` when removing unused imports.\n        remove_duplicate_keys: Remove all duplicate keys in objects.\n        remove_unused_variables: Remove unused variables.\n        remove_rhs_for_unused_variables: Remove RHS of statements when removing unused variables (unsafe).\n        ignore_pass_statements: Ignore all pass statements.\n        ignore_pass_after_docstring: Ignore pass statements after a newline ending on `\\\"\\\"\\\"`.\n        quiet: Suppress output if there are no issues.\n        verbose: Print more verbose logs (you can repeat `-v` to make it more verbose).\n        stdin_display_name: The name used when processing input from stdin.\n        in_place: Make changes to files instead of printing diffs.\n        stdout: Print changed text to stdout. defaults to true when formatting stdin, or to false otherwise.\n    \"\"\"\n    from autoflake import _main as autoflake\n\n    cli_args = list(files)\n\n    if check:\n        cli_args.append(\"--check\")\n\n    if check_diff:\n        cli_args.append(\"--check-diff\")\n\n    if imports:\n        cli_args.append(\"--imports\")\n        cli_args.append(\",\".join(imports))\n\n    if remove_all_unused_imports:\n        cli_args.append(\"--remove-all-unused-imports\")\n\n    if recursive:\n        cli_args.append(\"--recursive\")\n\n    if jobs:\n        cli_args.append(\"--jobs\")\n        cli_args.append(str(jobs))\n\n    if exclude:\n        cli_args.append(\"--exclude\")\n        cli_args.append(\",\".join(exclude))\n\n    if expand_star_imports:\n        cli_args.append(\"--expand-star-imports\")\n\n    if ignore_init_module_imports:\n        cli_args.append(\"--ignore-init-module-imports\")\n\n    if remove_duplicate_keys:\n        cli_args.append(\"--remove-duplicate-keys\")\n\n    if remove_unused_variables:\n        cli_args.append(\"--remove-unused-variables\")\n\n    if remove_rhs_for_unused_variables:\n        cli_args.append(\"remove-rhs-for-unused-variables\")\n\n    if ignore_pass_statements:\n        cli_args.append(\"--ignore-pass-statements\")\n\n    if ignore_pass_after_docstring:\n        cli_args.append(\"--ignore-pass-after-docstring\")\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if verbose:\n        cli_args.append(\"--verbose\")\n\n    if stdin_display_name:\n        cli_args.append(\"--stdin-display-name\")\n        cli_args.append(stdin_display_name)\n\n    if config:\n        cli_args.append(\"--config\")\n        cli_args.append(config)\n\n    if in_place:\n        cli_args.append(\"--in-place\")\n\n    if stdout:\n        cli_args.append(\"--stdout\")\n\n    return autoflake(\n        cli_args,\n        standard_out=_io._LazyStdout(),\n        standard_error=_io._LazyStderr(),\n    )\n</code></pre>"},{"location":"reference/duty/callables/black/","title":"black","text":""},{"location":"reference/duty/callables/black/#duty.callables.black","title":"black","text":"<p>Callable for Black.</p> <p>Functions:</p> <ul> <li> <code>run</code>           \u2013            <p>Run <code>black</code>.</p> </li> </ul>"},{"location":"reference/duty/callables/black/#duty.callables.black.run","title":"run","text":"<pre><code>run(\n    *src: str,\n    config: str | None = None,\n    code: str | None = None,\n    line_length: int | None = None,\n    target_version: str | None = None,\n    check: bool | None = None,\n    diff: bool | None = None,\n    color: bool | None = None,\n    fast: bool | None = None,\n    pyi: bool | None = None,\n    ipynb: bool | None = None,\n    python_cell_magics: str | None = None,\n    skip_source_first_line: bool | None = None,\n    skip_string_normalization: bool | None = None,\n    skip_magic_trailing_comma: bool | None = None,\n    experimental_string_processing: bool | None = None,\n    preview: bool | None = None,\n    quiet: bool | None = None,\n    verbose: bool | None = None,\n    required_version: str | None = None,\n    include: str | None = None,\n    exclude: str | None = None,\n    extend_exclude: str | None = None,\n    force_exclude: str | None = None,\n    stdin_filename: str | None = None,\n    workers: int | None = None\n) -&gt; None\n</code></pre> <p>Run <code>black</code>.</p> <p>Parameters:</p> <ul> <li> <code>src</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Format the directories and file paths.</p> </li> <li> <code>config</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read configuration from this file path.</p> </li> <li> <code>code</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Format the code passed in as a string.</p> </li> <li> <code>line_length</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>How many characters per line to allow [default: 120].</p> </li> <li> <code>target_version</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Python versions that should be supported by Black's output. By default, Black will try to infer this from the project metadata in pyproject.toml. If this does not yield conclusive results, Black will use per-file auto-detection.</p> </li> <li> <code>check</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't write the files back, just return the status. Return code 0 means nothing would change. Return code 1 means some files would be reformatted. Return code 123 means there was an internal error.</p> </li> <li> <code>diff</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't write the files back, just output a diff for each file on stdout.</p> </li> <li> <code>color</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show colored diff. Only applies when <code>--diff</code> is given.</p> </li> <li> <code>fast</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>If --fast given, skip temporary sanity checks. [default: --safe]</p> </li> <li> <code>pyi</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Format all input files like typing stubs regardless of file extension (useful when piping source on standard input).</p> </li> <li> <code>ipynb</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Format all input files like Jupyter Notebooks regardless of file extension (useful when piping source on standard input).</p> </li> <li> <code>python_cell_magics</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>When processing Jupyter Notebooks, add the given magic to the list of known python-magics (capture, prun, pypy, python, python3, time, timeit). Useful for formatting cells with custom python magics.</p> </li> <li> <code>skip_source_first_line</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Skip the first line of the source code.</p> </li> <li> <code>skip_string_normalization</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't normalize string quotes or prefixes.</p> </li> <li> <code>skip_magic_trailing_comma</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't use trailing commas as a reason to split lines.</p> </li> <li> <code>preview</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable potentially disruptive style changes that may be added to Black's main functionality in the next major release.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't emit non-error messages to stderr. Errors are still emitted; silence those with 2&gt;/dev/null.</p> </li> <li> <code>verbose</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Also emit messages to stderr about files that were not changed or were ignored due to exclusion patterns.</p> </li> <li> <code>required_version</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Require a specific version of Black to be running (useful for unifying results across many environments e.g. with a pyproject.toml file). It can be either a major version number or an exact version.</p> </li> <li> <code>include</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>A regular expression that matches files and directories that should be included on recursive searches. An empty value means all files are included regardless of the name. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later [default: (.pyi?|.ipynb)$].</p> </li> <li> <code>exclude</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>A regular expression that matches files and directories that should be excluded on recursive searches. An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too). Exclusions are calculated first, inclusions later [default: /(.direnv|.eggs|.git|.hg|.mypy_cache|.nox| .tox|.venv|venv|.svn|.ipynb_checkpoints|_build|buck-out|build|dist|pypackages)/].</p> </li> <li> <code>extend_exclude</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Like --exclude, but adds additional files and directories on top of the excluded ones (useful if you simply want to add to the default).</p> </li> <li> <code>force_exclude</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Like --exclude, but files and directories matching this regex will be excluded even when they are passed explicitly as arguments.</p> </li> <li> <code>stdin_filename</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The name of the file when passing it through stdin. Useful to make sure Black will respect --force-exclude option on some editors that rely on using stdin.</p> </li> <li> <code>workers</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of parallel workers [default: number CPUs in the system].</p> </li> </ul> Source code in <code>src/duty/callables/black.py</code> <pre><code>@lazy(name=\"black\")\ndef run(\n    *src: str,\n    config: str | None = None,\n    code: str | None = None,\n    line_length: int | None = None,\n    target_version: str | None = None,\n    check: bool | None = None,\n    diff: bool | None = None,\n    color: bool | None = None,\n    fast: bool | None = None,\n    pyi: bool | None = None,\n    ipynb: bool | None = None,\n    python_cell_magics: str | None = None,\n    skip_source_first_line: bool | None = None,\n    skip_string_normalization: bool | None = None,\n    skip_magic_trailing_comma: bool | None = None,\n    experimental_string_processing: bool | None = None,\n    preview: bool | None = None,\n    quiet: bool | None = None,\n    verbose: bool | None = None,\n    required_version: str | None = None,\n    include: str | None = None,\n    exclude: str | None = None,\n    extend_exclude: str | None = None,\n    force_exclude: str | None = None,\n    stdin_filename: str | None = None,\n    workers: int | None = None,\n) -&gt; None:\n    r\"\"\"Run `black`.\n\n    Parameters:\n        src: Format the directories and file paths.\n        config: Read configuration from this file path.\n        code: Format the code passed in as a string.\n        line_length: How many characters per line to allow [default: 120].\n        target_version: Python versions that should be supported by Black's output.\n            By default, Black will try to infer this from the project metadata in pyproject.toml.\n            If this does not yield conclusive results, Black will use per-file auto-detection.\n        check: Don't write the files back, just return the status. Return code 0 means nothing would change.\n            Return code 1 means some files would be reformatted. Return code 123 means there was an internal error.\n        diff: Don't write the files back, just output a diff for each file on stdout.\n        color: Show colored diff. Only applies when `--diff` is given.\n        fast: If --fast given, skip temporary sanity checks. [default: --safe]\n        pyi: Format all input files like typing stubs regardless of file extension\n            (useful when piping source on standard input).\n        ipynb: Format all input files like Jupyter Notebooks regardless of file extension\n            (useful when piping source on standard input).\n        python_cell_magics: When processing Jupyter Notebooks, add the given magic to the list of known python-magics\n            (capture, prun, pypy, python, python3, time, timeit). Useful for formatting cells with custom python magics.\n        skip_source_first_line: Skip the first line of the source code.\n        skip_string_normalization: Don't normalize string quotes or prefixes.\n        skip_magic_trailing_comma: Don't use trailing commas as a reason to split lines.\n        preview: Enable potentially disruptive style changes that may be added\n            to Black's main functionality in the next major release.\n        quiet: Don't emit non-error messages to stderr. Errors are still emitted; silence those with 2&gt;/dev/null.\n        verbose: Also emit messages to stderr about files that were not changed or were ignored due to exclusion patterns.\n        required_version: Require a specific version of Black to be running (useful for unifying results\n            across many environments e.g. with a pyproject.toml file).\n            It can be either a major version number or an exact version.\n        include: A regular expression that matches files and directories that should be included on recursive searches.\n            An empty value means all files are included regardless of the name. Use forward slashes for directories\n            on all platforms (Windows, too). Exclusions are calculated first, inclusions later [default: (\\.pyi?|\\.ipynb)$].\n        exclude: A regular expression that matches files and directories that should be excluded on recursive searches.\n            An empty value means no paths are excluded. Use forward slashes for directories on all platforms (Windows, too).\n            Exclusions are calculated first, inclusions later [default: /(\\.direnv|\\.eggs|\\.git|\\.hg|\\.mypy_cache|\\.nox|\n            \\.tox|\\.venv|venv|\\.svn|\\.ipynb_checkpoints|_build|buck-out|build|dist|__pypackages__)/].\n        extend_exclude: Like --exclude, but adds additional files and directories on top of the excluded ones\n            (useful if you simply want to add to the default).\n        force_exclude: Like --exclude, but files and directories matching this regex will be excluded\n            even when they are passed explicitly as arguments.\n        stdin_filename: The name of the file when passing it through stdin. Useful to make sure Black will respect\n            --force-exclude option on some editors that rely on using stdin.\n        workers: Number of parallel workers [default: number CPUs in the system].\n    \"\"\"\n    from black import main as black\n\n    cli_args = list(src)\n\n    if config:\n        cli_args.append(\"--config\")\n        cli_args.append(config)\n\n    if code:\n        cli_args.append(\"--code\")\n        cli_args.append(code)\n\n    if line_length:\n        cli_args.append(\"--line-length\")\n        cli_args.append(str(line_length))\n\n    if target_version:\n        cli_args.append(\"--target-version\")\n        cli_args.append(target_version)\n\n    if check:\n        cli_args.append(\"--check\")\n\n    if diff:\n        cli_args.append(\"--diff\")\n\n    if color is True:\n        cli_args.append(\"--color\")\n    elif color is False:\n        cli_args.append(\"--no-color\")\n\n    if fast:\n        cli_args.append(\"--fast\")\n\n    if pyi:\n        cli_args.append(\"--pyi\")\n\n    if ipynb:\n        cli_args.append(\"--ipynb\")\n\n    if python_cell_magics:\n        cli_args.append(\"--python-cell-magics\")\n        cli_args.append(python_cell_magics)\n\n    if skip_source_first_line:\n        cli_args.append(\"--skip_source_first_line\")\n\n    if skip_string_normalization:\n        cli_args.append(\"--skip_string_normalization\")\n\n    if skip_magic_trailing_comma:\n        cli_args.append(\"--skip_magic_trailing_comma\")\n\n    if experimental_string_processing:\n        cli_args.append(\"--experimental_string_processing\")\n\n    if preview:\n        cli_args.append(\"--preview\")\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if verbose:\n        cli_args.append(\"--verbose\")\n\n    if required_version:\n        cli_args.append(\"--required-version\")\n        cli_args.append(required_version)\n\n    if include:\n        cli_args.append(\"--include\")\n        cli_args.append(include)\n\n    if exclude:\n        cli_args.append(\"--exclude\")\n        cli_args.append(exclude)\n\n    if extend_exclude:\n        cli_args.append(\"--extend-exclude\")\n        cli_args.append(extend_exclude)\n\n    if force_exclude:\n        cli_args.append(\"--force-exclude\")\n        cli_args.append(force_exclude)\n\n    if stdin_filename:\n        cli_args.append(\"--stdin-filename\")\n        cli_args.append(stdin_filename)\n\n    if workers:\n        cli_args.append(\"--workers\")\n        cli_args.append(str(workers))\n\n    return black(cli_args, prog_name=\"black\")\n</code></pre>"},{"location":"reference/duty/callables/blacken_docs/","title":"blacken_docs","text":""},{"location":"reference/duty/callables/blacken_docs/#duty.callables.blacken_docs","title":"blacken_docs","text":"<p>Callable for blacken-docs.</p> <p>Functions:</p> <ul> <li> <code>run</code>           \u2013            <p>Run <code>blacken-docs</code>.</p> </li> </ul>"},{"location":"reference/duty/callables/blacken_docs/#duty.callables.blacken_docs.run","title":"run","text":"<pre><code>run(\n    *paths: str | Path,\n    exts: Sequence[str] | None = None,\n    exclude: Sequence[str | Pattern] | None = None,\n    skip_errors: bool = False,\n    rst_literal_blocks: bool = False,\n    line_length: int | None = None,\n    string_normalization: bool = True,\n    is_pyi: bool = False,\n    is_ipynb: bool = False,\n    skip_source_first_line: bool = False,\n    magic_trailing_comma: bool = True,\n    python_cell_magics: set[str] | None = None,\n    preview: bool = False\n) -&gt; int\n</code></pre> <p>Run <code>blacken-docs</code>.</p> <p>Parameters:</p> <ul> <li> <code>*paths</code>             (<code>str | Path</code>, default:                 <code>()</code> )         \u2013          <p>Directories and files to format.</p> </li> <li> <code>exts</code>             (<code>Sequence[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>List of extensions to select files with.</p> </li> <li> <code>exclude</code>             (<code>Sequence[str | Pattern] | None</code>, default:                 <code>None</code> )         \u2013          <p>List of regular expressions to exclude files.</p> </li> <li> <code>skip_errors</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Don't exit non-zero for errors from Black (normally syntax errors).</p> </li> <li> <code>rst_literal_blocks</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Also format literal blocks in reStructuredText files (more below).</p> </li> <li> <code>line_length</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>How many characters per line to allow.</p> </li> <li> <code>string_normalization</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Normalize string quotes or prefixes.</p> </li> <li> <code>is_pyi</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Format all input files like typing stubs regardless of file extension.</p> </li> <li> <code>is_ipynb</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Format all input files like Jupyter Notebooks regardless of file extension.</p> </li> <li> <code>skip_source_first_line</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Skip the first line of the source code.</p> </li> <li> <code>magic_trailing_comma</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Use trailing commas as a reason to split lines.</p> </li> <li> <code>python_cell_magics</code>             (<code>set[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>When processing Jupyter Notebooks, add the given magic to the list of known python-magics (capture, prun, pypy, python, python3, time, timeit). Useful for formatting cells with custom python magics.</p> </li> <li> <code>preview</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable potentially disruptive style changes that may be added to Black's main functionality in the next major release.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>Success/failure.</p> </li> </ul> Source code in <code>src/duty/callables/blacken_docs.py</code> <pre><code>@lazy(name=\"blacken_docs\")\ndef run(\n    *paths: str | Path,\n    exts: Sequence[str] | None = None,\n    exclude: Sequence[str | Pattern] | None = None,\n    skip_errors: bool = False,\n    rst_literal_blocks: bool = False,\n    line_length: int | None = None,\n    string_normalization: bool = True,\n    is_pyi: bool = False,\n    is_ipynb: bool = False,\n    skip_source_first_line: bool = False,\n    magic_trailing_comma: bool = True,\n    python_cell_magics: set[str] | None = None,\n    preview: bool = False,\n) -&gt; int:\n    \"\"\"Run `blacken-docs`.\n\n    Parameters:\n        *paths: Directories and files to format.\n        exts: List of extensions to select files with.\n        exclude: List of regular expressions to exclude files.\n        skip_errors: Don't exit non-zero for errors from Black (normally syntax errors).\n        rst_literal_blocks: Also format literal blocks in reStructuredText files (more below).\n        line_length: How many characters per line to allow.\n        string_normalization: Normalize string quotes or prefixes.\n        is_pyi: Format all input files like typing stubs regardless of file extension.\n        is_ipynb: Format all input files like Jupyter Notebooks regardless of file extension.\n        skip_source_first_line: Skip the first line of the source code.\n        magic_trailing_comma: Use trailing commas as a reason to split lines.\n        python_cell_magics: When processing Jupyter Notebooks, add the given magic to the list\n            of known python-magics (capture, prun, pypy, python, python3, time, timeit).\n            Useful for formatting cells with custom python magics.\n        preview: Enable potentially disruptive style changes that may be added\n            to Black's main functionality in the next major release.\n\n    Returns:\n        Success/failure.\n    \"\"\"\n    import black\n    from blacken_docs import format_file\n\n    exts = (\"md\", \"py\") if exts is None else tuple(ext.lstrip(\".\") for ext in exts)\n    if exclude:\n        exclude = tuple(re.compile(regex, re.I) if isinstance(regex, str) else regex for regex in exclude)\n    filepaths = set()\n    for path in paths:\n        path = Path(path)  # noqa: PLW2901\n        if path.is_file():\n            filepaths.add(path.as_posix())\n        else:\n            for ext in exts:\n                filepaths |= {filepath.as_posix() for filepath in path.rglob(f\"*.{ext}\")}\n\n    black_mode = black.Mode(\n        line_length=line_length or black.DEFAULT_LINE_LENGTH,\n        string_normalization=string_normalization,\n        is_pyi=is_pyi,\n        is_ipynb=is_ipynb,\n        skip_source_first_line=skip_source_first_line,\n        magic_trailing_comma=magic_trailing_comma,\n        python_cell_magics=python_cell_magics or set(),\n        preview=preview,\n    )\n    retv = 0\n    for filepath in sorted(filepaths):\n        retv |= format_file(\n            filepath,\n            black_mode,\n            skip_errors=skip_errors,\n            rst_literal_blocks=rst_literal_blocks,\n        )\n    return retv\n</code></pre>"},{"location":"reference/duty/callables/coverage/","title":"coverage","text":""},{"location":"reference/duty/callables/coverage/#duty.callables.coverage","title":"coverage","text":"<p>Callable for Coverage.py.</p> <p>Functions:</p> <ul> <li> <code>annotate</code>           \u2013            <p>Annotate source files with execution information.</p> </li> <li> <code>combine</code>           \u2013            <p>Combine a number of data files.</p> </li> <li> <code>debug</code>           \u2013            <p>Display information about the internals of coverage.py.</p> </li> <li> <code>erase</code>           \u2013            <p>Erase previously collected coverage data.</p> </li> <li> <code>html</code>           \u2013            <p>Create an HTML report.</p> </li> <li> <code>json</code>           \u2013            <p>Create a JSON report of coverage results.</p> </li> <li> <code>lcov</code>           \u2013            <p>Create an LCOV report of coverage results.</p> </li> <li> <code>report</code>           \u2013            <p>Report coverage statistics on modules.</p> </li> <li> <code>run</code>           \u2013            <p>Run a Python program and measure code execution.</p> </li> <li> <code>xml</code>           \u2013            <p>Create an XML report of coverage results.</p> </li> </ul>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.annotate","title":"annotate","text":"<pre><code>annotate(\n    *,\n    rcfile: str | None = None,\n    directory: str | None = None,\n    data_file: str | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Annotate source files with execution information.</p> <p>Make annotated copies of the given files, marking statements that are executed with <code>&gt;</code> and statements that are missed with <code>!</code>.</p> <p>Parameters:</p> <ul> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>directory</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Write the output files to this directory.</p> </li> <li> <code>data_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read coverage data for report generation from this file. Defaults to <code>.coverage</code> [env: <code>COVERAGE_FILE</code>].</p> </li> <li> <code>ignore_errors</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore errors while reading source files.</p> </li> <li> <code>include</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>omit</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.annotate\")\ndef annotate(\n    *,\n    rcfile: str | None = None,\n    directory: str | None = None,\n    data_file: str | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Annotate source files with execution information.\n\n    Make annotated copies of the given files, marking statements that are executed\n    with `&gt;` and statements that are missed with `!`.\n\n    Parameters:\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        directory: Write the output files to this directory.\n        data_file: Read coverage data for report generation from this file.\n            Defaults to `.coverage` [env: `COVERAGE_FILE`].\n        ignore_errors: Ignore errors while reading source files.\n        include: Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        omit: Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args = [\"annotate\"]\n\n    if directory:\n        cli_args.append(\"--directory\")\n        cli_args.append(directory)\n\n    if data_file:\n        cli_args.append(\"--data-file\")\n        cli_args.append(data_file)\n\n    if ignore_errors:\n        cli_args.append(\"--ignore-errors\")\n\n    if include:\n        cli_args.append(\"--include\")\n        cli_args.append(\",\".join(include))\n\n    if omit:\n        cli_args.append(\"--omit\")\n        cli_args.append(\",\".join(omit))\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.combine","title":"combine","text":"<pre><code>combine(\n    *paths: str,\n    rcfile: str | None = None,\n    append: bool | None = None,\n    data_file: str | None = None,\n    keep: bool | None = None,\n    quiet: bool | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Combine a number of data files.</p> <p>Combine data from multiple coverage files. The combined results are written to a single file representing the union of the data. The positional arguments are data files or directories containing data files. If no paths are provided, data files in the default data file's directory are combined.</p> <p>Parameters:</p> <ul> <li> <code>paths</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Paths to combine.</p> </li> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>append</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Append coverage data to .coverage, otherwise it starts clean each time.</p> </li> <li> <code>data_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read coverage data for report generation from this file. Defaults to <code>.coverage</code> [env: <code>COVERAGE_FILE</code>].</p> </li> <li> <code>keep</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Keep original coverage files, otherwise they are deleted.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't print messages about what is happening.</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.combine\")\ndef combine(\n    *paths: str,\n    rcfile: str | None = None,\n    append: bool | None = None,\n    data_file: str | None = None,\n    keep: bool | None = None,\n    quiet: bool | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Combine a number of data files.\n\n    Combine data from multiple coverage files. The combined results are written to\n    a single file representing the union of the data. The positional arguments are\n    data files or directories containing data files. If no paths are provided,\n    data files in the default data file's directory are combined.\n\n    Parameters:\n        paths: Paths to combine.\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        append: Append coverage data to .coverage, otherwise it starts clean each time.\n        data_file: Read coverage data for report generation from this file.\n            Defaults to `.coverage` [env: `COVERAGE_FILE`].\n        keep: Keep original coverage files, otherwise they are deleted.\n        quiet: Don't print messages about what is happening.\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args = [\"combine\", *paths]\n\n    if append:\n        cli_args.append(\"--append\")\n\n    if data_file:\n        cli_args.append(\"--data-file\")\n        cli_args.append(data_file)\n\n    if keep:\n        cli_args.append(\"--keep\")\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.debug","title":"debug","text":"<pre><code>debug(\n    topic: Literal[\n        \"data\", \"sys\", \"config\", \"premain\", \"pybehave\"\n    ],\n    *,\n    rcfile: str | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Display information about the internals of coverage.py.</p> <p>Display information about the internals of coverage.py, for diagnosing problems. Topics are: <code>data</code> to show a summary of the collected data; <code>sys</code> to show installation information; <code>config</code> to show the configuration; <code>premain</code> to show what is calling coverage; <code>pybehave</code> to show internal flags describing Python behavior.</p> <p>Parameters:</p> <ul> <li> <code>topic</code>             (<code>Literal['data', 'sys', 'config', 'premain', 'pybehave']</code>)         \u2013          <p>Topic to display.</p> </li> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.debug\")\ndef debug(\n    topic: Literal[\"data\", \"sys\", \"config\", \"premain\", \"pybehave\"],\n    *,\n    rcfile: str | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Display information about the internals of coverage.py.\n\n    Display information about the internals of coverage.py, for diagnosing\n    problems. Topics are: `data` to show a summary of the collected data; `sys` to\n    show installation information; `config` to show the configuration; `premain`\n    to show what is calling coverage; `pybehave` to show internal flags describing\n    Python behavior.\n\n    Parameters:\n        topic: Topic to display.\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args: list[str] = [\"debug\", topic]\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.erase","title":"erase","text":"<pre><code>erase(\n    *,\n    rcfile: str | None = None,\n    data_file: str | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Erase previously collected coverage data.</p> <p>Parameters:</p> <ul> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>data_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read coverage data for report generation from this file. Defaults to <code>.coverage</code> [env: <code>COVERAGE_FILE</code>].</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.erase\")\ndef erase(\n    *,\n    rcfile: str | None = None,\n    data_file: str | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Erase previously collected coverage data.\n\n    Parameters:\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        data_file: Read coverage data for report generation from this file.\n            Defaults to `.coverage` [env: `COVERAGE_FILE`].\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args = [\"erase\"]\n\n    if data_file:\n        cli_args.append(\"--data-file\")\n        cli_args.append(data_file)\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.html","title":"html","text":"<pre><code>html(\n    *,\n    rcfile: str | None = None,\n    contexts: list[str] | None = None,\n    directory: str | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    precision: int | None = None,\n    quiet: bool | None = None,\n    show_contexts: bool | None = None,\n    skip_covered: bool | None = None,\n    skip_empty: bool | None = None,\n    title: str | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Create an HTML report.</p> <p>Create an HTML report of the coverage of the files.  Each file gets its own page, with the source decorated to show executed, excluded, and missed lines.</p> <p>Parameters:</p> <ul> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>contexts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Only display data from lines covered in the given contexts. Accepts Python regexes, which must be quoted.</p> </li> <li> <code>directory</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Write the output files to this directory.</p> </li> <li> <code>data_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read coverage data for report generation from this file. Defaults to <code>.coverage</code> [env: <code>COVERAGE_FILE</code>].</p> </li> <li> <code>fail_under</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit with a status of 2 if the total coverage is less than the given number.</p> </li> <li> <code>ignore_errors</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore errors while reading source files.</p> </li> <li> <code>include</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>omit</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>precision</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of digits after the decimal point to display for reported coverage percentages.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't print messages about what is happening.</p> </li> <li> <code>show_contexts</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show contexts for covered lines.</p> </li> <li> <code>skip_covered</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Skip files with 100% coverage.</p> </li> <li> <code>skip_empty</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Skip files with no code.</p> </li> <li> <code>title</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>A text string to use as the title on the HTML.</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.html\")\ndef html(\n    *,\n    rcfile: str | None = None,\n    contexts: list[str] | None = None,\n    directory: str | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    precision: int | None = None,\n    quiet: bool | None = None,\n    show_contexts: bool | None = None,\n    skip_covered: bool | None = None,\n    skip_empty: bool | None = None,\n    title: str | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Create an HTML report.\n\n    Create an HTML report of the coverage of the files.  Each file gets its own\n    page, with the source decorated to show executed, excluded, and missed lines.\n\n    Parameters:\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        contexts: Only display data from lines covered in the given contexts.\n            Accepts Python regexes, which must be quoted.\n        directory: Write the output files to this directory.\n        data_file: Read coverage data for report generation from this file.\n            Defaults to `.coverage` [env: `COVERAGE_FILE`].\n        fail_under: Exit with a status of 2 if the total coverage is less than the given number.\n        ignore_errors: Ignore errors while reading source files.\n        include: Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        omit: Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        precision: Number of digits after the decimal point to display for reported coverage percentages.\n        quiet: Don't print messages about what is happening.\n        show_contexts: Show contexts for covered lines.\n        skip_covered: Skip files with 100% coverage.\n        skip_empty: Skip files with no code.\n        title: A text string to use as the title on the HTML.\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args = [\"html\"]\n\n    if contexts:\n        cli_args.append(\"--contexts\")\n        cli_args.append(\",\".join(contexts))\n\n    if directory:\n        cli_args.append(\"--directory\")\n        cli_args.append(directory)\n\n    if data_file:\n        cli_args.append(\"--data-file\")\n        cli_args.append(data_file)\n\n    if fail_under is not None:\n        cli_args.append(\"--fail-under\")\n        cli_args.append(str(fail_under))\n\n    if ignore_errors:\n        cli_args.append(\"--ignore-errors\")\n\n    if include:\n        cli_args.append(\"--include\")\n        cli_args.append(\",\".join(include))\n\n    if omit:\n        cli_args.append(\"--omit\")\n        cli_args.append(\",\".join(omit))\n\n    if precision is not None:\n        cli_args.append(\"--precision\")\n        cli_args.append(str(precision))\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if show_contexts:\n        cli_args.append(\"--show-contexts\")\n\n    if skip_covered is True:\n        cli_args.append(\"--skip-covered\")\n    elif skip_covered is False:\n        cli_args.append(\"--no-skip-covered\")\n\n    if skip_empty:\n        cli_args.append(\"--skip-empty\")\n\n    if title:\n        cli_args.append(\"--title\")\n        cli_args.append(title)\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.json","title":"json","text":"<pre><code>json(\n    *,\n    rcfile: str | None = None,\n    contexts: list[str] | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    output: str | None = None,\n    pretty_print: bool | None = None,\n    quiet: bool | None = None,\n    show_contexts: bool | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Create a JSON report of coverage results.</p> <p>Parameters:</p> <ul> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>contexts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Only display data from lines covered in the given contexts. Accepts Python regexes, which must be quoted.</p> </li> <li> <code>data_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read coverage data for report generation from this file. Defaults to <code>.coverage</code> [env: <code>COVERAGE_FILE</code>].</p> </li> <li> <code>fail_under</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit with a status of 2 if the total coverage is less than the given number.</p> </li> <li> <code>ignore_errors</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore errors while reading source files.</p> </li> <li> <code>include</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>omit</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>output</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Write the JSON report to this file. Defaults to <code>coverage.json</code>.</p> </li> <li> <code>pretty_print</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Format the JSON for human readers.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't print messages about what is happening.</p> </li> <li> <code>show_contexts</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show contexts for covered lines.</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.json\")\ndef json(\n    *,\n    rcfile: str | None = None,\n    contexts: list[str] | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    output: str | None = None,\n    pretty_print: bool | None = None,\n    quiet: bool | None = None,\n    show_contexts: bool | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Create a JSON report of coverage results.\n\n    Parameters:\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        contexts: Only display data from lines covered in the given contexts.\n            Accepts Python regexes, which must be quoted.\n        data_file: Read coverage data for report generation from this file.\n            Defaults to `.coverage` [env: `COVERAGE_FILE`].\n        fail_under: Exit with a status of 2 if the total coverage is less than the given number.\n        ignore_errors: Ignore errors while reading source files.\n        include: Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        omit: Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        output: Write the JSON report to this file. Defaults to `coverage.json`.\n        pretty_print: Format the JSON for human readers.\n        quiet: Don't print messages about what is happening.\n        show_contexts: Show contexts for covered lines.\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args = [\"json\"]\n\n    if contexts:\n        cli_args.append(\"--contexts\")\n        cli_args.append(\",\".join(contexts))\n\n    if data_file:\n        cli_args.append(\"--data-file\")\n        cli_args.append(data_file)\n\n    if fail_under is not None:\n        cli_args.append(\"--fail-under\")\n        cli_args.append(str(fail_under))\n\n    if ignore_errors:\n        cli_args.append(\"--ignore-errors\")\n\n    if include:\n        cli_args.append(\"--include\")\n        cli_args.append(\",\".join(include))\n\n    if omit:\n        cli_args.append(\"--omit\")\n        cli_args.append(\",\".join(omit))\n\n    if output:\n        cli_args.append(\"-o\")\n        cli_args.append(output)\n\n    if pretty_print:\n        cli_args.append(\"--pretty-print\")\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if show_contexts:\n        cli_args.append(\"--show-contexts\")\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.lcov","title":"lcov","text":"<pre><code>lcov(\n    *,\n    rcfile: str | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    output: str | None = None,\n    quiet: bool | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Create an LCOV report of coverage results.</p> <p>Parameters:</p> <ul> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>data_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read coverage data for report generation from this file. Defaults to <code>.coverage</code> [env: <code>COVERAGE_FILE</code>].</p> </li> <li> <code>fail_under</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit with a status of 2 if the total coverage is less than the given number.</p> </li> <li> <code>ignore_errors</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore errors while reading source files.</p> </li> <li> <code>include</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>omit</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>output</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Write the JSON report to this file. Defaults to <code>coverage.json</code>.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't print messages about what is happening.</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.lcov\")\ndef lcov(\n    *,\n    rcfile: str | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    output: str | None = None,\n    quiet: bool | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Create an LCOV report of coverage results.\n\n    Parameters:\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        data_file: Read coverage data for report generation from this file.\n            Defaults to `.coverage` [env: `COVERAGE_FILE`].\n        fail_under: Exit with a status of 2 if the total coverage is less than the given number.\n        ignore_errors: Ignore errors while reading source files.\n        include: Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        omit: Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        output: Write the JSON report to this file. Defaults to `coverage.json`.\n        quiet: Don't print messages about what is happening.\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args = [\"lcov\"]\n\n    if data_file:\n        cli_args.append(\"--data-file\")\n        cli_args.append(data_file)\n\n    if fail_under is not None:\n        cli_args.append(\"--fail-under\")\n        cli_args.append(str(fail_under))\n\n    if ignore_errors:\n        cli_args.append(\"--ignore-errors\")\n\n    if include:\n        cli_args.append(\"--include\")\n        cli_args.append(\",\".join(include))\n\n    if omit:\n        cli_args.append(\"--omit\")\n        cli_args.append(\",\".join(omit))\n\n    if output:\n        cli_args.append(\"-o\")\n        cli_args.append(output)\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.report","title":"report","text":"<pre><code>report(\n    *,\n    rcfile: str | None = None,\n    contexts: list[str] | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    output_format: Literal[\"text\", \"markdown\", \"total\"]\n    | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    precision: int | None = None,\n    sort: Literal[\n        \"name\", \"stmts\", \"miss\", \"branch\", \"brpart\", \"cover\"\n    ]\n    | None = None,\n    show_missing: bool | None = None,\n    skip_covered: bool | None = None,\n    skip_empty: bool | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Report coverage statistics on modules.</p> <p>Parameters:</p> <ul> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>contexts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Only display data from lines covered in the given contexts.</p> </li> <li> <code>data_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read coverage data for report generation from this file. Defaults to <code>.coverage</code> [env: <code>COVERAGE_FILE</code>].</p> </li> <li> <code>fail_under</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit with a status of 2 if the total coverage is less than the given number.</p> </li> <li> <code>output_format</code>             (<code>Literal['text', 'markdown', 'total'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Output format, either text (default), markdown, or total.</p> </li> <li> <code>ignore_errors</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore errors while reading source files.</p> </li> <li> <code>include</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>omit</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>precision</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of digits after the decimal point to display for reported coverage percentages.</p> </li> <li> <code>sort</code>             (<code>Literal['name', 'stmts', 'miss', 'branch', 'brpart', 'cover'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Sort the report by the named column: name, stmts, miss, branch, brpart, or cover. Default is name.</p> </li> <li> <code>show_missing</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show line numbers of statements in each module that weren't executed.</p> </li> <li> <code>skip_covered</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Skip files with 100% coverage.</p> </li> <li> <code>skip_empty</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Skip files with no code.</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.report\")\ndef report(\n    *,\n    rcfile: str | None = None,\n    contexts: list[str] | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    output_format: Literal[\"text\", \"markdown\", \"total\"] | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    precision: int | None = None,\n    sort: Literal[\"name\", \"stmts\", \"miss\", \"branch\", \"brpart\", \"cover\"] | None = None,\n    show_missing: bool | None = None,\n    skip_covered: bool | None = None,\n    skip_empty: bool | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Report coverage statistics on modules.\n\n    Parameters:\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        contexts: Only display data from lines covered in the given contexts.\n        data_file: Read coverage data for report generation from this file.\n            Defaults to `.coverage` [env: `COVERAGE_FILE`].\n        fail_under: Exit with a status of 2 if the total coverage is less than the given number.\n        output_format: Output format, either text (default), markdown, or total.\n        ignore_errors: Ignore errors while reading source files.\n        include: Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        omit: Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        precision: Number of digits after the decimal point to display for reported coverage percentages.\n        sort: Sort the report by the named column: name, stmts, miss, branch, brpart, or cover. Default is name.\n        show_missing: Show line numbers of statements in each module that weren't executed.\n        skip_covered: Skip files with 100% coverage.\n        skip_empty: Skip files with no code.\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args = [\"report\"]\n\n    if contexts:\n        cli_args.append(\"--contexts\")\n        cli_args.append(\",\".join(contexts))\n\n    if data_file:\n        cli_args.append(\"--data-file\")\n        cli_args.append(data_file)\n\n    if fail_under is not None:\n        cli_args.append(\"--fail-under\")\n        cli_args.append(str(fail_under))\n\n    if output_format:\n        cli_args.append(\"--format\")\n        cli_args.append(output_format)\n\n    if ignore_errors:\n        cli_args.append(\"--ignore-errors\")\n\n    if include:\n        cli_args.append(\"--include\")\n        cli_args.append(\",\".join(include))\n\n    if omit:\n        cli_args.append(\"--omit\")\n        cli_args.append(\",\".join(omit))\n\n    if precision is not None:\n        cli_args.append(\"--precision\")\n        cli_args.append(str(precision))\n\n    if sort:\n        cli_args.append(\"--sort\")\n        cli_args.append(sort)\n\n    if show_missing:\n        cli_args.append(\"--show-missing\")\n\n    if skip_covered is True:\n        cli_args.append(\"--skip-covered\")\n    elif skip_covered is False:\n        cli_args.append(\"--no-skip-covered\")\n\n    if skip_empty:\n        cli_args.append(\"--skip-empty\")\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.run","title":"run","text":"<pre><code>run(\n    pyfile: str,\n    *,\n    rcfile: str | None = None,\n    append: bool | None = None,\n    branch: bool | None = None,\n    concurrency: list[str] | None = None,\n    context: str | None = None,\n    data_file: str | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    module: bool | None = None,\n    pylib: bool | None = None,\n    parallel_mode: bool | None = None,\n    source: list[str] | None = None,\n    timid: bool | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Run a Python program and measure code execution.</p> <p>Parameters:</p> <ul> <li> <code>pyfile</code>             (<code>str</code>)         \u2013          <p>Python script or module to run.</p> </li> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>append</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Append coverage data to .coverage, otherwise it starts clean each time.</p> </li> <li> <code>branch</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Measure branch coverage in addition to statement coverage.</p> </li> <li> <code>concurrency</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Properly measure code using a concurrency library. Valid values are: eventlet, gevent, greenlet, multiprocessing, thread, or a comma-list of them.</p> </li> <li> <code>context</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The context label to record for this coverage run.</p> </li> <li> <code>data_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read coverage data for report generation from this file. Defaults to <code>.coverage</code> [env: <code>COVERAGE_FILE</code>].</p> </li> <li> <code>include</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>omit</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>module</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>The given file is an importable Python module, not a script path, to be run as <code>python -m</code> would run it.</p> </li> <li> <code>pylib</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Measure coverage even inside the Python installed library, which isn't done by default.</p> </li> <li> <code>parallel_mode</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Append the machine name, process id and random number to the data file name to simplify collecting data from many processes.</p> </li> <li> <code>source</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>A list of directories or importable names of code to measure.</p> </li> <li> <code>timid</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use a simpler but slower trace method. Try this if you get seemingly impossible results!</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.run\")\ndef run(\n    pyfile: str,\n    *,\n    rcfile: str | None = None,\n    append: bool | None = None,\n    branch: bool | None = None,\n    concurrency: list[str] | None = None,\n    context: str | None = None,\n    data_file: str | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    module: bool | None = None,\n    pylib: bool | None = None,\n    parallel_mode: bool | None = None,\n    source: list[str] | None = None,\n    timid: bool | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Run a Python program and measure code execution.\n\n    Parameters:\n        pyfile: Python script or module to run.\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        append: Append coverage data to .coverage, otherwise it starts clean each time.\n        branch: Measure branch coverage in addition to statement coverage.\n        concurrency: Properly measure code using a concurrency library. Valid values are:\n            eventlet, gevent, greenlet, multiprocessing, thread, or a comma-list of them.\n        context: The context label to record for this coverage run.\n        data_file: Read coverage data for report generation from this file.\n            Defaults to `.coverage` [env: `COVERAGE_FILE`].\n        include: Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        omit: Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        module: The given file is an importable Python module, not a script path, to be run as `python -m` would run it.\n        pylib: Measure coverage even inside the Python installed library, which isn't done by default.\n        parallel_mode: Append the machine name, process id and random number to the data file name\n            to simplify collecting data from many processes.\n        source: A list of directories or importable names of code to measure.\n        timid: Use a simpler but slower trace method. Try this if you get seemingly impossible results!\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args = [\"run\", pyfile]\n\n    if append:\n        cli_args.append(\"--append\")\n\n    if branch:\n        cli_args.append(\"--branch\")\n\n    if concurrency:\n        cli_args.append(\"--concurrency\")\n        cli_args.append(\",\".join(concurrency))\n\n    if context:\n        cli_args.append(\"--context\")\n        cli_args.append(context)\n\n    if data_file:\n        cli_args.append(\"--data-file\")\n        cli_args.append(data_file)\n\n    if include:\n        cli_args.append(\"--include\")\n        cli_args.append(\",\".join(include))\n\n    if omit:\n        cli_args.append(\"--omit\")\n        cli_args.append(\",\".join(omit))\n\n    if module:\n        cli_args.append(\"--module\")\n\n    if pylib:\n        cli_args.append(\"--pylib\")\n\n    if parallel_mode:\n        cli_args.append(\"--parallel-mode\")\n\n    if source:\n        cli_args.append(\"--source\")\n        cli_args.append(\",\".join(source))\n\n    if timid:\n        cli_args.append(\"--timid\")\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/coverage/#duty.callables.coverage.xml","title":"xml","text":"<pre><code>xml(\n    *,\n    rcfile: str | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    output: str | None = None,\n    quiet: bool | None = None,\n    skip_empty: bool | None = None,\n    debug_opts: list[str] | None = None\n) -&gt; None\n</code></pre> <p>Create an XML report of coverage results.</p> <p>Parameters:</p> <ul> <li> <code>rcfile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify configuration file. By default <code>.coveragerc</code>, <code>setup.cfg</code>, <code>tox.ini</code>, and <code>pyproject.toml</code> are tried [env: <code>COVERAGE_RCFILE</code>].</p> </li> <li> <code>data_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read coverage data for report generation from this file. Defaults to <code>.coverage</code> [env: <code>COVERAGE_FILE</code>].</p> </li> <li> <code>fail_under</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit with a status of 2 if the total coverage is less than the given number.</p> </li> <li> <code>ignore_errors</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore errors while reading source files.</p> </li> <li> <code>include</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>omit</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.</p> </li> <li> <code>output</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Write the JSON report to this file. Defaults to <code>coverage.json</code>.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't print messages about what is happening.</p> </li> <li> <code>skip_empty</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Skip files with no code.</p> </li> <li> <code>debug_opts</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Debug options, separated by commas [env: <code>COVERAGE_DEBUG</code>].</p> </li> </ul> Source code in <code>src/duty/callables/coverage.py</code> <pre><code>@lazy(name=\"coverage.xml\")\ndef xml(\n    *,\n    rcfile: str | None = None,\n    data_file: str | None = None,\n    fail_under: int | None = None,\n    ignore_errors: bool | None = None,\n    include: list[str] | None = None,\n    omit: list[str] | None = None,\n    output: str | None = None,\n    quiet: bool | None = None,\n    skip_empty: bool | None = None,\n    debug_opts: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Create an XML report of coverage results.\n\n    Parameters:\n        rcfile: Specify configuration file. By default `.coveragerc`, `setup.cfg`, `tox.ini`,\n            and `pyproject.toml` are tried [env: `COVERAGE_RCFILE`].\n        data_file: Read coverage data for report generation from this file.\n            Defaults to `.coverage` [env: `COVERAGE_FILE`].\n        fail_under: Exit with a status of 2 if the total coverage is less than the given number.\n        ignore_errors: Ignore errors while reading source files.\n        include: Include only files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        omit: Omit files whose paths match one of these patterns. Accepts shell-style wildcards, which must be quoted.\n        output: Write the JSON report to this file. Defaults to `coverage.json`.\n        quiet: Don't print messages about what is happening.\n        skip_empty: Skip files with no code.\n        debug_opts: Debug options, separated by commas [env: `COVERAGE_DEBUG`].\n    \"\"\"\n    cli_args = [\"xml\"]\n\n    if data_file:\n        cli_args.append(\"--data-file\")\n        cli_args.append(data_file)\n\n    if fail_under is not None:\n        cli_args.append(\"--fail-under\")\n        cli_args.append(str(fail_under))\n\n    if ignore_errors:\n        cli_args.append(\"--ignore-errors\")\n\n    if include:\n        cli_args.append(\"--include\")\n        cli_args.append(\",\".join(include))\n\n    if omit:\n        cli_args.append(\"--omit\")\n        cli_args.append(\",\".join(omit))\n\n    if output:\n        cli_args.append(\"-o\")\n        cli_args.append(output)\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if skip_empty:\n        cli_args.append(\"--skip-empty\")\n\n    if debug_opts:\n        cli_args.append(\"--debug\")\n        cli_args.append(\",\".join(debug_opts))\n\n    if rcfile:\n        cli_args.append(\"--rcfile\")\n        cli_args.append(rcfile)\n\n    _run(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/flake8/","title":"flake8","text":""},{"location":"reference/duty/callables/flake8/#duty.callables.flake8","title":"flake8","text":"<p>Callable for Flake8.</p> <p>Functions:</p> <ul> <li> <code>run</code>           \u2013            <p>Run <code>flake8</code>.</p> </li> </ul>"},{"location":"reference/duty/callables/flake8/#duty.callables.flake8.run","title":"run","text":"<pre><code>run(\n    *paths: str,\n    config: str | None = None,\n    verbose: bool | None = None,\n    output_file: str | None = None,\n    append_config: str | None = None,\n    isolated: bool | None = None,\n    enable_extensions: list[str] | None = None,\n    require_plugins: list[str] | None = None,\n    quiet: bool | None = None,\n    color: Literal[\"auto\", \"always\", \"never\"] | None = None,\n    count: bool | None = None,\n    exclude: list[str] | None = None,\n    extend_exclude: list[str] | None = None,\n    filename: list[str] | None = None,\n    stdin_display_name: str | None = None,\n    error_format: str | None = None,\n    hang_closing: bool | None = None,\n    ignore: list[str] | None = None,\n    extend_ignore: list[str] | None = None,\n    per_file_ignores: dict[str, list[str]] | None = None,\n    max_line_length: int | None = None,\n    max_doc_length: int | None = None,\n    indent_size: int | None = None,\n    select: list[str] | None = None,\n    extend_select: list[str] | None = None,\n    disable_noqa: bool | None = None,\n    show_source: bool | None = None,\n    no_show_source: bool | None = None,\n    statistics: bool | None = None,\n    exit_zero: bool | None = None,\n    jobs: int | None = None,\n    tee: bool | None = None,\n    benchmark: bool | None = None,\n    bug_report: bool | None = None\n) -&gt; int\n</code></pre> <p>Run <code>flake8</code>.</p> <p>Parameters:</p> <ul> <li> <code>*paths</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Paths to check.</p> </li> <li> <code>config</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Path to the config file that will be the authoritative config source. This will cause Flake8 to ignore all other configuration files.</p> </li> <li> <code>verbose</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Print more information about what is happening in flake8. This option is repeatable and will increase verbosity each time it is repeated.</p> </li> <li> <code>output_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Redirect report to a file.</p> </li> <li> <code>append_config</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Provide extra config files to parse in addition to the files found by Flake8 by default. These files are the last ones read and so they take the highest precedence when multiple files provide the same option.</p> </li> <li> <code>isolated</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore all configuration files.</p> </li> <li> <code>enable_extensions</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable plugins and extensions that are otherwise disabled by default.</p> </li> <li> <code>require_plugins</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Require specific plugins to be installed before running.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Report only file names, or nothing. This option is repeatable.</p> </li> <li> <code>color</code>             (<code>Literal['auto', 'always', 'never'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Whether to use color in output. Defaults to <code>auto</code>.</p> </li> <li> <code>count</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Print total number of errors to standard output and set the exit code to 1 if total is not empty.</p> </li> <li> <code>exclude</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Comma-separated list of files or directories to exclude (default: ['.svn', 'CVS', '.bzr', '.hg', '.git', 'pycache', '.tox', '.nox', '.eggs', '*.egg']).</p> </li> <li> <code>extend_exclude</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Comma-separated list of files or directories to add to the list of excluded ones.</p> </li> <li> <code>filename</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Only check for filenames matching the patterns in this comma-separated list (default: ['*.py']).</p> </li> <li> <code>stdin_display_name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8 (default: stdin).</p> </li> <li> <code>error_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Format errors according to the chosen formatter.</p> </li> <li> <code>hang_closing</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Hang closing bracket instead of matching indentation of opening bracket's line.</p> </li> <li> <code>ignore</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Comma-separated list of error codes to ignore (or skip). For example, <code>--ignore=E4,E51,W234</code> (default: E121,E123,E126,E226,E24,E704,W503,W504).</p> </li> <li> <code>extend_ignore</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Comma-separated list of error codes to add to the list of ignored ones. For example, <code>--extend-ignore=E4,E51,W234</code>.</p> </li> <li> <code>per_file_ignores</code>             (<code>dict[str, list[str]] | None</code>, default:                 <code>None</code> )         \u2013          <p>A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the <code>--exclude</code> option and the violations work similarly to the <code>--ignore</code> and <code>--select</code> options.</p> </li> <li> <code>max_line_length</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Maximum allowed line length for the entirety of this run (default: 79).</p> </li> <li> <code>max_doc_length</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Maximum allowed doc line length for the entirety of this run (default: None).</p> </li> <li> <code>indent_size</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of spaces used for indentation (default: 4).</p> </li> <li> <code>select</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Comma-separated list of error codes to enable. For example, <code>--select=E4,E51,W234</code> (default: E,F,W,C90).</p> </li> <li> <code>extend_select</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Comma-separated list of error codes to add to the list of selected ones. For example, <code>--extend-select=E4,E51,W234</code>.</p> </li> <li> <code>disable_noqa</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable the effect of \"# noqa\". This will report errors on lines with \"# noqa\" at the end.</p> </li> <li> <code>show_source</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show the source generate each error or warning.</p> </li> <li> <code>no_show_source</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Negate --show-source.</p> </li> <li> <code>statistics</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Count errors.</p> </li> <li> <code>exit_zero</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit with status code \"0\" even if there are errors.</p> </li> <li> <code>jobs</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, \"auto\", will auto-detect the number of processors available to use (default: auto).</p> </li> <li> <code>tee</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Write to stdout and output-file.</p> </li> <li> <code>benchmark</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Print benchmark information about this run of Flake8.</p> </li> <li> <code>bug_report</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Print information necessary when preparing a bug report.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>Success/failure.</p> </li> </ul> Source code in <code>src/duty/callables/flake8.py</code> <pre><code>@lazy(name=\"flake8\")\ndef run(\n    *paths: str,\n    config: str | None = None,\n    verbose: bool | None = None,\n    output_file: str | None = None,\n    append_config: str | None = None,\n    isolated: bool | None = None,\n    enable_extensions: list[str] | None = None,\n    require_plugins: list[str] | None = None,\n    quiet: bool | None = None,\n    color: Literal[\"auto\", \"always\", \"never\"] | None = None,\n    count: bool | None = None,\n    exclude: list[str] | None = None,\n    extend_exclude: list[str] | None = None,\n    filename: list[str] | None = None,\n    stdin_display_name: str | None = None,\n    error_format: str | None = None,\n    hang_closing: bool | None = None,\n    ignore: list[str] | None = None,\n    extend_ignore: list[str] | None = None,\n    per_file_ignores: dict[str, list[str]] | None = None,\n    max_line_length: int | None = None,\n    max_doc_length: int | None = None,\n    indent_size: int | None = None,\n    select: list[str] | None = None,\n    extend_select: list[str] | None = None,\n    disable_noqa: bool | None = None,\n    show_source: bool | None = None,\n    no_show_source: bool | None = None,\n    statistics: bool | None = None,\n    exit_zero: bool | None = None,\n    jobs: int | None = None,\n    tee: bool | None = None,\n    benchmark: bool | None = None,\n    bug_report: bool | None = None,\n) -&gt; int:\n    \"\"\"Run `flake8`.\n\n    Parameters:\n        *paths: Paths to check.\n        config: Path to the config file that will be the authoritative config source.\n            This will cause Flake8 to ignore all other configuration files.\n        verbose: Print more information about what is happening in flake8.\n            This option is repeatable and will increase verbosity each time it is repeated.\n        output_file: Redirect report to a file.\n        append_config: Provide extra config files to parse in addition to the files found by Flake8 by default.\n            These files are the last ones read and so they take the highest precedence when multiple files provide the same option.\n        isolated: Ignore all configuration files.\n        enable_extensions: Enable plugins and extensions that are otherwise disabled by default.\n        require_plugins: Require specific plugins to be installed before running.\n        quiet: Report only file names, or nothing. This option is repeatable.\n        color: Whether to use color in output. Defaults to `auto`.\n        count: Print total number of errors to standard output and set the exit code to 1 if total is not empty.\n        exclude: Comma-separated list of files or directories to exclude (default: ['.svn', 'CVS', '.bzr', '.hg', '.git', '__pycache__', '.tox', '.nox', '.eggs', '*.egg']).\n        extend_exclude: Comma-separated list of files or directories to add to the list of excluded ones.\n        filename: Only check for filenames matching the patterns in this comma-separated list (default: ['*.py']).\n        stdin_display_name: The name used when reporting errors from code passed via stdin. This is useful for editors piping the file contents to flake8 (default: stdin).\n        error_format: Format errors according to the chosen formatter.\n        hang_closing: Hang closing bracket instead of matching indentation of opening bracket's line.\n        ignore: Comma-separated list of error codes to ignore (or skip). For example, ``--ignore=E4,E51,W234`` (default: E121,E123,E126,E226,E24,E704,W503,W504).\n        extend_ignore: Comma-separated list of error codes to add to the list of ignored ones. For example, ``--extend-ignore=E4,E51,W234``.\n        per_file_ignores: A pairing of filenames and violation codes that defines which violations to ignore in a particular file. The filenames can be specified in a manner similar to the ``--exclude`` option and the violations work similarly to the ``--ignore`` and ``--select`` options.\n        max_line_length: Maximum allowed line length for the entirety of this run (default: 79).\n        max_doc_length: Maximum allowed doc line length for the entirety of this run (default: None).\n        indent_size: Number of spaces used for indentation (default: 4).\n        select: Comma-separated list of error codes to enable. For example, ``--select=E4,E51,W234`` (default: E,F,W,C90).\n        extend_select: Comma-separated list of error codes to add to the list of selected ones. For example, ``--extend-select=E4,E51,W234``.\n        disable_noqa: Disable the effect of \"# noqa\". This will report errors on lines with \"# noqa\" at the end.\n        show_source: Show the source generate each error or warning.\n        no_show_source: Negate --show-source.\n        statistics: Count errors.\n        exit_zero: Exit with status code \"0\" even if there are errors.\n        jobs: Number of subprocesses to use to run checks in parallel. This is ignored on Windows. The default, \"auto\", will auto-detect the number of processors available to use (default: auto).\n        tee: Write to stdout and output-file.\n        benchmark: Print benchmark information about this run of Flake8.\n        bug_report: Print information necessary when preparing a bug report.\n\n    Returns:\n        Success/failure.\n    \"\"\"\n    from flake8.main import main as flake8\n\n    cli_args = list(paths)\n\n    if verbose:\n        cli_args.append(\"--verbose\")\n\n    if output_file:\n        cli_args.append(\"--output-file\")\n        cli_args.append(output_file)\n\n    if append_config:\n        cli_args.append(\"--append-config\")\n        cli_args.append(append_config)\n\n    if config:\n        cli_args.append(\"--config\")\n        cli_args.append(config)\n\n    if isolated:\n        cli_args.append(\"--isolated\")\n\n    if enable_extensions:\n        cli_args.append(\"--enable-extensions\")\n        cli_args.append(\",\".join(enable_extensions))\n\n    if require_plugins:\n        cli_args.append(\"--require-plugins\")\n        cli_args.append(\",\".join(require_plugins))\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if color:\n        cli_args.append(\"--color\")\n        cli_args.append(color)\n\n    if count:\n        cli_args.append(\"--count\")\n\n    if exclude:\n        cli_args.append(\"--exclude\")\n        cli_args.append(\",\".join(exclude))\n\n    if extend_exclude:\n        cli_args.append(\"--extend-exclude\")\n        cli_args.append(\",\".join(extend_exclude))\n\n    if filename:\n        cli_args.append(\"--filename\")\n        cli_args.append(\",\".join(filename))\n\n    if stdin_display_name:\n        cli_args.append(\"--stdin-display-name\")\n        cli_args.append(stdin_display_name)\n\n    if error_format:\n        cli_args.append(\"--format\")\n        cli_args.append(error_format)\n\n    if hang_closing:\n        cli_args.append(\"--hang-closing\")\n\n    if ignore:\n        cli_args.append(\"--ignore\")\n        cli_args.append(\",\".join(ignore))\n\n    if extend_ignore:\n        cli_args.append(\"--extend-ignore\")\n        cli_args.append(\",\".join(extend_ignore))\n\n    if per_file_ignores:\n        cli_args.append(\"--per-file-ignores\")\n        cli_args.append(\n            \" \".join(f\"{path}:{','.join(codes)}\" for path, codes in per_file_ignores.items()),\n        )\n\n    if max_line_length:\n        cli_args.append(\"--max-line-length\")\n        cli_args.append(str(max_line_length))\n\n    if max_doc_length:\n        cli_args.append(\"--max-doc-length\")\n        cli_args.append(str(max_doc_length))\n\n    if indent_size:\n        cli_args.append(\"--indent-size\")\n        cli_args.append(str(indent_size))\n\n    if select:\n        cli_args.append(\"--select\")\n        cli_args.append(\",\".join(select))\n\n    if extend_select:\n        cli_args.append(\"--extend-select\")\n        cli_args.append(\",\".join(extend_select))\n\n    if disable_noqa:\n        cli_args.append(\"--disable-noqa\")\n\n    if show_source:\n        cli_args.append(\"--show-source\")\n\n    if no_show_source:\n        cli_args.append(\"--no-show-source\")\n\n    if statistics:\n        cli_args.append(\"--statistics\")\n\n    if exit_zero:\n        cli_args.append(\"--exit-zero\")\n\n    if jobs:\n        cli_args.append(\"--jobs\")\n        cli_args.append(str(jobs))\n\n    if tee:\n        cli_args.append(\"--tee\")\n\n    if benchmark:\n        cli_args.append(\"--benchmark\")\n\n    if bug_report:\n        cli_args.append(\"--bug-report\")\n\n    old_sys_argv = sys.argv\n    sys.argv = [\"flake*\", *cli_args]\n    try:\n        return flake8()\n    finally:\n        sys.argv = old_sys_argv\n</code></pre>"},{"location":"reference/duty/callables/interrogate/","title":"interrogate","text":""},{"location":"reference/duty/callables/interrogate/#duty.callables.interrogate","title":"interrogate","text":"<p>Callable for Interrogate.</p> <p>Functions:</p> <ul> <li> <code>run</code>           \u2013            <p>Run <code>interrogate</code>.</p> </li> </ul>"},{"location":"reference/duty/callables/interrogate/#duty.callables.interrogate.run","title":"run","text":"<pre><code>run(\n    *src: str,\n    verbose: int | None = None,\n    quiet: bool | None = None,\n    fail_under: float | None = None,\n    exclude: str | None = None,\n    ignore_init_method: bool | None = None,\n    ignore_init_module: bool | None = None,\n    ignore_magic: bool | None = None,\n    ignore_module: bool | None = None,\n    ignore_nested_functions: bool | None = None,\n    ignore_nested_classes: bool | None = None,\n    ignore_private: bool | None = None,\n    ignore_property_decorators: bool | None = None,\n    ignore_setters: bool | None = None,\n    ignore_semiprivate: bool | None = None,\n    ignore_regex: str | None = None,\n    whitelist_regex: str | None = None,\n    output: str | None = None,\n    config: str | None = None,\n    color: bool | None = None,\n    omit_covered_files: bool | None = None,\n    generate_badge: str | None = None,\n    badge_format: Literal[\"png\", \"svg\"] | None = None,\n    badge_style: _BADGE_STYLE | None = None\n) -&gt; None\n</code></pre> <p>Run <code>interrogate</code>.</p> <p>Parameters:</p> <ul> <li> <code>src</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Format the directories and file paths.</p> </li> <li> <code>verbose</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Level of verbosity.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Do not print output.</p> </li> <li> <code>fail_under</code>             (<code>float | None</code>, default:                 <code>None</code> )         \u2013          <p>Fail when coverage % is less than a given amount.</p> </li> <li> <code>exclude</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Exclude PATHs of files and/or directories.</p> </li> <li> <code>ignore_init_method</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore <code>__init__</code> method of classes.</p> </li> <li> <code>ignore_init_module</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore <code>__init__.py</code> modules.</p> </li> <li> <code>ignore_magic</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore all magic methods of classes.</p> </li> <li> <code>ignore_module</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore module-level docstrings.</p> </li> <li> <code>ignore_nested_functions</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore nested functions and methods.</p> </li> <li> <code>ignore_nested_classes</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore nested classes.</p> </li> <li> <code>ignore_private</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore private classes, methods, and functions starting with two underscores.</p> </li> <li> <code>ignore_property_decorators</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore methods with property setter/getter decorators.</p> </li> <li> <code>ignore_setters</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore methods with property setter decorators.</p> </li> <li> <code>ignore_semiprivate</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore semiprivate classes, methods, and functions starting with a single underscore.</p> </li> <li> <code>ignore_regex</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Regex identifying class, method, and function names to ignore.</p> </li> <li> <code>whitelist_regex</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Regex identifying class, method, and function names to include.</p> </li> <li> <code>output</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Write output to a given FILE.</p> </li> <li> <code>config</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Read configuration from pyproject.toml or setup.cfg.</p> </li> <li> <code>color</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Toggle color output on/off when printing to stdout.</p> </li> <li> <code>omit_covered_files</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Omit reporting files that have 100% documentation coverage.</p> </li> <li> <code>generate_badge</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Generate a shields.io status badge (an SVG image) in at a given file or directory.</p> </li> <li> <code>badge_format</code>             (<code>Literal['png', 'svg'] | None</code>, default:                 <code>None</code> )         \u2013          <p>File format for the generated badge.</p> </li> <li> <code>badge_style</code>             (<code>_BADGE_STYLE | None</code>, default:                 <code>None</code> )         \u2013          <p>Desired style of shields.io badge.</p> </li> </ul> Source code in <code>src/duty/callables/interrogate.py</code> <pre><code>@lazy(name=\"interrogate\")\ndef run(\n    *src: str,\n    verbose: int | None = None,\n    quiet: bool | None = None,\n    fail_under: float | None = None,\n    exclude: str | None = None,\n    ignore_init_method: bool | None = None,\n    ignore_init_module: bool | None = None,\n    ignore_magic: bool | None = None,\n    ignore_module: bool | None = None,\n    ignore_nested_functions: bool | None = None,\n    ignore_nested_classes: bool | None = None,\n    ignore_private: bool | None = None,\n    ignore_property_decorators: bool | None = None,\n    ignore_setters: bool | None = None,\n    ignore_semiprivate: bool | None = None,\n    ignore_regex: str | None = None,\n    whitelist_regex: str | None = None,\n    output: str | None = None,\n    config: str | None = None,\n    color: bool | None = None,\n    omit_covered_files: bool | None = None,\n    generate_badge: str | None = None,\n    badge_format: Literal[\"png\", \"svg\"] | None = None,\n    badge_style: _BADGE_STYLE | None = None,\n) -&gt; None:\n    \"\"\"Run `interrogate`.\n\n    Args:\n        src: Format the directories and file paths.\n        verbose: Level of verbosity.\n        quiet: Do not print output.\n        fail_under: Fail when coverage % is less than a given amount.\n        exclude: Exclude PATHs of files and/or directories.\n        ignore_init_method: Ignore `__init__` method of classes.\n        ignore_init_module: Ignore `__init__.py` modules.\n        ignore_magic: Ignore all magic methods of classes.\n        ignore_module: Ignore module-level docstrings.\n        ignore_nested_functions: Ignore nested functions and methods.\n        ignore_nested_classes: Ignore nested classes.\n        ignore_private: Ignore private classes, methods, and functions starting with two underscores.\n        ignore_property_decorators: Ignore methods with property setter/getter decorators.\n        ignore_setters: Ignore methods with property setter decorators.\n        ignore_semiprivate: Ignore semiprivate classes, methods, and functions starting with a single underscore.\n        ignore_regex: Regex identifying class, method, and function names to ignore.\n        whitelist_regex: Regex identifying class, method, and function names to include.\n        output: Write output to a given FILE.\n        config: Read configuration from pyproject.toml or setup.cfg.\n        color: Toggle color output on/off when printing to stdout.\n        omit_covered_files: Omit reporting files that have 100% documentation coverage.\n        generate_badge: Generate a shields.io status badge (an SVG image) in at a given file or directory.\n        badge_format: File format for the generated badge.\n        badge_style: Desired style of shields.io badge.\n    \"\"\"\n    from interrogate.cli import main as interrogate\n\n    cli_args: list[str] = list(src)\n\n    if verbose:\n        cli_args.append(\"--verbose\")\n        cli_args.append(str(verbose))\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if fail_under:\n        cli_args.append(\"--fail-under\")\n        cli_args.append(str(fail_under))\n\n    if exclude:\n        cli_args.append(\"--exclude\")\n        cli_args.append(exclude)\n\n    if ignore_init_method:\n        cli_args.append(\"--ignore-init-method\")\n\n    if ignore_init_module:\n        cli_args.append(\"--ignore-init-module\")\n\n    if ignore_magic:\n        cli_args.append(\"--ignore-magic\")\n\n    if ignore_module:\n        cli_args.append(\"--ignore-module\")\n\n    if ignore_nested_functions:\n        cli_args.append(\"--ignore-nested-functions\")\n\n    if ignore_nested_classes:\n        cli_args.append(\"--ignore-nested-classes\")\n\n    if ignore_private:\n        cli_args.append(\"--ignore-private\")\n\n    if ignore_property_decorators:\n        cli_args.append(\"--ignore-property-decorators\")\n\n    if ignore_setters:\n        cli_args.append(\"--ignore-setters\")\n\n    if ignore_semiprivate:\n        cli_args.append(\"--ignore-semiprivate\")\n\n    if ignore_regex:\n        cli_args.append(\"--ignore-regex\")\n        cli_args.append(ignore_regex)\n\n    if whitelist_regex:\n        cli_args.append(\"--whitelist-regex\")\n        cli_args.append(whitelist_regex)\n\n    if output:\n        cli_args.append(\"--output\")\n        cli_args.append(output)\n\n    if omit_covered_files:\n        cli_args.append(\"--omit-covered-files\")\n\n    if generate_badge:\n        cli_args.append(\"--generate-badge\")\n        cli_args.append(generate_badge)\n\n    if badge_format:\n        cli_args.append(\"--badge-format\")\n        cli_args.append(badge_format)\n\n    if badge_style:\n        cli_args.append(\"--badge-style\")\n        cli_args.append(badge_style)\n\n    if config:\n        cli_args.append(\"--config\")\n        cli_args.append(config)\n\n    if color is True:\n        cli_args.append(\"--color\")\n    elif color is False:\n        cli_args.append(\"--no-color\")\n\n    interrogate(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/isort/","title":"isort","text":""},{"location":"reference/duty/callables/isort/#duty.callables.isort","title":"isort","text":"<p>Callable for isort.</p> <p>Functions:</p> <ul> <li> <code>run</code>           \u2013            <p>Run <code>isort</code>.</p> </li> </ul>"},{"location":"reference/duty/callables/isort/#duty.callables.isort.run","title":"run","text":"<pre><code>run(\n    *files: str,\n    settings: str | None = None,\n    verbose: bool | None = None,\n    only_modified: bool | None = None,\n    dedup_headings: bool | None = None,\n    quiet: bool | None = None,\n    stdout: bool | None = None,\n    overwrite_in_place: bool | None = None,\n    show_config: bool | None = None,\n    show_files: bool | None = None,\n    diff: bool | None = None,\n    check: bool | None = None,\n    ignore_whitespace: bool | None = None,\n    config_root: str | None = None,\n    resolve_all_configs: bool | None = None,\n    profile: str | None = None,\n    jobs: int | None = None,\n    atomic: bool | None = None,\n    interactive: bool | None = None,\n    format_error: str | None = None,\n    format_success: str | None = None,\n    sort_reexports: bool | None = None,\n    filter_files: bool | None = None,\n    skip: list[str] | None = None,\n    extend_skip: list[str] | None = None,\n    skip_glob: list[str] | None = None,\n    extend_skip_glob: list[str] | None = None,\n    skip_gitignore: bool | None = None,\n    supported_extension: list[str] | None = None,\n    blocked_extension: list[str] | None = None,\n    dont_follow_links: bool | None = None,\n    filename: str | None = None,\n    allow_root: bool | None = None,\n    add_import: str | None = None,\n    append_only: bool | None = None,\n    force_adds: bool | None = None,\n    remove_import: str | None = None,\n    float_to_top: bool | None = None,\n    dont_float_to_top: bool | None = None,\n    combine_as: bool | None = None,\n    combine_star: bool | None = None,\n    balanced: bool | None = None,\n    from_first: bool | None = None,\n    force_grid_wrap: int | None = None,\n    indent: str | None = None,\n    lines_before_imports: int | None = None,\n    lines_after_imports: int | None = None,\n    lines_between_types: int | None = None,\n    line_ending: str | None = None,\n    length_sort: bool | None = None,\n    length_sort_straight: bool | None = None,\n    multi_line: Multiline | None = None,\n    ensure_newline_before_comments: bool | None = None,\n    no_inline_sort: bool | None = None,\n    order_by_type: bool | None = None,\n    dont_order_by_type: bool | None = None,\n    reverse_relative: bool | None = None,\n    reverse_sort: bool | None = None,\n    sort_order: Literal[\"natural\", \"native\"] | None = None,\n    force_single_line_imports: bool | None = None,\n    single_line_exclusions: list[str] | None = None,\n    trailing_comma: bool | None = None,\n    use_parentheses: bool | None = None,\n    line_length: int | None = None,\n    wrap_length: int | None = None,\n    case_sensitive: bool | None = None,\n    remove_redundant_aliases: bool | None = None,\n    honor_noqa: bool | None = None,\n    treat_comment_as_code: str | None = None,\n    treat_all_comment_as_code: bool | None = None,\n    formatter: str | None = None,\n    color: bool | None = None,\n    ext_format: str | None = None,\n    star_first: bool | None = None,\n    split_on_trailing_comma: bool | None = None,\n    section_default: Literal[\n        \"FUTURE\",\n        \"STDLIB\",\n        \"THIRDPARTY\",\n        \"FIRSTPARTY\",\n        \"LOCALFOLDER\",\n    ]\n    | None = None,\n    only_sections: bool | None = None,\n    no_sections: bool | None = None,\n    force_alphabetical_sort: bool | None = None,\n    force_sort_within_sections: bool | None = None,\n    honor_case_in_force_sorted_sections: bool | None = None,\n    sort_relative_in_force_sorted_sections: bool\n    | None = None,\n    force_alphabetical_sort_within_sections: bool\n    | None = None,\n    top: str | None = None,\n    combine_straight_imports: bool | None = None,\n    no_lines_before: list[str] | None = None,\n    src_path: list[str] | None = None,\n    builtin: str | None = None,\n    extra_builtin: str | None = None,\n    future: str | None = None,\n    thirdparty: str | None = None,\n    project: str | None = None,\n    known_local_folder: str | None = None,\n    virtual_env: str | None = None,\n    conda_env: str | None = None,\n    python_version: Literal[\n        \"all\",\n        \"2\",\n        \"27\",\n        \"3\",\n        \"36\",\n        \"37\",\n        \"38\",\n        \"39\",\n        \"310\",\n        \"311\",\n        \"auto\",\n    ]\n    | None = None\n) -&gt; None\n</code></pre> <p>Run <code>isort</code>.</p> <p>Sort Python import definitions alphabetically within logical sections. Run with no arguments to see a quick start guide, otherwise, one or more files/directories/stdin must be provided. Use <code>-</code> as the first argument to represent stdin. Use --interactive to use the pre 5.0.0 interactive behavior. If you've used isort 4 but are new to isort 5, see the upgrading guide: https://pycqa.github.io/isort/docs/upgrade_guides/5.0.0.html.</p> <p>Parameters:</p> <ul> <li> <code>*files</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>One or more Python source files that need their imports sorted.</p> </li> <li> <code>settings</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Explicitly set the settings path or file instead of auto determining based on file location.</p> </li> <li> <code>verbose</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Shows verbose output, such as when files are skipped or when a check is successful.</p> </li> <li> <code>only_modified</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Suppresses verbose output for non-modified files.</p> </li> <li> <code>dedup_headings</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to only show an identical custom import heading comment once, even if there are multiple sections with the comment set.</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Shows extra quiet output, only errors are outputted.</p> </li> <li> <code>stdout</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Force resulting output to stdout, instead of in-place.</p> </li> <li> <code>overwrite_in_place</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to overwrite in place using the same file handle. Comes at a performance and memory usage penalty over its standard approach but ensures all file flags and modes stay unchanged.</p> </li> <li> <code>show_config</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>See isort's determined config, as well as sources of config options.</p> </li> <li> <code>show_files</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>See the files isort will be run against with the current config options.</p> </li> <li> <code>diff</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Prints a diff of all the changes isort would make to a file, instead of changing it in place</p> </li> <li> <code>check</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Checks the file for unsorted / unformatted imports and prints them to the command line without modifying the file. Returns 0 when nothing would change and returns 1 when the file would be reformatted.</p> </li> <li> <code>ignore_whitespace</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to ignore whitespace differences when --check-only is being used.</p> </li> <li> <code>config_root</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Explicitly set the config root for resolving all configs. When used with the --resolve-all-configs flag, isort will look at all sub-folders in this config root to resolve config files and sort files based on the closest available config(if any)</p> </li> <li> <code>resolve_all_configs</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to resolve the configs for all sub-directories and sort files in terms of its closest config files.</p> </li> <li> <code>profile</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Base profile type to use for configuration. Profiles include: black, django, pycharm, google, open_stack, plone, attrs, hug, wemake, appnexus. As well as any shared profiles.</p> </li> <li> <code>jobs</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of files to process in parallel. Negative value means use number of CPUs.</p> </li> <li> <code>atomic</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ensures the output doesn't save if the resulting file contains syntax errors.</p> </li> <li> <code>interactive</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to apply changes interactively.</p> </li> <li> <code>format_error</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Override the format used to print errors.</p> </li> <li> <code>format_success</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Override the format used to print success.</p> </li> <li> <code>sort_reexports</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Automatically sort all re-exports (module level all collections)</p> </li> <li> <code>filter_files</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to filter files even when they are explicitly passed in as part of the CLI command.</p> </li> <li> <code>skip</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Files that isort should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. Values can be file names, directory names or file paths. To skip all files in a nested path use --skip-glob.</p> </li> <li> <code>extend_skip</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Extends --skip to add additional files that isort should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. Values can be file names, directory names or file paths. To skip all files in a nested path use --skip-glob.</p> </li> <li> <code>skip_glob</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Files that isort should skip over.</p> </li> <li> <code>extend_skip_glob</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional files that isort should skip over (extending --skip-glob).</p> </li> <li> <code>skip_gitignore</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Treat project as a git repository and ignore files listed in .gitignore. NOTE: This requires git to be installed and accessible from the same shell as isort.</p> </li> <li> <code>supported_extension</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Specifies what extensions isort can be run against.</p> </li> <li> <code>blocked_extension</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Specifies what extensions isort can never be run against.</p> </li> <li> <code>dont_follow_links</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort not to follow symlinks that are encountered when running recursively.</p> </li> <li> <code>filename</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Provide the filename associated with a stream.</p> </li> <li> <code>allow_root</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort not to treat / specially, allowing it to be run against the root dir.</p> </li> <li> <code>add_import</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Adds the specified import line to all files, automatically determining correct placement.</p> </li> <li> <code>append_only</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Only adds the imports specified in --add-import if the file contains existing imports.</p> </li> <li> <code>force_adds</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Forces import adds even if the original file is empty.</p> </li> <li> <code>remove_import</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Removes the specified import from all files.</p> </li> <li> <code>float_to_top</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Causes all non-indented imports to float to the top of the file having its imports sorted (immediately below the top of file comment). This can be an excellent shortcut for collecting imports every once in a while when you place them in the middle of a file to avoid context switching. NOTE: It currently doesn't work with cimports and introduces some extra over-head and a performance penalty.</p> </li> <li> <code>dont_float_to_top</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Forces --float-to-top setting off. See --float-to-top for more information.</p> </li> <li> <code>combine_as</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Combines as imports on the same line.</p> </li> <li> <code>combine_star</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ensures that if a star import is present, nothing else is imported from that namespace.</p> </li> <li> <code>balanced</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Balances wrapping to produce the most consistent line length possible</p> </li> <li> <code>from_first</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Switches the typical ordering preference, showing from imports first then straight ones.</p> </li> <li> <code>force_grid_wrap</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Force number of from imports (defaults to 2 when passed as CLI flag without value) to be grid wrapped regardless of line length. If 0 is passed in (the global default) only line length is considered.</p> </li> <li> <code>indent</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>String to place for indents defaults to \" \" (4 spaces).</p> </li> <li> <code>lines_before_imports</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of lines to insert before imports.</p> </li> <li> <code>lines_after_imports</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of lines to insert after imports.</p> </li> <li> <code>lines_between_types</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Number of lines to insert between imports.</p> </li> <li> <code>line_ending</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Forces line endings to the specified value. If not set, values will be guessed per-file.</p> </li> <li> <code>length_sort</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Sort imports by their string length.</p> </li> <li> <code>length_sort_straight</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Sort straight imports by their string length. Similar to <code>length_sort</code> but applies only to straight imports and doesn't affect from imports.</p> </li> <li> <code>multi_line</code>             (<code>Multiline | None</code>, default:                 <code>None</code> )         \u2013          <p>Multi line output (0-grid, 1-vertical, 2-hanging, 3-vert-hanging, 4-vert-grid, 5-vert-grid-grouped, 6-deprecated-alias-for-5, 7-noqa, 8-vertical-hanging-indent-bracket, 9-vertical-prefix-from- module-import, 10-hanging-indent-with-parentheses).</p> </li> <li> <code>ensure_newline_before_comments</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Inserts a blank line before a comment following an import.</p> </li> <li> <code>no_inline_sort</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Leaves <code>from</code> imports with multiple imports 'as-is' (e.g. <code>from foo import a, c ,b</code>).</p> </li> <li> <code>order_by_type</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Order imports by type, which is determined by case, in addition to alphabetically. NOTE: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default, otherwise you likely will want to turn it off. From the CLI the <code>--dont-order-by-type</code> option will turn this off.</p> </li> <li> <code>dont_order_by_type</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't order imports by type, which is determined by case, in addition to alphabetically. NOTE: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default. You can turn this on from the CLI using <code>--order-by-type</code>.</p> </li> <li> <code>reverse_relative</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Reverse order of relative imports.</p> </li> <li> <code>reverse_sort</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Reverses the ordering of imports.</p> </li> <li> <code>sort_order</code>             (<code>Literal['natural', 'native'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify sorting function. Can be built in (natural[default] = force numbers to be sequential, native = Python's built-in sorted function) or an installable plugin.</p> </li> <li> <code>force_single_line_imports</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Forces all from imports to appear on their own line</p> </li> <li> <code>single_line_exclusions</code>             (<code>EXCLUSIONS</code>, default:                 <code>None</code> )         \u2013          <p>One or more modules to exclude from the single line rule.</p> </li> <li> <code>trailing_comma</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Includes a trailing comma on multi line imports that include parentheses.</p> </li> <li> <code>use_parentheses</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use parentheses for line continuation on length limit instead of slashes. NOTE: This is separate from wrap modes, and only affects how individual lines that are too long get continued, not sections of multiple imports.</p> </li> <li> <code>line_length</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>The max length of an import line (used for wrapping long imports).</p> </li> <li> <code>wrap_length</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Specifies how long lines that are wrapped should be, if not set line_length is used. NOTE: wrap_length must be LOWER than or equal to line_length.</p> </li> <li> <code>case_sensitive</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to include casing when sorting module names</p> </li> <li> <code>remove_redundant_aliases</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to remove redundant aliases from imports, such as <code>import os as os</code>. This defaults to <code>False</code> simply because some projects use these seemingly useless aliases to signify intent and change behaviour.</p> </li> <li> <code>honor_noqa</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to honor noqa comments to enforce skipping those comments.</p> </li> <li> <code>treat_comment_as_code</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to treat the specified single line comment(s) as if they are code.</p> </li> <li> <code>treat_all_comment_as_code</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to treat all single line comments as if they are code.</p> </li> <li> <code>formatter</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specifies the name of a formatting plugin to use when producing output.</p> </li> <li> <code>color</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to use color in terminal output.</p> </li> <li> <code>ext_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to format the given files according to an extensions formatting rules.</p> </li> <li> <code>star_first</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Forces star imports above others to avoid overriding directly imported variables.</p> </li> <li> <code>split_on_trailing_comma</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Split imports list followed by a trailing comma into VERTICAL_HANGING_INDENT mode</p> </li> <li> <code>section_default</code>             (<code>Literal['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Sets the default section for import options: ('FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER')</p> </li> <li> <code>only_sections</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Causes imports to be sorted based on their sections like STDLIB, THIRDPARTY, etc. Within sections, the imports are ordered by their import style and the imports with the same style maintain their relative positions.</p> </li> <li> <code>no_sections</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Put all imports into the same section bucket</p> </li> <li> <code>force_alphabetical_sort</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Force all imports to be sorted as a single section</p> </li> <li> <code>force_sort_within_sections</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style.</p> </li> <li> <code>honor_case_in_force_sorted_sections</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Honor <code>--case-sensitive</code> when <code>--force-sort-within-sections</code> is being used. Without this option set, <code>--order-by-type</code> decides module name ordering too.</p> </li> <li> <code>sort_relative_in_force_sorted_sections</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>When using <code>--force-sort-within-sections</code>, sort relative imports the same way as they are sorted when not using that setting.</p> </li> <li> <code>force_alphabetical_sort_within_sections</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Force all imports to be sorted alphabetically within a section</p> </li> <li> <code>top</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Force specific imports to the top of their appropriate section.</p> </li> <li> <code>combine_straight_imports</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Combines all the bare straight imports of the same section in a single line. Won't work with sections which have 'as' imports</p> </li> <li> <code>no_lines_before</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Sections which should not be split with previous by empty lines</p> </li> <li> <code>src_path</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Add an explicitly defined source path (modules within src paths have their imports automatically categorized as first_party). Glob expansion (<code>*</code> and <code>**</code>) is supported for this option.</p> </li> <li> <code>builtin</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Force isort to recognize a module as part of Python's standard library.</p> </li> <li> <code>extra_builtin</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Extra modules to be included in the list of ones in Python's standard library.</p> </li> <li> <code>future</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Force isort to recognize a module as part of Python's internal future compatibility libraries. WARNING: this overrides the behavior of future handling and therefore can result in code that can't execute. If you're looking to add dependencies such as six, a better option is to create another section below --future using custom sections. See: https://github.com/PyCQA/isort#custom- sections-and-ordering and the discussion here: https://github.com/PyCQA/isort/issues/1463.</p> </li> <li> <code>thirdparty</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Force isort to recognize a module as being part of a third party library.</p> </li> <li> <code>project</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Force isort to recognize a module as being part of the current python project.</p> </li> <li> <code>known_local_folder</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Force isort to recognize a module as being a local folder. Generally, this is reserved for relative imports (from . import module).</p> </li> <li> <code>virtual_env</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Virtual environment to use for determining whether a package is third-party</p> </li> <li> <code>conda_env</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Conda environment to use for determining whether a package is third-party</p> </li> <li> <code>python_version</code>             (<code>Literal['all', '2', '27', '3', '36', '37', '38', '39', '310', '311', 'auto'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Tells isort to set the known standard library based on the specified Python version. Default is to assume any Python 3 version could be the target, and use a union of all stdlib modules across versions. If auto is specified, the version of the interpreter used to run isort (currently: 311) will be used.</p> </li> </ul> Source code in <code>src/duty/callables/isort.py</code> <pre><code>@lazy(name=\"isort\")\ndef run(\n    *files: str,\n    settings: str | None = None,\n    verbose: bool | None = None,\n    only_modified: bool | None = None,\n    dedup_headings: bool | None = None,\n    quiet: bool | None = None,\n    stdout: bool | None = None,\n    overwrite_in_place: bool | None = None,\n    show_config: bool | None = None,\n    show_files: bool | None = None,\n    diff: bool | None = None,\n    check: bool | None = None,\n    ignore_whitespace: bool | None = None,\n    config_root: str | None = None,\n    resolve_all_configs: bool | None = None,\n    profile: str | None = None,\n    jobs: int | None = None,\n    atomic: bool | None = None,\n    interactive: bool | None = None,\n    format_error: str | None = None,\n    format_success: str | None = None,\n    sort_reexports: bool | None = None,\n    filter_files: bool | None = None,\n    skip: list[str] | None = None,\n    extend_skip: list[str] | None = None,\n    skip_glob: list[str] | None = None,\n    extend_skip_glob: list[str] | None = None,\n    skip_gitignore: bool | None = None,\n    supported_extension: list[str] | None = None,\n    blocked_extension: list[str] | None = None,\n    dont_follow_links: bool | None = None,\n    filename: str | None = None,\n    allow_root: bool | None = None,\n    add_import: str | None = None,\n    append_only: bool | None = None,\n    force_adds: bool | None = None,\n    remove_import: str | None = None,\n    float_to_top: bool | None = None,\n    dont_float_to_top: bool | None = None,\n    combine_as: bool | None = None,\n    combine_star: bool | None = None,\n    balanced: bool | None = None,\n    from_first: bool | None = None,\n    force_grid_wrap: int | None = None,\n    indent: str | None = None,\n    lines_before_imports: int | None = None,\n    lines_after_imports: int | None = None,\n    lines_between_types: int | None = None,\n    line_ending: str | None = None,\n    length_sort: bool | None = None,\n    length_sort_straight: bool | None = None,\n    multi_line: Multiline | None = None,\n    ensure_newline_before_comments: bool | None = None,\n    no_inline_sort: bool | None = None,\n    order_by_type: bool | None = None,\n    dont_order_by_type: bool | None = None,\n    reverse_relative: bool | None = None,\n    reverse_sort: bool | None = None,\n    sort_order: Literal[\"natural\", \"native\"] | None = None,\n    force_single_line_imports: bool | None = None,\n    single_line_exclusions: list[str] | None = None,\n    trailing_comma: bool | None = None,\n    use_parentheses: bool | None = None,\n    line_length: int | None = None,\n    wrap_length: int | None = None,\n    case_sensitive: bool | None = None,\n    remove_redundant_aliases: bool | None = None,\n    honor_noqa: bool | None = None,\n    treat_comment_as_code: str | None = None,\n    treat_all_comment_as_code: bool | None = None,\n    formatter: str | None = None,\n    color: bool | None = None,\n    ext_format: str | None = None,\n    star_first: bool | None = None,\n    split_on_trailing_comma: bool | None = None,\n    section_default: Literal[\"FUTURE\", \"STDLIB\", \"THIRDPARTY\", \"FIRSTPARTY\", \"LOCALFOLDER\"] | None = None,\n    only_sections: bool | None = None,\n    no_sections: bool | None = None,\n    force_alphabetical_sort: bool | None = None,\n    force_sort_within_sections: bool | None = None,\n    honor_case_in_force_sorted_sections: bool | None = None,\n    sort_relative_in_force_sorted_sections: bool | None = None,\n    force_alphabetical_sort_within_sections: bool | None = None,\n    top: str | None = None,\n    combine_straight_imports: bool | None = None,\n    no_lines_before: list[str] | None = None,\n    src_path: list[str] | None = None,\n    builtin: str | None = None,\n    extra_builtin: str | None = None,\n    future: str | None = None,\n    thirdparty: str | None = None,\n    project: str | None = None,\n    known_local_folder: str | None = None,\n    virtual_env: str | None = None,\n    conda_env: str | None = None,\n    python_version: Literal[\"all\", \"2\", \"27\", \"3\", \"36\", \"37\", \"38\", \"39\", \"310\", \"311\", \"auto\"] | None = None,\n) -&gt; None:\n    \"\"\"Run `isort`.\n\n    Sort Python import definitions alphabetically within logical sections.\n    Run with no arguments to see a quick start guide, otherwise, one or more files/directories/stdin must be provided.\n    Use `-` as the first argument to represent stdin. Use --interactive to use the pre 5.0.0 interactive behavior.\n    If you've used isort 4 but are new to isort 5, see the upgrading guide:\n    https://pycqa.github.io/isort/docs/upgrade_guides/5.0.0.html.\n\n    Parameters:\n        *files: One or more Python source files that need their imports sorted.\n        settings: Explicitly set the settings path or file instead of auto determining based on file location.\n        verbose: Shows verbose output, such as when files are skipped or when a check is successful.\n        only_modified: Suppresses verbose output for non-modified files.\n        dedup_headings: Tells isort to only show an identical custom import heading comment once, even if there are multiple sections with the comment set.\n        quiet: Shows extra quiet output, only errors are outputted.\n        stdout: Force resulting output to stdout, instead of in-place.\n        overwrite_in_place: Tells isort to overwrite in place using the same file handle. Comes at a performance and memory usage penalty over its standard approach but ensures all file flags and modes stay unchanged.\n        show_config: See isort's determined config, as well as sources of config options.\n        show_files: See the files isort will be run against with the current config options.\n        diff: Prints a diff of all the changes isort would make to a file, instead of changing it in place\n        check: Checks the file for unsorted / unformatted imports and prints them to the command line without modifying the file. Returns 0 when nothing would change and returns 1 when the file would be reformatted.\n        ignore_whitespace: Tells isort to ignore whitespace differences when --check-only is being used.\n        config_root: Explicitly set the config root for resolving all configs. When used with the --resolve-all-configs flag, isort will look at all sub-folders in this config root to resolve config files and sort files based on the closest available config(if any)\n        resolve_all_configs: Tells isort to resolve the configs for all sub-directories and sort files in terms of its closest config files.\n        profile: Base profile type to use for configuration. Profiles include: black, django, pycharm, google, open_stack, plone, attrs, hug, wemake, appnexus. As well as any shared profiles.\n        jobs: Number of files to process in parallel. Negative value means use number of CPUs.\n        atomic: Ensures the output doesn't save if the resulting file contains syntax errors.\n        interactive: Tells isort to apply changes interactively.\n        format_error: Override the format used to print errors.\n        format_success: Override the format used to print success.\n        sort_reexports: Automatically sort all re-exports (module level __all__ collections)\n        filter_files: Tells isort to filter files even when they are explicitly passed in as part of the CLI command.\n        skip: Files that isort should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. Values can be file names, directory names or file paths. To skip all files in a nested path use --skip-glob.\n        extend_skip: Extends --skip to add additional files that isort should skip over. If you want to skip multiple files you should specify twice: --skip file1 --skip file2. Values can be file names, directory names or file paths. To skip all files in a nested path use --skip-glob.\n        skip_glob: Files that isort should skip over.\n        extend_skip_glob: Additional files that isort should skip over (extending --skip-glob).\n        skip_gitignore: Treat project as a git repository and ignore files listed in .gitignore. NOTE: This requires git to be installed and accessible from the same shell as isort.\n        supported_extension: Specifies what extensions isort can be run against.\n        blocked_extension: Specifies what extensions isort can never be run against.\n        dont_follow_links: Tells isort not to follow symlinks that are encountered when running recursively.\n        filename: Provide the filename associated with a stream.\n        allow_root: Tells isort not to treat / specially, allowing it to be run against the root dir.\n        add_import: Adds the specified import line to all files, automatically determining correct placement.\n        append_only: Only adds the imports specified in --add-import if the file contains existing imports.\n        force_adds: Forces import adds even if the original file is empty.\n        remove_import: Removes the specified import from all files.\n        float_to_top: Causes all non-indented imports to float to the top of the file having its imports sorted (immediately below the top of file comment). This can be an excellent shortcut for collecting imports every once in a while when you place them in the middle of a file to avoid context switching. *NOTE*: It currently doesn't work with cimports and introduces some extra over-head and a performance penalty.\n        dont_float_to_top: Forces --float-to-top setting off. See --float-to-top for more information.\n        combine_as: Combines as imports on the same line.\n        combine_star: Ensures that if a star import is present, nothing else is imported from that namespace.\n        balanced: Balances wrapping to produce the most consistent line length possible\n        from_first: Switches the typical ordering preference, showing from imports first then straight ones.\n        force_grid_wrap: Force number of from imports (defaults to 2 when passed as CLI flag without value) to be grid wrapped regardless of line length. If 0 is passed in (the global default) only line length is considered.\n        indent: String to place for indents defaults to \" \" (4 spaces).\n        lines_before_imports: Number of lines to insert before imports.\n        lines_after_imports: Number of lines to insert after imports.\n        lines_between_types: Number of lines to insert between imports.\n        line_ending: Forces line endings to the specified value. If not set, values will be guessed per-file.\n        length_sort: Sort imports by their string length.\n        length_sort_straight: Sort straight imports by their string length. Similar to `length_sort` but applies only to straight imports and doesn't affect from imports.\n        multi_line: Multi line output (0-grid, 1-vertical, 2-hanging, 3-vert-hanging, 4-vert-grid, 5-vert-grid-grouped, 6-deprecated-alias-for-5, 7-noqa, 8-vertical-hanging-indent-bracket, 9-vertical-prefix-from- module-import, 10-hanging-indent-with-parentheses).\n        ensure_newline_before_comments: Inserts a blank line before a comment following an import.\n        no_inline_sort: Leaves `from` imports with multiple imports 'as-is' (e.g. `from foo import a, c ,b`).\n        order_by_type: Order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default, otherwise you likely will want to turn it off. From the CLI the `--dont-order-by-type` option will turn this off.\n        dont_order_by_type: Don't order imports by type, which is determined by case, in addition to alphabetically. **NOTE**: type here refers to the implied type from the import name capitalization. isort does not do type introspection for the imports. These \"types\" are simply: CONSTANT_VARIABLE, CamelCaseClass, variable_or_function. If your project follows PEP8 or a related coding standard and has many imports this is a good default. You can turn this on from the CLI using `--order-by-type`.\n        reverse_relative: Reverse order of relative imports.\n        reverse_sort: Reverses the ordering of imports.\n        sort_order: Specify sorting function. Can be built in (natural[default] = force numbers to be sequential, native = Python's built-in sorted function) or an installable plugin.\n        force_single_line_imports: Forces all from imports to appear on their own line\n        single_line_exclusions EXCLUSIONS: One or more modules to exclude from the single line rule.\n        trailing_comma: Includes a trailing comma on multi line imports that include parentheses.\n        use_parentheses: Use parentheses for line continuation on length limit instead of slashes. **NOTE**: This is separate from wrap modes, and only affects how individual lines that are too long get continued, not sections of multiple imports.\n        line_length: The max length of an import line (used for wrapping long imports).\n        wrap_length: Specifies how long lines that are wrapped should be, if not set line_length is used. NOTE: wrap_length must be LOWER than or equal to line_length.\n        case_sensitive: Tells isort to include casing when sorting module names\n        remove_redundant_aliases: Tells isort to remove redundant aliases from imports, such as `import os as os`. This defaults to `False` simply because some projects use these seemingly useless aliases to signify intent and change behaviour.\n        honor_noqa: Tells isort to honor noqa comments to enforce skipping those comments.\n        treat_comment_as_code: Tells isort to treat the specified single line comment(s) as if they are code.\n        treat_all_comment_as_code: Tells isort to treat all single line comments as if they are code.\n        formatter: Specifies the name of a formatting plugin to use when producing output.\n        color: Tells isort to use color in terminal output.\n        ext_format: Tells isort to format the given files according to an extensions formatting rules.\n        star_first: Forces star imports above others to avoid overriding directly imported variables.\n        split_on_trailing_comma: Split imports list followed by a trailing comma into VERTICAL_HANGING_INDENT mode\n        section_default: Sets the default section for import options: ('FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER')\n        only_sections: Causes imports to be sorted based on their sections like STDLIB, THIRDPARTY, etc. Within sections, the imports are ordered by their import style and the imports with the same style maintain their relative positions.\n        no_sections: Put all imports into the same section bucket\n        force_alphabetical_sort: Force all imports to be sorted as a single section\n        force_sort_within_sections: Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style.\n        honor_case_in_force_sorted_sections: Honor `--case-sensitive` when `--force-sort-within-sections` is being used. Without this option set, `--order-by-type` decides module name ordering too.\n        sort_relative_in_force_sorted_sections: When using `--force-sort-within-sections`, sort relative imports the same way as they are sorted when not using that setting.\n        force_alphabetical_sort_within_sections: Force all imports to be sorted alphabetically within a section\n        top: Force specific imports to the top of their appropriate section.\n        combine_straight_imports: Combines all the bare straight imports of the same section in a single line. Won't work with sections which have 'as' imports\n        no_lines_before: Sections which should not be split with previous by empty lines\n        src_path: Add an explicitly defined source path (modules within src paths have their imports automatically categorized as first_party). Glob expansion (`*` and `**`) is supported for this option.\n        builtin: Force isort to recognize a module as part of Python's standard library.\n        extra_builtin: Extra modules to be included in the list of ones in Python's standard library.\n        future: Force isort to recognize a module as part of Python's internal future compatibility libraries. WARNING: this overrides the behavior of __future__ handling and therefore can result in code that can't execute. If you're looking to add dependencies such as six, a better option is to create another section below --future using custom sections. See: https://github.com/PyCQA/isort#custom- sections-and-ordering and the discussion here: https://github.com/PyCQA/isort/issues/1463.\n        thirdparty: Force isort to recognize a module as being part of a third party library.\n        project: Force isort to recognize a module as being part of the current python project.\n        known_local_folder: Force isort to recognize a module as being a local folder. Generally, this is reserved for relative imports (from . import module).\n        virtual_env: Virtual environment to use for determining whether a package is third-party\n        conda_env: Conda environment to use for determining whether a package is third-party\n        python_version: Tells isort to set the known standard library based on the specified Python version. Default is to assume any Python 3 version could be the target, and use a union of all stdlib modules across versions. If auto is specified, the version of the interpreter used to run isort (currently: 311) will be used.\n    \"\"\"\n    from isort.main import main as isort\n\n    cli_args = list(files)\n\n    if verbose:\n        cli_args.append(\"--verbose\")\n\n    if only_modified:\n        cli_args.append(\"--only-modified\")\n\n    if dedup_headings:\n        cli_args.append(\"--dedup-headings\")\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if stdout:\n        cli_args.append(\"--stdout\")\n\n    if overwrite_in_place:\n        cli_args.append(\"--overwrite-in-place\")\n\n    if show_config:\n        cli_args.append(\"--show-config\")\n\n    if show_files:\n        cli_args.append(\"--show-files\")\n\n    if diff:\n        cli_args.append(\"--diff\")\n\n    if check:\n        cli_args.append(\"--check\")\n\n    if ignore_whitespace:\n        cli_args.append(\"--ignore-whitespace\")\n\n    if settings:\n        cli_args.append(\"--settings\")\n        cli_args.append(settings)\n\n    if config_root:\n        cli_args.append(\"--config-root\")\n        cli_args.append(config_root)\n\n    if resolve_all_configs:\n        cli_args.append(\"--resolve-all-configs\")\n\n    if profile:\n        cli_args.append(\"--profile\")\n        cli_args.append(profile)\n\n    if jobs:\n        cli_args.append(\"--jobs\")\n        cli_args.append(str(jobs))\n\n    if atomic:\n        cli_args.append(\"--atomic\")\n\n    if interactive:\n        cli_args.append(\"--interactive\")\n\n    if format_error:\n        cli_args.append(\"--format-error\")\n        cli_args.append(format_error)\n\n    if format_success:\n        cli_args.append(\"--format-success\")\n        cli_args.append(format_success)\n\n    if sort_reexports:\n        cli_args.append(\"--sort-reexports\")\n\n    if filter_files:\n        cli_args.append(\"--filter-files\")\n\n    if skip:\n        cli_args.append(\"--skip\")\n        cli_args.append(\",\".join(skip))\n\n    if extend_skip:\n        cli_args.append(\"--extend-skip\")\n        cli_args.append(\",\".join(extend_skip))\n\n    if skip_glob:\n        cli_args.append(\"--skip-glob\")\n        cli_args.append(\",\".join(skip_glob))\n\n    if extend_skip_glob:\n        cli_args.append(\"--extend-skip-glob\")\n        cli_args.append(\",\".join(extend_skip_glob))\n\n    if skip_gitignore:\n        cli_args.append(\"--skip-gitignore\")\n\n    if supported_extension:\n        cli_args.append(\"--supported-extension\")\n        cli_args.append(\",\".join(supported_extension))\n\n    if blocked_extension:\n        cli_args.append(\"--blocked-extension\")\n        cli_args.append(\",\".join(blocked_extension))\n\n    if dont_follow_links:\n        cli_args.append(\"--dont-follow-links\")\n\n    if filename:\n        cli_args.append(\"--filename\")\n        cli_args.append(filename)\n\n    if allow_root:\n        cli_args.append(\"--allow-root\")\n\n    if add_import:\n        cli_args.append(\"--add-import\")\n        cli_args.append(add_import)\n\n    if append_only:\n        cli_args.append(\"--append-only\")\n\n    if force_adds:\n        cli_args.append(\"--force-adds\")\n\n    if remove_import:\n        cli_args.append(\"--remove-import\")\n        cli_args.append(remove_import)\n\n    if float_to_top:\n        cli_args.append(\"--float-to-top\")\n\n    if dont_float_to_top:\n        cli_args.append(\"--dont-float-to-top\")\n\n    if combine_as:\n        cli_args.append(\"--combine-as\")\n\n    if combine_star:\n        cli_args.append(\"--combine-star\")\n\n    if balanced:\n        cli_args.append(\"--balanced\")\n\n    if from_first:\n        cli_args.append(\"--from-first\")\n\n    if force_grid_wrap:\n        cli_args.append(\"--force-grid-wrap\")\n        cli_args.append(str(force_grid_wrap))\n\n    if indent:\n        cli_args.append(\"--indent\")\n        cli_args.append(indent)\n\n    if lines_before_imports:\n        cli_args.append(\"--lines-before-imports\")\n        cli_args.append(str(lines_before_imports))\n\n    if lines_after_imports:\n        cli_args.append(\"--lines-after-imports\")\n        cli_args.append(str(lines_after_imports))\n\n    if lines_between_types:\n        cli_args.append(\"--lines-between-types\")\n        cli_args.append(str(lines_between_types))\n\n    if line_ending:\n        cli_args.append(\"--line-ending\")\n        cli_args.append(line_ending)\n\n    if length_sort:\n        cli_args.append(\"--length-sort\")\n\n    if length_sort_straight:\n        cli_args.append(\"--length-sort-straight\")\n\n    if multi_line:\n        cli_args.append(\"--multi-line\")\n        cli_args.append(multi_line)\n\n    if ensure_newline_before_comments:\n        cli_args.append(\"--ensure-newline-before-comments\")\n\n    if no_inline_sort:\n        cli_args.append(\"--no-inline-sort\")\n\n    if order_by_type:\n        cli_args.append(\"--order-by-type\")\n\n    if dont_order_by_type:\n        cli_args.append(\"--dont-order-by-type\")\n\n    if reverse_relative:\n        cli_args.append(\"--reverse-relative\")\n\n    if reverse_sort:\n        cli_args.append(\"--reverse-sort\")\n\n    if sort_order:\n        cli_args.append(\"--sort-order\")\n        cli_args.append(sort_order)\n\n    if force_single_line_imports:\n        cli_args.append(\"--force-single-line-imports\")\n\n    if single_line_exclusions:\n        cli_args.append(\"--single-line-exclusions\")\n        cli_args.append(\",\".join(single_line_exclusions))\n\n    if trailing_comma:\n        cli_args.append(\"--trailing-comma\")\n\n    if use_parentheses:\n        cli_args.append(\"--use-parentheses\")\n\n    if line_length:\n        cli_args.append(\"--line-length\")\n        cli_args.append(str(line_length))\n\n    if wrap_length:\n        cli_args.append(\"--wrap-length\")\n        cli_args.append(str(wrap_length))\n\n    if case_sensitive:\n        cli_args.append(\"--case-sensitive\")\n\n    if remove_redundant_aliases:\n        cli_args.append(\"--remove-redundant-aliases\")\n\n    if honor_noqa:\n        cli_args.append(\"--honor-noqa\")\n\n    if treat_comment_as_code:\n        cli_args.append(\"--treat-comment-as-code\")\n        cli_args.append(treat_comment_as_code)\n\n    if treat_all_comment_as_code:\n        cli_args.append(\"--treat-all-comment-as-code\")\n\n    if formatter:\n        cli_args.append(\"--formatter\")\n        cli_args.append(formatter)\n\n    if color:\n        cli_args.append(\"--color\")\n\n    if ext_format:\n        cli_args.append(\"--ext-format\")\n        cli_args.append(ext_format)\n\n    if star_first:\n        cli_args.append(\"--star-first\")\n\n    if split_on_trailing_comma:\n        cli_args.append(\"--split-on-trailing-comma\")\n\n    if section_default:\n        cli_args.append(\"--section-default\")\n        cli_args.append(section_default)\n\n    if only_sections:\n        cli_args.append(\"--only-sections\")\n\n    if no_sections:\n        cli_args.append(\"--no-sections\")\n\n    if force_alphabetical_sort:\n        cli_args.append(\"--force-alphabetical-sort\")\n\n    if force_sort_within_sections:\n        cli_args.append(\"--force-sort-within-sections\")\n\n    if honor_case_in_force_sorted_sections:\n        cli_args.append(\"--honor-case-in-force-sorted-sections\")\n\n    if sort_relative_in_force_sorted_sections:\n        cli_args.append(\"--sort-relative-in-force-sorted-sections\")\n\n    if force_alphabetical_sort_within_sections:\n        cli_args.append(\"force-alphabetical-sort-within-sections\")\n\n    if top:\n        cli_args.append(\"--top\")\n        cli_args.append(top)\n\n    if combine_straight_imports:\n        cli_args.append(\"--combine-straight-imports\")\n\n    if no_lines_before:\n        cli_args.append(\"--no-lines-before\")\n        cli_args.append(\",\".join(no_lines_before))\n\n    if src_path:\n        cli_args.append(\"--src-path\")\n        cli_args.append(\",\".join(src_path))\n\n    if builtin:\n        cli_args.append(\"--builtin\")\n        cli_args.append(builtin)\n\n    if extra_builtin:\n        cli_args.append(\"--extra-builtin\")\n        cli_args.append(extra_builtin)\n\n    if future:\n        cli_args.append(\"--future\")\n        cli_args.append(future)\n\n    if thirdparty:\n        cli_args.append(\"--thirdparty\")\n        cli_args.append(thirdparty)\n\n    if project:\n        cli_args.append(\"--project\")\n        cli_args.append(project)\n\n    if known_local_folder:\n        cli_args.append(\"--known-local-folder\")\n        cli_args.append(known_local_folder)\n\n    if virtual_env:\n        cli_args.append(\"--virtual-env\")\n        cli_args.append(virtual_env)\n\n    if conda_env:\n        cli_args.append(\"--conda-env\")\n        cli_args.append(conda_env)\n\n    if python_version:\n        cli_args.append(\"--python-version\")\n        cli_args.append(python_version)\n\n    isort(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/mkdocs/","title":"mkdocs","text":""},{"location":"reference/duty/callables/mkdocs/#duty.callables.mkdocs","title":"mkdocs","text":"<p>Callable for MkDocs.</p> <p>Functions:</p> <ul> <li> <code>build</code>           \u2013            <p>Build the MkDocs documentation.</p> </li> <li> <code>gh_deploy</code>           \u2013            <p>Deploy your documentation to GitHub Pages.</p> </li> <li> <code>new</code>           \u2013            <p>Create a new MkDocs project.</p> </li> <li> <code>run</code>           \u2013            <p>Run <code>mkdocs</code>.</p> </li> <li> <code>serve</code>           \u2013            <p>Run the builtin development server.</p> </li> </ul>"},{"location":"reference/duty/callables/mkdocs/#duty.callables.mkdocs.build","title":"build","text":"<pre><code>build(\n    *,\n    config_file: str | None = None,\n    clean: bool | None = None,\n    strict: bool | None = None,\n    theme: str | None = None,\n    directory_urls: bool | None = None,\n    site_dir: str | None = None,\n    quiet: bool = False,\n    verbose: bool = False\n) -&gt; None\n</code></pre> <p>Build the MkDocs documentation.</p> <p>Parameters:</p> <ul> <li> <code>config_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Provide a specific MkDocs config.</p> </li> <li> <code>clean</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Remove old files from the site_dir before building (the default).</p> </li> <li> <code>strict</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable strict mode. This will cause MkDocs to abort the build on any warnings.</p> </li> <li> <code>theme</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The theme to use when building your documentation.</p> </li> <li> <code>directory_urls</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use directory URLs when building pages (the default).</p> </li> <li> <code>site_dir</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The directory to output the result of the documentation build.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Silence warnings.</p> </li> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose output.</p> </li> </ul> Source code in <code>src/duty/callables/mkdocs.py</code> <pre><code>@lazy(name=\"mkdocs.build\")\ndef build(\n    *,\n    config_file: str | None = None,\n    clean: bool | None = None,\n    strict: bool | None = None,\n    theme: str | None = None,\n    directory_urls: bool | None = None,\n    site_dir: str | None = None,\n    quiet: bool = False,\n    verbose: bool = False,\n) -&gt; None:\n    \"\"\"Build the MkDocs documentation.\n\n    Parameters:\n        config_file: Provide a specific MkDocs config.\n        clean: Remove old files from the site_dir before building (the default).\n        strict: Enable strict mode. This will cause MkDocs to abort the build on any warnings.\n        theme: The theme to use when building your documentation.\n        directory_urls: Use directory URLs when building pages (the default).\n        site_dir: The directory to output the result of the documentation build.\n        quiet: Silence warnings.\n        verbose: Enable verbose output.\n    \"\"\"\n    cli_args = []\n\n    if clean is True:\n        cli_args.append(\"--clean\")\n    elif clean is False:\n        cli_args.append(\"--dirty\")\n\n    if config_file:\n        cli_args.append(\"--config-file\")\n        cli_args.append(config_file)\n\n    if strict is True:\n        cli_args.append(\"--strict\")\n\n    if theme:\n        cli_args.append(\"--theme\")\n        cli_args.append(theme)\n\n    if directory_urls is True:\n        cli_args.append(\"--use-directory-urls\")\n    elif directory_urls is False:\n        cli_args.append(\"--no-directory-urls\")\n\n    if site_dir:\n        cli_args.append(\"--site_dir\")\n        cli_args.append(site_dir)\n\n    run(\"build\", *cli_args, quiet=quiet, verbose=verbose)\n</code></pre>"},{"location":"reference/duty/callables/mkdocs/#duty.callables.mkdocs.gh_deploy","title":"gh_deploy","text":"<pre><code>gh_deploy(\n    *,\n    config_file: str | None = None,\n    clean: bool | None = None,\n    message: str | None = None,\n    remote_branch: str | None = None,\n    remote_name: str | None = None,\n    force: bool | None = None,\n    no_history: bool | None = None,\n    ignore_version: bool | None = None,\n    shell: bool | None = None,\n    strict: bool | None = None,\n    theme: str | None = None,\n    directory_urls: bool | None = None,\n    site_dir: str | None = None,\n    quiet: bool = False,\n    verbose: bool = False\n) -&gt; None\n</code></pre> <p>Deploy your documentation to GitHub Pages.</p> <p>Parameters:</p> <ul> <li> <code>config_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Provide a specific MkDocs config.</p> </li> <li> <code>clean</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Remove old files from the site_dir before building (the default).</p> </li> <li> <code>message</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>A commit message to use when committing to the GitHub Pages remote branch. Commit {sha} and MkDocs {version} are available as expansions.</p> </li> <li> <code>remote_branch</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The remote branch to commit to for GitHub Pages. This overrides the value specified in config.</p> </li> <li> <code>remote_name</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The remote name to commit to for GitHub Pages. This overrides the value specified in config</p> </li> <li> <code>force</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Force the push to the repository.</p> </li> <li> <code>no_history</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Replace the whole Git history with one new commit.</p> </li> <li> <code>ignore_version</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore check that build is not being deployed with an older version of MkDocs.</p> </li> <li> <code>shell</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use the shell when invoking Git.</p> </li> <li> <code>strict</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable strict mode. This will cause MkDocs to abort the build on any warnings.</p> </li> <li> <code>theme</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The theme to use when building your documentation.</p> </li> <li> <code>directory_urls</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use directory URLs when building pages (the default).</p> </li> <li> <code>site_dir</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The directory to output the result of the documentation build.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Silence warnings.</p> </li> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose output.</p> </li> </ul> Source code in <code>src/duty/callables/mkdocs.py</code> <pre><code>@lazy(name=\"mkdocs.gh_deploy\")\ndef gh_deploy(\n    *,\n    config_file: str | None = None,\n    clean: bool | None = None,\n    message: str | None = None,\n    remote_branch: str | None = None,\n    remote_name: str | None = None,\n    force: bool | None = None,\n    no_history: bool | None = None,\n    ignore_version: bool | None = None,\n    shell: bool | None = None,\n    strict: bool | None = None,\n    theme: str | None = None,\n    directory_urls: bool | None = None,\n    site_dir: str | None = None,\n    quiet: bool = False,\n    verbose: bool = False,\n) -&gt; None:\n    \"\"\"Deploy your documentation to GitHub Pages.\n\n    Parameters:\n        config_file: Provide a specific MkDocs config.\n        clean: Remove old files from the site_dir before building (the default).\n        message: A commit message to use when committing to the GitHub Pages remote branch.\n            Commit {sha} and MkDocs {version} are available as expansions.\n        remote_branch: The remote branch to commit to for GitHub Pages. This overrides the value specified in config.\n        remote_name: The remote name to commit to for GitHub Pages. This overrides the value specified in config\n        force: Force the push to the repository.\n        no_history: Replace the whole Git history with one new commit.\n        ignore_version: Ignore check that build is not being deployed with an older version of MkDocs.\n        shell: Use the shell when invoking Git.\n        strict: Enable strict mode. This will cause MkDocs to abort the build on any warnings.\n        theme: The theme to use when building your documentation.\n        directory_urls: Use directory URLs when building pages (the default).\n        site_dir: The directory to output the result of the documentation build.\n        quiet: Silence warnings.\n        verbose: Enable verbose output.\n    \"\"\"\n    cli_args = []\n\n    if clean is True:\n        cli_args.append(\"--clean\")\n    elif clean is False:\n        cli_args.append(\"--dirty\")\n\n    if message:\n        cli_args.append(\"--message\")\n        cli_args.append(message)\n\n    if remote_branch:\n        cli_args.append(\"--remote-branch\")\n        cli_args.append(remote_branch)\n\n    if remote_name:\n        cli_args.append(\"--remote-name\")\n        cli_args.append(remote_name)\n\n    if force:\n        cli_args.append(\"--force\")\n\n    if no_history:\n        cli_args.append(\"--no-history\")\n\n    if ignore_version:\n        cli_args.append(\"--ignore-version\")\n\n    if shell:\n        cli_args.append(\"--shell\")\n\n    if config_file:\n        cli_args.append(\"--config-file\")\n        cli_args.append(config_file)\n\n    if strict is True:\n        cli_args.append(\"--strict\")\n\n    if theme:\n        cli_args.append(\"--theme\")\n        cli_args.append(theme)\n\n    if directory_urls is True:\n        cli_args.append(\"--use-directory-urls\")\n    elif directory_urls is False:\n        cli_args.append(\"--no-directory-urls\")\n\n    if site_dir:\n        cli_args.append(\"--site_dir\")\n        cli_args.append(site_dir)\n\n    run(\"gh-deploy\", *cli_args, quiet=quiet, verbose=verbose)\n</code></pre>"},{"location":"reference/duty/callables/mkdocs/#duty.callables.mkdocs.new","title":"new","text":"<pre><code>new(\n    project_directory: str,\n    *,\n    quiet: bool = False,\n    verbose: bool = False\n) -&gt; None\n</code></pre> <p>Create a new MkDocs project.</p> <p>Parameters:</p> <ul> <li> <code>project_directory</code>             (<code>str</code>)         \u2013          <p>Where to create the project.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Silence warnings.</p> </li> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose output.</p> </li> </ul> Source code in <code>src/duty/callables/mkdocs.py</code> <pre><code>@lazy(name=\"mkdocs.new\")\ndef new(project_directory: str, *, quiet: bool = False, verbose: bool = False) -&gt; None:\n    \"\"\"Create a new MkDocs project.\n\n    Parameters:\n        project_directory: Where to create the project.\n        quiet: Silence warnings.\n        verbose: Enable verbose output.\n    \"\"\"\n    run(\"new\", project_directory, quiet=quiet, verbose=verbose)\n</code></pre>"},{"location":"reference/duty/callables/mkdocs/#duty.callables.mkdocs.run","title":"run","text":"<pre><code>run(\n    *args: str, quiet: bool = False, verbose: bool = False\n) -&gt; None\n</code></pre> <p>Run <code>mkdocs</code>.</p> <p>Parameters:</p> <ul> <li> <code>*args</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>CLI arguments.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Silence warnings.</p> </li> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose output.</p> </li> </ul> Source code in <code>src/duty/callables/mkdocs.py</code> <pre><code>def run(*args: str, quiet: bool = False, verbose: bool = False) -&gt; None:\n    \"\"\"Run `mkdocs`.\n\n    Parameters:\n        *args: CLI arguments.\n        quiet: Silence warnings.\n        verbose: Enable verbose output.\n    \"\"\"\n    from mkdocs.__main__ import cli as mkdocs\n\n    cli_args = list(args)\n\n    if quiet and \"-q\" not in cli_args:\n        cli_args.append(\"--quiet\")\n\n    if verbose and \"-v\" not in cli_args:\n        cli_args.append(\"--verbose\")\n\n    mkdocs(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/mkdocs/#duty.callables.mkdocs.serve","title":"serve","text":"<pre><code>serve(\n    *,\n    config_file: str | None = None,\n    dev_addr: str | None = None,\n    livereload: bool | None = None,\n    dirtyreload: bool | None = None,\n    watch_theme: bool | None = None,\n    watch: list[str] | None = None,\n    strict: bool | None = None,\n    theme: str | None = None,\n    directory_urls: bool | None = None,\n    quiet: bool = False,\n    verbose: bool = False\n) -&gt; None\n</code></pre> <p>Run the builtin development server.</p> <p>Parameters:</p> <ul> <li> <code>config_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Provide a specific MkDocs config.</p> </li> <li> <code>dev_addr</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>IP address and port to serve documentation locally (default: localhost:8000).</p> </li> <li> <code>livereload</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable/disable the live reloading in the development server.</p> </li> <li> <code>dirtyreload</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>nable the live reloading in the development server, but only re-build files that have changed.</p> </li> <li> <code>watch_theme</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Include the theme in list of files to watch for live reloading. Ignored when live reload is not used.</p> </li> <li> <code>watch</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Directories or files to watch for live reloading.</p> </li> <li> <code>strict</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable strict mode. This will cause MkDocs to abort the build on any warnings.</p> </li> <li> <code>theme</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The theme to use when building your documentation.</p> </li> <li> <code>directory_urls</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use directory URLs when building pages (the default).</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Silence warnings.</p> </li> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose output.</p> </li> </ul> Source code in <code>src/duty/callables/mkdocs.py</code> <pre><code>@lazy(name=\"mkdocs.serve\")\ndef serve(\n    *,\n    config_file: str | None = None,\n    dev_addr: str | None = None,\n    livereload: bool | None = None,\n    dirtyreload: bool | None = None,\n    watch_theme: bool | None = None,\n    watch: list[str] | None = None,\n    strict: bool | None = None,\n    theme: str | None = None,\n    directory_urls: bool | None = None,\n    quiet: bool = False,\n    verbose: bool = False,\n) -&gt; None:\n    \"\"\"Run the builtin development server.\n\n    Parameters:\n        config_file: Provide a specific MkDocs config.\n        dev_addr: IP address and port to serve documentation locally (default: localhost:8000).\n        livereload: Enable/disable the live reloading in the development server.\n        dirtyreload: nable the live reloading in the development server, but only re-build files that have changed.\n        watch_theme: Include the theme in list of files to watch for live reloading. Ignored when live reload is not used.\n        watch: Directories or files to watch for live reloading.\n        strict: Enable strict mode. This will cause MkDocs to abort the build on any warnings.\n        theme: The theme to use when building your documentation.\n        directory_urls: Use directory URLs when building pages (the default).\n        quiet: Silence warnings.\n        verbose: Enable verbose output.\n    \"\"\"\n    cli_args = []\n\n    if dev_addr:\n        cli_args.append(\"--dev-addr\")\n        cli_args.append(dev_addr)\n\n    if livereload is True:\n        cli_args.append(\"--livereload\")\n    elif livereload is False:\n        cli_args.append(\"--no-livereload\")\n\n    if dirtyreload:\n        cli_args.append(\"--dirtyreload\")\n\n    if watch_theme:\n        cli_args.append(\"--watch-theme\")\n\n    if watch:\n        for path in watch:\n            cli_args.append(\"--watch\")\n            cli_args.append(path)\n\n    if config_file:\n        cli_args.append(\"--config-file\")\n        cli_args.append(config_file)\n\n    if strict is True:\n        cli_args.append(\"--strict\")\n\n    if theme:\n        cli_args.append(\"--theme\")\n        cli_args.append(theme)\n\n    if directory_urls is True:\n        cli_args.append(\"--use-directory-urls\")\n    elif directory_urls is False:\n        cli_args.append(\"--no-directory-urls\")\n\n    run(\"serve\", *cli_args, quiet=quiet, verbose=verbose)\n</code></pre>"},{"location":"reference/duty/callables/mypy/","title":"mypy","text":""},{"location":"reference/duty/callables/mypy/#duty.callables.mypy","title":"mypy","text":"<p>Callable for Mypy.</p> <p>Functions:</p> <ul> <li> <code>run</code>           \u2013            <p>Run mypy.</p> </li> </ul>"},{"location":"reference/duty/callables/mypy/#duty.callables.mypy.run","title":"run","text":"<pre><code>run(\n    *paths: str,\n    config_file: str | None = None,\n    enable_incomplete_feature: bool | None = None,\n    verbose: bool | None = None,\n    warn_unused_configs: bool | None = None,\n    no_namespace_packages: bool | None = None,\n    ignore_missing_imports: bool | None = None,\n    follow_imports: Literal[\n        \"normal\", \"silent\", \"skip\", \"error\"\n    ]\n    | None = None,\n    python_executable: str | None = None,\n    no_site_packages: bool | None = None,\n    no_silence_site_packages: bool | None = None,\n    python_version: str | None = None,\n    py2: bool | None = None,\n    platform: str | None = None,\n    always_true: list[str] | None = None,\n    always_false: list[str] | None = None,\n    disallow_any_unimported: bool | None = None,\n    disallow_any_expr: bool | None = None,\n    disallow_any_decorated: bool | None = None,\n    disallow_any_explicit: bool | None = None,\n    disallow_any_generics: bool | None = None,\n    disallow_subclassing_any: bool | None = None,\n    disallow_untyped_calls: bool | None = None,\n    disallow_untyped_defs: bool | None = None,\n    disallow_incomplete_defs: bool | None = None,\n    check_untyped_defs: bool | None = None,\n    disallow_untyped_decorators: bool | None = None,\n    implicit_optional: bool | None = None,\n    no_strict_optional: bool | None = None,\n    warn_redundant_casts: bool | None = None,\n    warn_unused_ignores: bool | None = None,\n    no_warn_no_return: bool | None = None,\n    warn_return_any: bool | None = None,\n    warn_unreachable: bool | None = None,\n    allow_untyped_globals: bool | None = None,\n    allow_redefinition: bool | None = None,\n    no_implicit_reexport: bool | None = None,\n    strict_equality: bool | None = None,\n    strict_concatenate: bool | None = None,\n    strict: bool | None = None,\n    disable_error_code: str | None = None,\n    enable_error_code: str | None = None,\n    show_error_context: bool | None = None,\n    show_column_numbers: bool | None = None,\n    show_error_end: bool | None = None,\n    hide_error_codes: bool | None = None,\n    pretty: bool | None = None,\n    no_color_output: bool | None = None,\n    no_error_summary: bool | None = None,\n    show_absolute_path: bool | None = None,\n    no_incremental: bool | None = None,\n    cache_dir: str | None = None,\n    sqlite_cache: bool | None = None,\n    cache_fine_grained: bool | None = None,\n    skip_version_check: bool | None = None,\n    skip_cache_mtime_checks: bool | None = None,\n    pdb: bool | None = None,\n    show_traceback: bool | None = None,\n    raise_exceptions: bool | None = None,\n    custom_typing_module: str | None = None,\n    disable_recursive_aliases: bool | None = None,\n    custom_typeshed_dir: str | None = None,\n    warn_incomplete_stub: bool | None = None,\n    shadow_file: tuple[str, str] | None = None,\n    any_exprs_report: str | None = None,\n    cobertura_xml_report: str | None = None,\n    html_report: str | None = None,\n    linecount_report: str | None = None,\n    linecoverage_report: str | None = None,\n    lineprecision_report: str | None = None,\n    txt_report: str | None = None,\n    xml_report: str | None = None,\n    xslt_html_report: str | None = None,\n    xslt_txt_report: str | None = None,\n    junit_xml: str | None = None,\n    find_occurrences: str | None = None,\n    scripts_are_modules: bool | None = None,\n    install_types: bool | None = None,\n    non_interactive: bool | None = None,\n    explicit_package_bases: bool | None = None,\n    exclude: str | None = None,\n    module: str | None = None,\n    package: str | None = None,\n    command: str | None = None\n) -&gt; None\n</code></pre> <p>Run mypy.</p> <p>Parameters:</p> <ul> <li> <code>*paths</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Path to scan.</p> </li> <li> <code>config_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Configuration file, must have a [mypy] section (defaults to mypy.ini, .mypy.ini,</p> </li> <li> <code>enable_incomplete_feature</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable support of incomplete/experimental features for early preview.</p> </li> <li> <code>verbose</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>More verbose messages. pyproject.toml, setup.cfg, /home/pawamoy/.config/mypy/config, ~/.config/mypy/config, ~/.mypy.ini).</p> </li> <li> <code>warn_unused_configs</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Warn about unused '[mypy-]' or '[[tool.mypy.overrides]]' config sections (inverse: --no-warn-unused-configs). <li> <code>no_namespace_packages</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Support namespace packages (PEP 420, init.py-less) (inverse: --namespace-packages).</p> </li> <li> <code>ignore_missing_imports</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Silently ignore imports of missing modules.</p> </li> <li> <code>follow_imports</code>             (<code>Literal['normal', 'silent', 'skip', 'error'] | None</code>, default:                 <code>None</code> )         \u2013          <p>How to treat imports (default normal).</p> </li> <li> <code>python_executable</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Python executable used for finding PEP 561 compliant installed packages and stubs.</p> </li> <li> <code>no_site_packages</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Do not search for installed PEP 561 compliant packages.</p> </li> <li> <code>no_silence_site_packages</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Do not silence errors in PEP 561 compliant installed packages.</p> </li> <li> <code>python_version</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Type check code assuming it will be running on Python x.y.</p> </li> <li> <code>py2</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use Python 2 mode (same as --python-version 2.7).</p> </li> <li> <code>platform</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Type check special-cased code for the given OS platform (defaults to sys.platform).</p> </li> <li> <code>always_true</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional variable to be considered True (may be repeated).</p> </li> <li> <code>always_false</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Additional variable to be considered False (may be repeated).</p> </li> <li> <code>disallow_any_unimported</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow Any types resulting from unfollowed imports.</p> </li> <li> <code>disallow_any_expr</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow all expressions that have type Any.</p> </li> <li> <code>disallow_any_decorated</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow functions that have Any in their signature after decorator transformation.</p> </li> <li> <code>disallow_any_explicit</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow explicit Any in type positions.</p> </li> <li> <code>disallow_any_generics</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow usage of generic types that do not specify explicit type parameters (inverse: --allow-any-generics).</p> </li> <li> <code>disallow_subclassing_any</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow subclassing values of type 'Any' when defining classes (inverse: --allow-subclassing-any).</p> </li> <li> <code>disallow_untyped_calls</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow calling functions without type annotations from functions with type annotations (inverse: --allow-untyped-calls).</p> </li> <li> <code>disallow_untyped_defs</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow defining functions without type annotations or with incomplete type annotations (inverse: --allow-untyped-defs).</p> </li> <li> <code>disallow_incomplete_defs</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow defining functions with incomplete type annotations (inverse: --allow-incomplete-defs).</p> </li> <li> <code>check_untyped_defs</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Type check the interior of functions without type annotations (inverse: --no-check-untyped-defs).</p> </li> <li> <code>disallow_untyped_decorators</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disallow decorating typed functions with untyped decorators (inverse: --allow-untyped-decorators).</p> </li> <li> <code>implicit_optional</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Assume arguments with default values of None are Optional(inverse: --no-implicit-optional).</p> </li> <li> <code>no_strict_optional</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable strict Optional checks (inverse: --strict-optional).</p> </li> <li> <code>warn_redundant_casts</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Warn about casting an expression to its inferred type (inverse: --no-warn-redundant-casts).</p> </li> <li> <code>warn_unused_ignores</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Warn about unneeded '# type: ignore' comments (inverse: --no-warn-unused-ignores).</p> </li> <li> <code>no_warn_no_return</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Do not warn about functions that end without returning (inverse: --warn-no-return).</p> </li> <li> <code>warn_return_any</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Warn about returning values of type Any from non-Any typed functions (inverse: --no-warn-return-any).</p> </li> <li> <code>warn_unreachable</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Warn about statements or expressions inferred to be unreachable (inverse: --no-warn-unreachable).</p> </li> <li> <code>allow_untyped_globals</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Suppress toplevel errors caused by missing annotations (inverse: --disallow-untyped-globals).</p> </li> <li> <code>allow_redefinition</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Allow unconditional variable redefinition with a new type (inverse: --disallow-redefinition).</p> </li> <li> <code>no_implicit_reexport</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Treat imports as private unless aliased (inverse: --implicit-reexport).</p> </li> <li> <code>strict_equality</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Prohibit equality, identity, and container checks for non-overlapping types (inverse: --no-strict-equality).</p> </li> <li> <code>strict_concatenate</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Make arguments prepended via Concatenate be truly positional-only (inverse: --no-strict-concatenate).</p> </li> <li> <code>strict</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Strict mode; enables the following flags: --warn-unused-configs, --disallow-any-generics, --disallow-subclassing-any, --disallow-untyped-calls, --disallow-untyped-defs, --disallow-incomplete-defs, --check-untyped-defs, --disallow-untyped-decorators, --warn-redundant-casts, --warn-unused-ignores, --warn-return-any, --no-implicit-reexport, --strict-equality, --strict-concatenate.</p> </li> <li> <code>disable_error_code</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable a specific error code.</p> </li> <li> <code>enable_error_code</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable a specific error code.</p> </li> <li> <code>show_error_context</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Precede errors with \"note:\" messages explaining context (inverse: --hide-error-context).</p> </li> <li> <code>show_column_numbers</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show column numbers in error messages (inverse: --hide-column-numbers).</p> </li> <li> <code>show_error_end</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show end line/end column numbers in error messages. This implies --show-column-numbers (inverse: --hide-error-end).</p> </li> <li> <code>hide_error_codes</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Hide error codes in error messages (inverse: --show-error-codes).</p> </li> <li> <code>pretty</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use visually nicer output in error messages: Use soft word wrap, show source code snippets, and show error location markers (inverse: --no-pretty).</p> </li> <li> <code>no_color_output</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Do not colorize error messages (inverse: --color-output).</p> </li> <li> <code>no_error_summary</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Do not show error stats summary (inverse: --error-summary).</p> </li> <li> <code>show_absolute_path</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show absolute paths to files (inverse: --hide-absolute-path).</p> </li> <li> <code>no_incremental</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable module cache (inverse: --incremental).</p> </li> <li> <code>cache_dir</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Store module cache info in the given folder in incremental mode (defaults to '.mypy_cache').</p> </li> <li> <code>sqlite_cache</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use a sqlite database to store the cache (inverse: --no-sqlite-cache).</p> </li> <li> <code>cache_fine_grained</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Include fine-grained dependency information in the cache for the mypy daemon.</p> </li> <li> <code>skip_version_check</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Allow using cache written by older mypy version.</p> </li> <li> <code>skip_cache_mtime_checks</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Skip cache internal consistency checks based on mtime.</p> </li> <li> <code>pdb</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Invoke pdb on fatal error.</p> </li> <li> <code>show_traceback</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show traceback on fatal error.</p> </li> <li> <code>raise_exceptions</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Raise exception on fatal error.</p> </li> <li> <code>custom_typing_module</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Use a custom typing module.</p> </li> <li> <code>disable_recursive_aliases</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable experimental support for recursive type aliases.</p> </li> <li> <code>custom_typeshed_dir</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Use the custom typeshed in DIR.</p> </li> <li> <code>warn_incomplete_stub</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Warn if missing type annotation in typeshed, only relevant with --disallow-untyped-defs or --disallow-incomplete-defs enabled (inverse: --no-warn-incomplete-stub).</p> </li> <li> <code>shadow_file</code>             (<code>tuple[str, str] | None</code>, default:                 <code>None</code> )         \u2013          <p>When encountering SOURCE_FILE, read and type check the contents of SHADOW_FILE instead..</p> </li> <li> <code>any_exprs_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report any expression.</p> </li> <li> <code>cobertura_xml_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report Cobertura.</p> </li> <li> <code>html_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report HTML.</p> </li> <li> <code>linecount_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report line count.</p> </li> <li> <code>linecoverage_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report line coverage.</p> </li> <li> <code>lineprecision_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report line precision.</p> </li> <li> <code>txt_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report text.</p> </li> <li> <code>xml_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report XML.</p> </li> <li> <code>xslt_html_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report XLST HTML.</p> </li> <li> <code>xslt_txt_report</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Report XLST text.</p> </li> <li> <code>junit_xml</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Write junit.xml to the given file.</p> </li> <li> <code>find_occurrences</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Print out all usages of a class member (experimental).</p> </li> <li> <code>scripts_are_modules</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Script x becomes module x instead of main.</p> </li> <li> <code>install_types</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Install detected missing library stub packages using pip (inverse: --no-install-types).</p> </li> <li> <code>non_interactive</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Install stubs without asking for confirmation and hide errors, with --install-types (inverse: --interactive).</p> </li> <li> <code>explicit_package_bases</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Use current directory and MYPYPATH to determine module names of files passed (inverse: --no-explicit-package-bases).</p> </li> <li> <code>exclude</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Regular expression to match file names, directory names or paths which mypy should ignore while recursively discovering files to check, e.g. --exclude '/setup.py$'. May be specified more than once, eg. --exclude a --exclude b.</p> </li> <li> <code>module</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Type-check module; can repeat for more modules.</p> </li> <li> <code>package</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Type-check package recursively; can be repeated.</p> </li> <li> <code>command</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Type-check program passed in as string.</p> </li> Source code in <code>src/duty/callables/mypy.py</code> <pre><code>@lazy(name=\"mypy\")\ndef run(\n    *paths: str,\n    config_file: str | None = None,\n    enable_incomplete_feature: bool | None = None,\n    verbose: bool | None = None,\n    warn_unused_configs: bool | None = None,\n    no_namespace_packages: bool | None = None,\n    ignore_missing_imports: bool | None = None,\n    follow_imports: Literal[\"normal\", \"silent\", \"skip\", \"error\"] | None = None,\n    python_executable: str | None = None,\n    no_site_packages: bool | None = None,\n    no_silence_site_packages: bool | None = None,\n    python_version: str | None = None,\n    py2: bool | None = None,\n    platform: str | None = None,\n    always_true: list[str] | None = None,\n    always_false: list[str] | None = None,\n    disallow_any_unimported: bool | None = None,\n    disallow_any_expr: bool | None = None,\n    disallow_any_decorated: bool | None = None,\n    disallow_any_explicit: bool | None = None,\n    disallow_any_generics: bool | None = None,\n    disallow_subclassing_any: bool | None = None,\n    disallow_untyped_calls: bool | None = None,\n    disallow_untyped_defs: bool | None = None,\n    disallow_incomplete_defs: bool | None = None,\n    check_untyped_defs: bool | None = None,\n    disallow_untyped_decorators: bool | None = None,\n    implicit_optional: bool | None = None,\n    no_strict_optional: bool | None = None,\n    warn_redundant_casts: bool | None = None,\n    warn_unused_ignores: bool | None = None,\n    no_warn_no_return: bool | None = None,\n    warn_return_any: bool | None = None,\n    warn_unreachable: bool | None = None,\n    allow_untyped_globals: bool | None = None,\n    allow_redefinition: bool | None = None,\n    no_implicit_reexport: bool | None = None,\n    strict_equality: bool | None = None,\n    strict_concatenate: bool | None = None,\n    strict: bool | None = None,\n    disable_error_code: str | None = None,\n    enable_error_code: str | None = None,\n    show_error_context: bool | None = None,\n    show_column_numbers: bool | None = None,\n    show_error_end: bool | None = None,\n    hide_error_codes: bool | None = None,\n    pretty: bool | None = None,\n    no_color_output: bool | None = None,\n    no_error_summary: bool | None = None,\n    show_absolute_path: bool | None = None,\n    no_incremental: bool | None = None,\n    cache_dir: str | None = None,\n    sqlite_cache: bool | None = None,\n    cache_fine_grained: bool | None = None,\n    skip_version_check: bool | None = None,\n    skip_cache_mtime_checks: bool | None = None,\n    pdb: bool | None = None,\n    show_traceback: bool | None = None,\n    raise_exceptions: bool | None = None,\n    custom_typing_module: str | None = None,\n    disable_recursive_aliases: bool | None = None,\n    custom_typeshed_dir: str | None = None,\n    warn_incomplete_stub: bool | None = None,\n    shadow_file: tuple[str, str] | None = None,\n    any_exprs_report: str | None = None,\n    cobertura_xml_report: str | None = None,\n    html_report: str | None = None,\n    linecount_report: str | None = None,\n    linecoverage_report: str | None = None,\n    lineprecision_report: str | None = None,\n    txt_report: str | None = None,\n    xml_report: str | None = None,\n    xslt_html_report: str | None = None,\n    xslt_txt_report: str | None = None,\n    junit_xml: str | None = None,\n    find_occurrences: str | None = None,\n    scripts_are_modules: bool | None = None,\n    install_types: bool | None = None,\n    non_interactive: bool | None = None,\n    explicit_package_bases: bool | None = None,\n    exclude: str | None = None,\n    module: str | None = None,\n    package: str | None = None,\n    command: str | None = None,\n) -&gt; None:\n    \"\"\"Run mypy.\n\n    Parameters:\n        *paths: Path to scan.\n        config_file: Configuration file, must have a [mypy] section (defaults to mypy.ini, .mypy.ini,\n        enable_incomplete_feature: Enable support of incomplete/experimental features for early preview.\n        verbose: More verbose messages.\n            pyproject.toml, setup.cfg, /home/pawamoy/.config/mypy/config, ~/.config/mypy/config, ~/.mypy.ini).\n        warn_unused_configs: Warn about unused '[mypy-&lt;pattern&gt;]' or '[[tool.mypy.overrides]]' config sections\n            (inverse: --no-warn-unused-configs).\n        no_namespace_packages: Support namespace packages (PEP 420, __init__.py-less) (inverse: --namespace-packages).\n        ignore_missing_imports: Silently ignore imports of missing modules.\n        follow_imports: How to treat imports (default normal).\n        python_executable: Python executable used for finding PEP 561 compliant installed packages and stubs.\n        no_site_packages: Do not search for installed PEP 561 compliant packages.\n        no_silence_site_packages: Do not silence errors in PEP 561 compliant installed packages.\n        python_version: Type check code assuming it will be running on Python x.y.\n        py2: Use Python 2 mode (same as --python-version 2.7).\n        platform: Type check special-cased code for the given OS platform (defaults to sys.platform).\n        always_true: Additional variable to be considered True (may be repeated).\n        always_false: Additional variable to be considered False (may be repeated).\n        disallow_any_unimported: Disallow Any types resulting from unfollowed imports.\n        disallow_any_expr: Disallow all expressions that have type Any.\n        disallow_any_decorated: Disallow functions that have Any in their signature after decorator transformation.\n        disallow_any_explicit: Disallow explicit Any in type positions.\n        disallow_any_generics: Disallow usage of generic types that do not specify explicit type parameters\n            (inverse: --allow-any-generics).\n        disallow_subclassing_any: Disallow subclassing values of type 'Any' when defining classes\n            (inverse: --allow-subclassing-any).\n        disallow_untyped_calls: Disallow calling functions without type annotations from functions with type annotations\n            (inverse: --allow-untyped-calls).\n        disallow_untyped_defs: Disallow defining functions without type annotations or with incomplete type annotations\n            (inverse: --allow-untyped-defs).\n        disallow_incomplete_defs: Disallow defining functions with incomplete type annotations\n            (inverse: --allow-incomplete-defs).\n        check_untyped_defs: Type check the interior of functions without type annotations\n            (inverse: --no-check-untyped-defs).\n        disallow_untyped_decorators: Disallow decorating typed functions with untyped decorators\n            (inverse: --allow-untyped-decorators).\n        implicit_optional: Assume arguments with default values of None are Optional(inverse: --no-implicit-optional).\n        no_strict_optional: Disable strict Optional checks (inverse: --strict-optional).\n        warn_redundant_casts: Warn about casting an expression to its inferred type (inverse: --no-warn-redundant-casts).\n        warn_unused_ignores: Warn about unneeded '# type: ignore' comments (inverse: --no-warn-unused-ignores).\n        no_warn_no_return: Do not warn about functions that end without returning (inverse: --warn-no-return).\n        warn_return_any: Warn about returning values of type Any from non-Any typed functions (inverse: --no-warn-return-any).\n        warn_unreachable: Warn about statements or expressions inferred to be unreachable (inverse: --no-warn-unreachable).\n        allow_untyped_globals: Suppress toplevel errors caused by missing annotations (inverse: --disallow-untyped-globals).\n        allow_redefinition: Allow unconditional variable redefinition with a new type (inverse: --disallow-redefinition).\n        no_implicit_reexport: Treat imports as private unless aliased (inverse: --implicit-reexport).\n        strict_equality: Prohibit equality, identity, and container checks for non-overlapping types\n            (inverse: --no-strict-equality).\n        strict_concatenate: Make arguments prepended via Concatenate be truly positional-only (inverse: --no-strict-concatenate).\n        strict: Strict mode; enables the following flags: --warn-unused-configs, --disallow-any-generics,\n            --disallow-subclassing-any, --disallow-untyped-calls, --disallow-untyped-defs, --disallow-incomplete-defs,\n            --check-untyped-defs, --disallow-untyped-decorators, --warn-redundant-casts, --warn-unused-ignores,\n            --warn-return-any, --no-implicit-reexport, --strict-equality, --strict-concatenate.\n        disable_error_code: Disable a specific error code.\n        enable_error_code: Enable a specific error code.\n        show_error_context: Precede errors with \"note:\" messages explaining context (inverse: --hide-error-context).\n        show_column_numbers: Show column numbers in error messages (inverse: --hide-column-numbers).\n        show_error_end: Show end line/end column numbers in error messages. This implies --show-column-numbers\n            (inverse: --hide-error-end).\n        hide_error_codes: Hide error codes in error messages (inverse: --show-error-codes).\n        pretty: Use visually nicer output in error messages: Use soft word wrap, show source code snippets,\n            and show error location markers (inverse: --no-pretty).\n        no_color_output: Do not colorize error messages (inverse: --color-output).\n        no_error_summary: Do not show error stats summary (inverse: --error-summary).\n        show_absolute_path: Show absolute paths to files (inverse: --hide-absolute-path).\n        no_incremental: Disable module cache (inverse: --incremental).\n        cache_dir: Store module cache info in the given folder in incremental mode (defaults to '.mypy_cache').\n        sqlite_cache: Use a sqlite database to store the cache (inverse: --no-sqlite-cache).\n        cache_fine_grained: Include fine-grained dependency information in the cache for the mypy daemon.\n        skip_version_check: Allow using cache written by older mypy version.\n        skip_cache_mtime_checks: Skip cache internal consistency checks based on mtime.\n        pdb: Invoke pdb on fatal error.\n        show_traceback: Show traceback on fatal error.\n        raise_exceptions: Raise exception on fatal error.\n        custom_typing_module: Use a custom typing module.\n        disable_recursive_aliases: Disable experimental support for recursive type aliases.\n        custom_typeshed_dir: Use the custom typeshed in DIR.\n        warn_incomplete_stub: Warn if missing type annotation in typeshed, only relevant with --disallow-untyped-defs\n            or --disallow-incomplete-defs enabled (inverse: --no-warn-incomplete-stub).\n        shadow_file: When encountering SOURCE_FILE, read and type check the contents of SHADOW_FILE instead..\n        any_exprs_report: Report any expression.\n        cobertura_xml_report: Report Cobertura.\n        html_report: Report HTML.\n        linecount_report: Report line count.\n        linecoverage_report: Report line coverage.\n        lineprecision_report: Report line precision.\n        txt_report: Report text.\n        xml_report: Report XML.\n        xslt_html_report: Report XLST HTML.\n        xslt_txt_report: Report XLST text.\n        junit_xml: Write junit.xml to the given file.\n        find_occurrences: Print out all usages of a class member (experimental).\n        scripts_are_modules: Script x becomes module x instead of __main__.\n        install_types: Install detected missing library stub packages using pip (inverse: --no-install-types).\n        non_interactive: Install stubs without asking for confirmation and hide errors, with --install-types\n            (inverse: --interactive).\n        explicit_package_bases: Use current directory and MYPYPATH to determine module names of files passed\n            (inverse: --no-explicit-package-bases).\n        exclude: Regular expression to match file names, directory names or paths which mypy should ignore while\n            recursively discovering files to check, e.g. --exclude '/setup\\\\.py$'.\n            May be specified more than once, eg. --exclude a --exclude b.\n        module: Type-check module; can repeat for more modules.\n        package: Type-check package recursively; can be repeated.\n        command: Type-check program passed in as string.\n    \"\"\"  # noqa: D301\n    from mypy.main import main as mypy\n\n    cli_args = list(paths)\n\n    if enable_incomplete_feature:\n        cli_args.append(\"--enable-incomplete-feature\")\n\n    if verbose:\n        cli_args.append(\"--verbose\")\n\n    if config_file:\n        cli_args.append(\"--config-file\")\n        cli_args.append(config_file)\n\n    if warn_unused_configs:\n        cli_args.append(\"--warn-unused-configs\")\n\n    if no_namespace_packages:\n        cli_args.append(\"--no-namespace-packages\")\n\n    if ignore_missing_imports:\n        cli_args.append(\"--ignore-missing-imports\")\n\n    if follow_imports:\n        cli_args.append(\"--follow-imports\")\n        cli_args.append(follow_imports)\n\n    if python_executable:\n        cli_args.append(\"--python-executable\")\n        cli_args.append(python_executable)\n\n    if no_site_packages:\n        cli_args.append(\"--no-site-packages\")\n\n    if no_silence_site_packages:\n        cli_args.append(\"--no-silence-site-packages\")\n\n    if python_version:\n        cli_args.append(\"--python-version\")\n        cli_args.append(python_version)\n\n    if py2:\n        cli_args.append(\"--py2\")\n\n    if platform:\n        cli_args.append(\"--platform\")\n        cli_args.append(platform)\n\n    if always_true:\n        for posarg in always_true:\n            cli_args.append(\"--always-true\")\n            cli_args.append(posarg)\n\n    if always_false:\n        for posarg in always_false:\n            cli_args.append(\"--always-false\")\n            cli_args.append(posarg)\n\n    if disallow_any_unimported:\n        cli_args.append(\"--disallow-any-unimported\")\n\n    if disallow_any_expr:\n        cli_args.append(\"--disallow-any-expr\")\n\n    if disallow_any_decorated:\n        cli_args.append(\"--disallow-any-decorated\")\n\n    if disallow_any_explicit:\n        cli_args.append(\"--disallow-any-explicit\")\n\n    if disallow_any_generics:\n        cli_args.append(\"--disallow-any-generics\")\n\n    if disallow_subclassing_any:\n        cli_args.append(\"--disallow-subclassing-any\")\n\n    if disallow_untyped_calls:\n        cli_args.append(\"--disallow-untyped-calls\")\n\n    if disallow_untyped_defs:\n        cli_args.append(\"--disallow-untyped-defs\")\n\n    if disallow_incomplete_defs:\n        cli_args.append(\"--disallow-incomplete-defs\")\n\n    if check_untyped_defs:\n        cli_args.append(\"--check-untyped-defs\")\n\n    if disallow_untyped_decorators:\n        cli_args.append(\"--disallow-untyped-decorators\")\n\n    if implicit_optional:\n        cli_args.append(\"--implicit-optional\")\n\n    if no_strict_optional:\n        cli_args.append(\"--no-strict-optional\")\n\n    if warn_redundant_casts:\n        cli_args.append(\"--warn-redundant-casts\")\n\n    if warn_unused_ignores:\n        cli_args.append(\"--warn-unused-ignores\")\n\n    if no_warn_no_return:\n        cli_args.append(\"--no-warn-no-return\")\n\n    if warn_return_any:\n        cli_args.append(\"--warn-return-any\")\n\n    if warn_unreachable:\n        cli_args.append(\"--warn-unreachable\")\n\n    if allow_untyped_globals:\n        cli_args.append(\"--allow-untyped-globals\")\n\n    if allow_redefinition:\n        cli_args.append(\"--allow-redefinition\")\n\n    if no_implicit_reexport:\n        cli_args.append(\"--no-implicit-reexport\")\n\n    if strict_equality:\n        cli_args.append(\"--strict-equality\")\n\n    if strict_concatenate:\n        cli_args.append(\"--strict-concatenate\")\n\n    if strict:\n        cli_args.append(\"--strict\")\n\n    if disable_error_code:\n        cli_args.append(\"--disable-error-code\")\n        cli_args.append(disable_error_code)\n\n    if enable_error_code:\n        cli_args.append(\"--enable-error-code\")\n        cli_args.append(enable_error_code)\n\n    if show_error_context:\n        cli_args.append(\"--show-error-context\")\n\n    if show_column_numbers:\n        cli_args.append(\"--show-column-numbers\")\n\n    if show_error_end:\n        cli_args.append(\"--show-error-end\")\n\n    if hide_error_codes:\n        cli_args.append(\"--hide-error-codes\")\n\n    if pretty:\n        cli_args.append(\"--pretty\")\n\n    if no_color_output:\n        cli_args.append(\"--no-color-output\")\n\n    if no_error_summary:\n        cli_args.append(\"--no-error-summary\")\n\n    if show_absolute_path:\n        cli_args.append(\"--show-absolute-path\")\n\n    if no_incremental:\n        cli_args.append(\"--no-incremental\")\n\n    if cache_dir:\n        cli_args.append(\"--cache-dir\")\n        cli_args.append(cache_dir)\n\n    if sqlite_cache:\n        cli_args.append(\"--sqlite-cache\")\n\n    if cache_fine_grained:\n        cli_args.append(\"--cache-fine-grained\")\n\n    if skip_version_check:\n        cli_args.append(\"--skip-version-check\")\n\n    if skip_cache_mtime_checks:\n        cli_args.append(\"--skip-cache-mtime-checks\")\n\n    if pdb:\n        cli_args.append(\"--pdb\")\n\n    if show_traceback:\n        cli_args.append(\"--show-traceback\")\n\n    if raise_exceptions:\n        cli_args.append(\"--raise-exceptions\")\n\n    if custom_typing_module:\n        cli_args.append(\"--custom-typing-module\")\n        cli_args.append(custom_typing_module)\n\n    if disable_recursive_aliases:\n        cli_args.append(\"--disable-recursive-aliases\")\n\n    if custom_typeshed_dir:\n        cli_args.append(\"--custom-typeshed-dir\")\n        cli_args.append(custom_typeshed_dir)\n\n    if warn_incomplete_stub:\n        cli_args.append(\"--warn-incomplete-stub\")\n\n    if shadow_file:\n        cli_args.append(\"--shadow-file\")\n        cli_args.extend(shadow_file)\n\n    if any_exprs_report:\n        cli_args.append(\"--any-exprs-report\")\n        cli_args.append(any_exprs_report)\n\n    if cobertura_xml_report:\n        cli_args.append(\"--cobertura-xml-report\")\n        cli_args.append(cobertura_xml_report)\n\n    if html_report:\n        cli_args.append(\"--html-report\")\n        cli_args.append(html_report)\n\n    if linecount_report:\n        cli_args.append(\"--linecount-report\")\n        cli_args.append(linecount_report)\n\n    if linecoverage_report:\n        cli_args.append(\"--linecoverage-report\")\n        cli_args.append(linecoverage_report)\n\n    if lineprecision_report:\n        cli_args.append(\"--lineprecision-report\")\n        cli_args.append(lineprecision_report)\n\n    if txt_report:\n        cli_args.append(\"--txt-report\")\n        cli_args.append(txt_report)\n\n    if xml_report:\n        cli_args.append(\"--xml-report\")\n        cli_args.append(xml_report)\n\n    if xslt_html_report:\n        cli_args.append(\"--xslt-html-report\")\n        cli_args.append(xslt_html_report)\n\n    if xslt_txt_report:\n        cli_args.append(\"--xslt-txt-report\")\n        cli_args.append(xslt_txt_report)\n\n    if junit_xml:\n        cli_args.append(\"--junit-xml\")\n        cli_args.append(junit_xml)\n\n    if find_occurrences:\n        cli_args.append(\"--find-occurrences\")\n        cli_args.append(find_occurrences)\n\n    if scripts_are_modules:\n        cli_args.append(\"--scripts-are-modules\")\n\n    if install_types:\n        cli_args.append(\"--install-types\")\n\n    if non_interactive:\n        cli_args.append(\"--non-interactive\")\n\n    if explicit_package_bases:\n        cli_args.append(\"--explicit-package-bases\")\n\n    if exclude:\n        cli_args.append(\"--exclude\")\n        cli_args.append(exclude)\n\n    if module:\n        cli_args.append(\"--module\")\n        cli_args.append(module)\n\n    if package:\n        cli_args.append(\"--package\")\n        cli_args.append(package)\n\n    if command:\n        cli_args.append(\"--command\")\n        cli_args.append(command)\n\n    mypy(\n        args=cli_args,\n        stdout=_LazyStdout(),\n        stderr=_LazyStderr(),\n        clean_exit=True,\n    )\n</code></pre>"},{"location":"reference/duty/callables/pytest/","title":"pytest","text":""},{"location":"reference/duty/callables/pytest/#duty.callables.pytest","title":"pytest","text":"<p>Callable for pytest.</p> <p>Functions:</p> <ul> <li> <code>run</code>           \u2013            <p>Run <code>pytest</code>.</p> </li> </ul>"},{"location":"reference/duty/callables/pytest/#duty.callables.pytest.run","title":"run","text":"<pre><code>run(\n    *paths: str,\n    config_file: str | None = None,\n    select: str | None = None,\n    select_markers: str | None = None,\n    markers: bool | None = None,\n    exitfirst: bool | None = None,\n    fixtures: bool | None = None,\n    fixtures_per_test: bool | None = None,\n    pdb: bool | None = None,\n    pdbcls: str | None = None,\n    trace: bool | None = None,\n    capture: str | None = None,\n    runxfail: bool | None = None,\n    last_failed: bool | None = None,\n    failed_first: bool | None = None,\n    new_first: bool | None = None,\n    cache_show: str | None = None,\n    cache_clear: bool | None = None,\n    last_failed_no_failures: Literal[\"all\", \"none\"]\n    | None = None,\n    stepwise: bool | None = None,\n    stepwise_skip: bool | None = None,\n    durations: int | None = None,\n    durations_min: int | None = None,\n    verbose: bool | None = None,\n    no_header: bool | None = None,\n    no_summary: bool | None = None,\n    quiet: bool | None = None,\n    verbosity: int | None = None,\n    show_extra_summary: str | None = None,\n    disable_pytest_warnings: bool | None = None,\n    showlocals: bool | None = None,\n    no_showlocals: bool | None = None,\n    traceback: Literal[\n        \"auto\", \"long\", \"short\", \"line\", \"native\", \"no\"\n    ]\n    | None = None,\n    show_capture: Literal[\n        \"no\", \"stdout\", \"stderr\", \"log\", \"all\"\n    ]\n    | None = None,\n    full_trace: bool | None = None,\n    color: str | None = None,\n    code_highlight: bool | None = None,\n    pastebin: str | None = None,\n    junit_xml: str | None = None,\n    junit_prefix: str | None = None,\n    pythonwarnings: str | None = None,\n    maxfail: int | None = None,\n    strict_config: bool | None = None,\n    strict_markers: bool | None = None,\n    continue_on_collection_errors: bool | None = None,\n    rootdir: str | None = None,\n    collect_only: bool | None = None,\n    pyargs: bool | None = None,\n    ignore: list[str] | None = None,\n    ignore_glob: list[str] | None = None,\n    deselect: str | None = None,\n    confcutdir: str | None = None,\n    noconftest: bool | None = None,\n    keep_duplicates: bool | None = None,\n    collect_in_virtualenv: bool | None = None,\n    import_mode: Literal[\"prepend\", \"append\", \"importlib\"]\n    | None = None,\n    doctest_modules: bool | None = None,\n    doctest_report: Literal[\n        \"none\",\n        \"cdiff\",\n        \"ndiff\",\n        \"udiff\",\n        \"only_first_failure\",\n    ]\n    | None = None,\n    doctest_glob: str | None = None,\n    doctest_ignore_import_errors: bool | None = None,\n    doctest_continue_on_failure: bool | None = None,\n    basetemp: str | None = None,\n    plugins: list[str] | None = None,\n    no_plugins: list[str] | None = None,\n    trace_config: bool | None = None,\n    debug: str | None = None,\n    override_ini: str | None = None,\n    assert_mode: str | None = None,\n    setup_only: bool | None = None,\n    setup_show: bool | None = None,\n    setup_plan: bool | None = None,\n    log_level: str | None = None,\n    log_format: str | None = None,\n    log_date_format: str | None = None,\n    log_cli_level: tuple[str, str] | None = None,\n    log_cli_format: str | None = None,\n    log_cli_date_format: str | None = None,\n    log_file: str | None = None,\n    log_file_level: str | None = None,\n    log_file_format: str | None = None,\n    log_file_date_format: str | None = None,\n    log_auto_indent: str | None = None\n) -&gt; int\n</code></pre> <p>Run <code>pytest</code>.</p> <p>Parameters:</p> <ul> <li> <code>*paths</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Files or directories to select tests from.</p> </li> <li> <code>select</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Only run tests which match the given substring expression. An expression is a Python evaluatable expression where all names are substring-matched against test names and their parent classes. Example: -k 'test_method or test_other' matches all test functions and classes whose name contains 'test_method' or 'test_other', while -k 'not test_method' matches those that don't contain 'test_method' in their names. -k 'not test_method and not test_other' will eliminate the matches. Additionally keywords are matched to classes and functions containing extra names in their 'extra_keyword_matches' set, as well as functions which have names assigned directly to them. The matching is case-insensitive.</p> </li> <li> <code>select_markers</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Only run tests matching given mark expression. For example: -m 'mark1 and not mark2'.</p> </li> <li> <code>markers</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>show markers (builtin, plugin and per-project ones).</p> </li> <li> <code>exitfirst</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit instantly on first error or failed test</p> </li> <li> <code>fixtures</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show available fixtures, sorted by plugin appearance (fixtures with leading '_' are only shown with '-v')</p> </li> <li> <code>fixtures_per_test</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show fixtures per test</p> </li> <li> <code>pdb</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Start the interactive Python debugger on errors or KeyboardInterrupt</p> </li> <li> <code>pdbcls</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Specify a custom interactive Python debugger for use with --pdb.For example: --pdbcls IPython.terminal.debugger:TerminalPdb</p> </li> <li> <code>trace</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Immediately break when running each test</p> </li> <li> <code>capture</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Per-test capturing method: one of fd|sys|no|tee-sys</p> </li> <li> <code>runxfail</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Report the results of xfail tests as if they were not marked</p> </li> <li> <code>last_failed</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Rerun only the tests that failed at the last run (or all if none failed)</p> </li> <li> <code>failed_first</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Run all tests, but run the last failures first. This may re-order tests and thus lead to repeated fixture setup/teardown.</p> </li> <li> <code>new_first</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Run tests from new files first, then the rest of the tests sorted by file mtime</p> </li> <li> <code>cache_show</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Show cache contents, don't perform collection or tests. Optional argument: glob (default: '*').</p> </li> <li> <code>cache_clear</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Remove all cache contents at start of test run</p> </li> <li> <code>last_failed_no_failures</code>             (<code>Literal['all', 'none'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Which tests to run with no previously (known) failures</p> </li> <li> <code>stepwise</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit on test failure and continue from last failing test next time</p> </li> <li> <code>stepwise_skip</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore the first failing test but stop on the next failing test. Implicitly enables --stepwise.</p> </li> <li> <code>durations</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Show N slowest setup/test durations (N 0 for all)</p> </li> <li> <code>durations_min</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Minimal duration in seconds for inclusion in slowest list. Default: 0.005.</p> </li> <li> <code>verbose</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Increase verbosity</p> </li> <li> <code>no_header</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable header</p> </li> <li> <code>no_summary</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable summary</p> </li> <li> <code>quiet</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Decrease verbosity</p> </li> <li> <code>verbosity</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Set verbosity. Default: 0.</p> </li> <li> <code>show_extra_summary</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Show extra test summary info as specified by chars: (f)ailed, (E)rror, (s)kipped, (x)failed, (X)passed, (p)assed, (P)assed with output, (a)ll except passed (p/P), or (A)ll. (w)arnings are enabled by default (see --disable-warnings), 'N' can be used to reset the list. (default: 'fE').</p> </li> <li> <code>disable_pytest_warnings</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable warnings summary</p> </li> <li> <code>showlocals</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show locals in tracebacks (disabled by default)</p> </li> <li> <code>no_showlocals</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Hide locals in tracebacks (negate --showlocals passed through addopts)</p> </li> <li> <code>traceback</code>             (<code>Literal['auto', 'long', 'short', 'line', 'native', 'no'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Traceback print mode (auto/long/short/line/native/no)</p> </li> <li> <code>show_capture</code>             (<code>Literal['no', 'stdout', 'stderr', 'log', 'all'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Controls how captured stdout/stderr/log is shown on failed tests. Default: all.</p> </li> <li> <code>full_trace</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't cut any tracebacks (default is to cut)</p> </li> <li> <code>color</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Color terminal output (yes/no/auto)</p> </li> <li> <code>code_highlight</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>{yes,no} Whether code should be highlighted (only if --color is also enabled). Default: yes.</p> </li> <li> <code>pastebin</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Send failed|all info to bpaste.net pastebin service</p> </li> <li> <code>junit_xml</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Create junit-xml style report file at given path</p> </li> <li> <code>junit_prefix</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Prepend prefix to classnames in junit-xml output</p> </li> <li> <code>pythonwarnings</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Set which warnings to report, see -W option of Python itself</p> </li> <li> <code>maxfail</code>             (<code>int | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit after first num failures or errors</p> </li> <li> <code>strict_config</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Any warnings encountered while parsing the <code>pytest</code> section of the configuration file raise errors</p> </li> <li> <code>strict_markers</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Markers not registered in the <code>markers</code> section of the configuration file raise errors</p> </li> <li> <code>config_file</code>             (<code>file</code>, default:                 <code>None</code> )         \u2013          <p>Load configuration from <code>file</code> instead of trying to locate one of the implicit configuration files</p> </li> <li> <code>continue_on_collection_errors</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Force test execution even if collection errors occur</p> </li> <li> <code>rootdir</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Define root directory for tests. Can be relative path: 'root_dir', './root_dir', 'root_dir/another_dir/'; absolute path: '/home/user/root_dir'; path with variables: '$HOME/root_dir'.</p> </li> <li> <code>collect_only</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Only collect tests, don't execute them</p> </li> <li> <code>pyargs</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Try to interpret all arguments as Python packages</p> </li> <li> <code>ignore</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore path during collection (multi-allowed)</p> </li> <li> <code>ignore_glob</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore path pattern during collection (multi-allowed)</p> </li> <li> <code>deselect</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Deselect item (via node id prefix) during collection (multi-allowed)</p> </li> <li> <code>confcutdir</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Only load conftest.py's relative to specified dir</p> </li> <li> <code>noconftest</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't load any conftest.py files</p> </li> <li> <code>keep_duplicates</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Keep duplicate tests</p> </li> <li> <code>collect_in_virtualenv</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Don't ignore tests in a local virtualenv directory</p> </li> <li> <code>import_mode</code>             (<code>Literal['prepend', 'append', 'importlib'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Prepend/append to sys.path when importing test modules and conftest files. Default: prepend.</p> </li> <li> <code>doctest_modules</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Run doctests in all .py modules</p> </li> <li> <code>doctest_report</code>             (<code>Literal['none', 'cdiff', 'ndiff', 'udiff', 'only_first_failure'] | None</code>, default:                 <code>None</code> )         \u2013          <p>Choose another output format for diffs on doctest failure</p> </li> <li> <code>doctest_glob</code>             (<code>pat</code>, default:                 <code>None</code> )         \u2013          <p>Doctests file matching pattern, default: test*.txt</p> </li> <li> <code>doctest_ignore_import_errors</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore doctest ImportErrors</p> </li> <li> <code>doctest_continue_on_failure</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>For a given doctest, continue to run after the first failure</p> </li> <li> <code>basetemp</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Base temporary directory for this test run. (Warning: this directory is removed if it exists.)</p> </li> <li> <code>plugins</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Early-load given plugin module name or entry point (multi-allowed). To avoid loading of plugins, use the <code>no:</code> prefix, e.g. <code>no:doctest</code>.</p> </li> <li> <code>no_plugins</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Early-load given plugin module name or entry point (multi-allowed). To avoid loading of plugins, use the <code>no:</code> prefix, e.g. <code>no:doctest</code>.</p> </li> <li> <code>trace_config</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Trace considerations of conftest.py files</p> </li> <li> <code>debug</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Store internal tracing debug information in this log file. This file is opened with 'w' and truncated as a result, care advised. Default: pytestdebug.log.</p> </li> <li> <code>override_ini</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Override ini option with \"option value\" style, e.g. <code>-o xfail_strict True -o cache_dir cache</code>.</p> </li> <li> <code>assert_mode</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Control assertion debugging tools. 'plain' performs no assertion debugging. 'rewrite' (the default) rewrites assert statements in test modules on import to provide assert expression information.</p> </li> <li> <code>setup_only</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Only setup fixtures, do not execute tests</p> </li> <li> <code>setup_show</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show setup of fixtures while executing tests</p> </li> <li> <code>setup_plan</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show what fixtures and tests would be executed but don't execute anything</p> </li> <li> <code>log_level</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Level of messages to catch/display. Not set by default, so it depends on the root/parent log handler's effective level, where it is \"WARNING\" by default.</p> </li> <li> <code>log_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Log format used by the logging module.</p> </li> <li> <code>log_date_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Log date format used by the logging module.</p> </li> <li> <code>log_cli_level</code>             (<code>tuple[str, str] | None</code>, default:                 <code>None</code> )         \u2013          <p>logging level.</p> </li> <li> <code>log_cli_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Log format used by the logging module.</p> </li> <li> <code>log_cli_date_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Log date format used by the logging module.</p> </li> <li> <code>log_file</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Path to a file when logging will be written to.</p> </li> <li> <code>log_file_level</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Log file logging level.</p> </li> <li> <code>log_file_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Log format used by the logging module.</p> </li> <li> <code>log_file_date_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Log date format used by the logging module.</p> </li> <li> <code>log_auto_indent</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Auto-indent multiline messages passed to the logging module. Accepts true|on, false|off or an integer.</p> </li> </ul> Source code in <code>src/duty/callables/pytest.py</code> <pre><code>@lazy(name=\"pytest\")\ndef run(\n    *paths: str,\n    config_file: str | None = None,\n    select: str | None = None,\n    select_markers: str | None = None,\n    markers: bool | None = None,\n    exitfirst: bool | None = None,\n    fixtures: bool | None = None,\n    fixtures_per_test: bool | None = None,\n    pdb: bool | None = None,\n    pdbcls: str | None = None,\n    trace: bool | None = None,\n    capture: str | None = None,\n    runxfail: bool | None = None,\n    last_failed: bool | None = None,\n    failed_first: bool | None = None,\n    new_first: bool | None = None,\n    cache_show: str | None = None,\n    cache_clear: bool | None = None,\n    last_failed_no_failures: Literal[\"all\", \"none\"] | None = None,\n    stepwise: bool | None = None,\n    stepwise_skip: bool | None = None,\n    durations: int | None = None,\n    durations_min: int | None = None,\n    verbose: bool | None = None,\n    no_header: bool | None = None,\n    no_summary: bool | None = None,\n    quiet: bool | None = None,\n    verbosity: int | None = None,\n    show_extra_summary: str | None = None,\n    disable_pytest_warnings: bool | None = None,\n    showlocals: bool | None = None,\n    no_showlocals: bool | None = None,\n    traceback: Literal[\"auto\", \"long\", \"short\", \"line\", \"native\", \"no\"] | None = None,\n    show_capture: Literal[\"no\", \"stdout\", \"stderr\", \"log\", \"all\"] | None = None,\n    full_trace: bool | None = None,\n    color: str | None = None,\n    code_highlight: bool | None = None,\n    pastebin: str | None = None,\n    junit_xml: str | None = None,\n    junit_prefix: str | None = None,\n    pythonwarnings: str | None = None,\n    maxfail: int | None = None,\n    strict_config: bool | None = None,\n    strict_markers: bool | None = None,\n    continue_on_collection_errors: bool | None = None,\n    rootdir: str | None = None,\n    collect_only: bool | None = None,\n    pyargs: bool | None = None,\n    ignore: list[str] | None = None,\n    ignore_glob: list[str] | None = None,\n    deselect: str | None = None,\n    confcutdir: str | None = None,\n    noconftest: bool | None = None,\n    keep_duplicates: bool | None = None,\n    collect_in_virtualenv: bool | None = None,\n    import_mode: Literal[\"prepend\", \"append\", \"importlib\"] | None = None,\n    doctest_modules: bool | None = None,\n    doctest_report: Literal[\"none\", \"cdiff\", \"ndiff\", \"udiff\", \"only_first_failure\"] | None = None,\n    doctest_glob: str | None = None,\n    doctest_ignore_import_errors: bool | None = None,\n    doctest_continue_on_failure: bool | None = None,\n    basetemp: str | None = None,\n    plugins: list[str] | None = None,\n    no_plugins: list[str] | None = None,\n    trace_config: bool | None = None,\n    debug: str | None = None,\n    override_ini: str | None = None,\n    assert_mode: str | None = None,\n    setup_only: bool | None = None,\n    setup_show: bool | None = None,\n    setup_plan: bool | None = None,\n    log_level: str | None = None,\n    log_format: str | None = None,\n    log_date_format: str | None = None,\n    log_cli_level: tuple[str, str] | None = None,\n    log_cli_format: str | None = None,\n    log_cli_date_format: str | None = None,\n    log_file: str | None = None,\n    log_file_level: str | None = None,\n    log_file_format: str | None = None,\n    log_file_date_format: str | None = None,\n    log_auto_indent: str | None = None,\n) -&gt; int:\n    \"\"\"Run `pytest`.\n\n    Parameters:\n        *paths: Files or directories to select tests from.\n        select: Only run tests which match the given substring expression. An expression is a Python evaluatable expression where all names are substring-matched against test names and their parent classes. Example: -k 'test_method or test_other' matches all test functions and classes whose name contains 'test_method' or 'test_other', while -k 'not test_method' matches those that don't contain 'test_method' in their names. -k 'not test_method and not test_other' will eliminate the matches. Additionally keywords are matched to classes and functions containing extra names in their 'extra_keyword_matches' set, as well as functions which have names assigned directly to them. The matching is case-insensitive.\n        select_markers: Only run tests matching given mark expression. For example: -m 'mark1 and not mark2'.\n        markers: show markers (builtin, plugin and per-project ones).\n        exitfirst: Exit instantly on first error or failed test\n        fixtures: Show available fixtures, sorted by plugin appearance (fixtures with leading '_' are only shown with '-v')\n        fixtures_per_test: Show fixtures per test\n        pdb: Start the interactive Python debugger on errors or KeyboardInterrupt\n        pdbcls: Specify a custom interactive Python debugger for use with --pdb.For example: --pdbcls IPython.terminal.debugger:TerminalPdb\n        trace: Immediately break when running each test\n        capture: Per-test capturing method: one of fd|sys|no|tee-sys\n        runxfail: Report the results of xfail tests as if they were not marked\n        last_failed: Rerun only the tests that failed at the last run (or all if none failed)\n        failed_first: Run all tests, but run the last failures first. This may re-order tests and thus lead to repeated fixture setup/teardown.\n        new_first: Run tests from new files first, then the rest of the tests sorted by file mtime\n        cache_show: Show cache contents, don't perform collection or tests. Optional argument: glob (default: '*').\n        cache_clear: Remove all cache contents at start of test run\n        last_failed_no_failures: Which tests to run with no previously (known) failures\n        stepwise: Exit on test failure and continue from last failing test next time\n        stepwise_skip: Ignore the first failing test but stop on the next failing test. Implicitly enables --stepwise.\n        durations: Show N slowest setup/test durations (N 0 for all)\n        durations_min: Minimal duration in seconds for inclusion in slowest list. Default: 0.005.\n        verbose: Increase verbosity\n        no_header: Disable header\n        no_summary: Disable summary\n        quiet: Decrease verbosity\n        verbosity: Set verbosity. Default: 0.\n        show_extra_summary: Show extra test summary info as specified by chars: (f)ailed, (E)rror, (s)kipped, (x)failed, (X)passed, (p)assed, (P)assed with output, (a)ll except passed (p/P), or (A)ll. (w)arnings are enabled by default (see --disable-warnings), 'N' can be used to reset the list. (default: 'fE').\n        disable_pytest_warnings: Disable warnings summary\n        showlocals: Show locals in tracebacks (disabled by default)\n        no_showlocals: Hide locals in tracebacks (negate --showlocals passed through addopts)\n        traceback: Traceback print mode (auto/long/short/line/native/no)\n        show_capture: Controls how captured stdout/stderr/log is shown on failed tests. Default: all.\n        full_trace: Don't cut any tracebacks (default is to cut)\n        color: Color terminal output (yes/no/auto)\n        code_highlight: {yes,no} Whether code should be highlighted (only if --color is also enabled). Default: yes.\n        pastebin: Send failed|all info to bpaste.net pastebin service\n        junit_xml: Create junit-xml style report file at given path\n        junit_prefix: Prepend prefix to classnames in junit-xml output\n        pythonwarnings: Set which warnings to report, see -W option of Python itself\n        maxfail: Exit after first num failures or errors\n        strict_config: Any warnings encountered while parsing the `pytest` section of the configuration file raise errors\n        strict_markers: Markers not registered in the `markers` section of the configuration file raise errors\n        config_file file: Load configuration from `file` instead of trying to locate one of the implicit configuration files\n        continue_on_collection_errors: Force test execution even if collection errors occur\n        rootdir: Define root directory for tests. Can be relative path: 'root_dir', './root_dir', 'root_dir/another_dir/'; absolute path: '/home/user/root_dir'; path with variables: '$HOME/root_dir'.\n        collect_only: Only collect tests, don't execute them\n        pyargs: Try to interpret all arguments as Python packages\n        ignore: Ignore path during collection (multi-allowed)\n        ignore_glob: Ignore path pattern during collection (multi-allowed)\n        deselect: Deselect item (via node id prefix) during collection (multi-allowed)\n        confcutdir: Only load conftest.py's relative to specified dir\n        noconftest: Don't load any conftest.py files\n        keep_duplicates: Keep duplicate tests\n        collect_in_virtualenv: Don't ignore tests in a local virtualenv directory\n        import_mode: Prepend/append to sys.path when importing test modules and conftest files. Default: prepend.\n        doctest_modules: Run doctests in all .py modules\n        doctest_report: Choose another output format for diffs on doctest failure\n        doctest_glob pat: Doctests file matching pattern, default: test*.txt\n        doctest_ignore_import_errors: Ignore doctest ImportErrors\n        doctest_continue_on_failure: For a given doctest, continue to run after the first failure\n        basetemp: Base temporary directory for this test run. (Warning: this directory is removed if it exists.)\n        plugins: Early-load given plugin module name or entry point (multi-allowed). To avoid loading of plugins, use the `no:` prefix, e.g. `no:doctest`.\n        no_plugins: Early-load given plugin module name or entry point (multi-allowed). To avoid loading of plugins, use the `no:` prefix, e.g. `no:doctest`.\n        trace_config: Trace considerations of conftest.py files\n        debug: Store internal tracing debug information in this log file. This file is opened with 'w' and truncated as a result, care advised. Default: pytestdebug.log.\n        override_ini: Override ini option with \"option value\" style, e.g. `-o xfail_strict True -o cache_dir cache`.\n        assert_mode: Control assertion debugging tools. 'plain' performs no assertion debugging. 'rewrite' (the default) rewrites assert statements in test modules on import to provide assert expression information.\n        setup_only: Only setup fixtures, do not execute tests\n        setup_show: Show setup of fixtures while executing tests\n        setup_plan: Show what fixtures and tests would be executed but don't execute anything\n        log_level: Level of messages to catch/display. Not set by default, so it depends on the root/parent log handler's effective level, where it is \"WARNING\" by default.\n        log_format: Log format used by the logging module.\n        log_date_format: Log date format used by the logging module.\n        log_cli_level: logging level.\n        log_cli_format: Log format used by the logging module.\n        log_cli_date_format: Log date format used by the logging module.\n        log_file: Path to a file when logging will be written to.\n        log_file_level: Log file logging level.\n        log_file_format: Log format used by the logging module.\n        log_file_date_format: Log date format used by the logging module.\n        log_auto_indent: Auto-indent multiline messages passed to the logging module. Accepts true|on, false|off or an integer.\n    \"\"\"\n    from pytest import main as pytest  # noqa: PT013\n\n    cli_args = list(paths)\n\n    if select:\n        cli_args.append(\"-k\")\n        cli_args.append(select)\n\n    if select_markers:\n        cli_args.append(\"-m\")\n        cli_args.append(select_markers)\n\n    if markers:\n        cli_args.append(\"--markers\")\n\n    if exitfirst:\n        cli_args.append(\"--exitfirst\")\n\n    if fixtures:\n        cli_args.append(\"--fixtures\")\n\n    if fixtures_per_test:\n        cli_args.append(\"--fixtures-per-test\")\n\n    if pdb:\n        cli_args.append(\"--pdb\")\n\n    if pdbcls:\n        cli_args.append(\"--pdbcls\")\n        cli_args.append(pdbcls)\n\n    if trace:\n        cli_args.append(\"--trace\")\n\n    if capture:\n        cli_args.append(\"--capture\")\n\n    if runxfail:\n        cli_args.append(\"--runxfail\")\n\n    if last_failed:\n        cli_args.append(\"--last-failed\")\n\n    if failed_first:\n        cli_args.append(\"--failed-first\")\n\n    if new_first:\n        cli_args.append(\"--new-first\")\n\n    if cache_show:\n        cli_args.append(\"--cache-show\")\n        cli_args.append(cache_show)\n\n    if cache_clear:\n        cli_args.append(\"--cache-clear\")\n\n    if last_failed_no_failures:\n        cli_args.append(\"--last-failed-no-failures\")\n        cli_args.append(last_failed_no_failures)\n\n    if stepwise:\n        cli_args.append(\"--stepwise\")\n\n    if stepwise_skip:\n        cli_args.append(\"--stepwise-skip\")\n\n    if durations:\n        cli_args.append(\"--durations\")\n        cli_args.append(str(durations))\n\n    if durations_min:\n        cli_args.append(\"--durations-min\")\n        cli_args.append(str(durations_min))\n\n    if verbose:\n        cli_args.append(\"--verbose\")\n\n    if no_header:\n        cli_args.append(\"--no-header\")\n\n    if no_summary:\n        cli_args.append(\"--no-summary\")\n\n    if quiet:\n        cli_args.append(\"--quiet\")\n\n    if verbosity:\n        cli_args.append(\"--verbosity\")\n        cli_args.append(str(verbosity))\n\n    if show_extra_summary:\n        cli_args.append(\"-r\")\n        cli_args.append(show_extra_summary)\n\n    if disable_pytest_warnings:\n        cli_args.append(\"--disable-pytest-warnings\")\n\n    if showlocals:\n        cli_args.append(\"--showlocals\")\n\n    if no_showlocals:\n        cli_args.append(\"--no-showlocals\")\n\n    if traceback:\n        cli_args.append(\"--tb\")\n        cli_args.append(traceback)\n\n    if show_capture:\n        cli_args.append(\"--show-capture\")\n        cli_args.append(show_capture)\n\n    if full_trace:\n        cli_args.append(\"--full-trace\")\n\n    if color:\n        cli_args.append(\"--color\")\n        cli_args.append(color)\n\n    if code_highlight:\n        cli_args.append(\"--code-highlight\")\n\n    if pastebin:\n        cli_args.append(\"--pastebin\")\n        cli_args.append(pastebin)\n\n    if junit_xml:\n        cli_args.append(\"--junit-xml\")\n        cli_args.append(junit_xml)\n\n    if junit_prefix:\n        cli_args.append(\"--junit-prefix\")\n        cli_args.append(junit_prefix)\n\n    if pythonwarnings:\n        cli_args.append(\"--pythonwarnings\")\n        cli_args.append(pythonwarnings)\n\n    if maxfail:\n        cli_args.append(\"--maxfail\")\n        cli_args.append(str(maxfail))\n\n    if strict_config:\n        cli_args.append(\"--strict-config\")\n\n    if strict_markers:\n        cli_args.append(\"--strict-markers\")\n\n    if config_file:\n        cli_args.append(\"-c\")\n        cli_args.append(config_file)\n\n    if continue_on_collection_errors:\n        cli_args.append(\"--continue-on-collection-errors\")\n\n    if rootdir:\n        cli_args.append(\"--rootdir\")\n        cli_args.append(rootdir)\n\n    if collect_only:\n        cli_args.append(\"--collect-only\")\n\n    if pyargs:\n        cli_args.append(\"--pyargs\")\n\n    if ignore:\n        for ign in ignore:\n            cli_args.append(\"--ignore\")\n            cli_args.append(ign)\n\n    if ignore_glob:\n        for ign_glob in ignore_glob:\n            cli_args.append(\"--ignore-glob\")\n            cli_args.append(ign_glob)\n\n    if deselect:\n        cli_args.append(\"--deselect\")\n        cli_args.append(deselect)\n\n    if confcutdir:\n        cli_args.append(\"--confcutdir\")\n        cli_args.append(confcutdir)\n\n    if noconftest:\n        cli_args.append(\"--noconftest\")\n\n    if keep_duplicates:\n        cli_args.append(\"--keep-duplicates\")\n\n    if collect_in_virtualenv:\n        cli_args.append(\"--collect-in-virtualenv\")\n\n    if import_mode:\n        cli_args.append(\"--import-mode\")\n        cli_args.append(import_mode)\n\n    if doctest_modules:\n        cli_args.append(\"--doctest-modules\")\n\n    if doctest_report:\n        cli_args.append(\"--doctest-report\")\n        cli_args.append(doctest_report)\n\n    if doctest_glob:\n        cli_args.append(\"--doctest-glob\")\n        cli_args.append(doctest_glob)\n\n    if doctest_ignore_import_errors:\n        cli_args.append(\"--doctest-ignore-import-errors\")\n\n    if doctest_continue_on_failure:\n        cli_args.append(\"--doctest-continue-on-failure\")\n\n    if basetemp:\n        cli_args.append(\"--basetemp\")\n        cli_args.append(basetemp)\n\n    if plugins:\n        for plugin in plugins:\n            cli_args.append(\"-p\")\n            cli_args.append(plugin)\n\n    if no_plugins:\n        for no_plugin in no_plugins:\n            cli_args.append(\"-p\")\n            cli_args.append(f\"no:{no_plugin}\")\n\n    if trace_config:\n        cli_args.append(\"--trace-config\")\n\n    if debug:\n        cli_args.append(\"--debug\")\n        cli_args.append(debug)\n\n    if override_ini:\n        cli_args.append(\"--override-ini\")\n        cli_args.append(override_ini)\n\n    if assert_mode:\n        cli_args.append(\"--assert\")\n        cli_args.append(assert_mode)\n\n    if setup_only:\n        cli_args.append(\"--setup-only\")\n\n    if setup_show:\n        cli_args.append(\"--setup-show\")\n\n    if setup_plan:\n        cli_args.append(\"--setup-plan\")\n\n    if log_level:\n        cli_args.append(\"--log-level\")\n        cli_args.append(log_level)\n\n    if log_format:\n        cli_args.append(\"--log-format\")\n        cli_args.append(log_format)\n\n    if log_date_format:\n        cli_args.append(\"--log-date-format\")\n        cli_args.append(log_date_format)\n\n    if log_cli_level:\n        cli_args.append(\"--log-cli-level\")\n        cli_args.extend(log_cli_level)\n\n    if log_cli_format:\n        cli_args.append(\"--log-cli-format\")\n        cli_args.append(log_cli_format)\n\n    if log_cli_date_format:\n        cli_args.append(\"--log-cli-date-format\")\n        cli_args.append(log_cli_date_format)\n\n    if log_file:\n        cli_args.append(\"--log-file\")\n        cli_args.append(log_file)\n\n    if log_file_level:\n        cli_args.append(\"--log-file-level\")\n        cli_args.append(log_file_level)\n\n    if log_file_format:\n        cli_args.append(\"--log-file-format\")\n        cli_args.append(log_file_format)\n\n    if log_file_date_format:\n        cli_args.append(\"--log-file-date-format\")\n        cli_args.append(log_file_date_format)\n\n    if log_auto_indent:\n        cli_args.append(\"--log-auto-indent\")\n        cli_args.append(log_auto_indent)\n\n    return pytest(cli_args)\n</code></pre>"},{"location":"reference/duty/callables/ruff/","title":"ruff","text":""},{"location":"reference/duty/callables/ruff/#duty.callables.ruff","title":"ruff","text":"<p>Callable for Ruff.</p> <p>Functions:</p> <ul> <li> <code>check</code>           \u2013            <p>Run Ruff on the given files or directories.</p> </li> <li> <code>clean</code>           \u2013            <p>Clear any caches in the current directory and any subdirectories.</p> </li> <li> <code>config</code>           \u2013            <p>List or describe the available configuration options.</p> </li> <li> <code>format</code>           \u2013            <p>Run Ruff formatter on the given files or directories.</p> </li> <li> <code>linter</code>           \u2013            <p>List all supported upstream linters.</p> </li> <li> <code>rule</code>           \u2013            <p>Explain a rule.</p> </li> </ul>"},{"location":"reference/duty/callables/ruff/#duty.callables.ruff.check","title":"check","text":"<pre><code>check(\n    *files: str,\n    config: str | None = None,\n    fix: bool | None = None,\n    show_source: bool | None = None,\n    show_fixes: bool | None = None,\n    diff: bool | None = None,\n    watch: bool | None = None,\n    fix_only: bool | None = None,\n    output_format: str | None = None,\n    statistics: bool | None = None,\n    add_noqa: bool | None = None,\n    show_files: bool | None = None,\n    show_settings: bool | None = None,\n    select: list[str] | None = None,\n    ignore: list[str] | None = None,\n    extend_select: list[str] | None = None,\n    per_file_ignores: dict[str, list[str]] | None = None,\n    fixable: list[str] | None = None,\n    unfixable: list[str] | None = None,\n    exclude: list[str] | None = None,\n    extend_exclude: list[str] | None = None,\n    respect_gitignore: bool | None = None,\n    force_exclude: bool | None = None,\n    no_cache: bool | None = None,\n    isolated: bool | None = None,\n    cache_dir: str | None = None,\n    stdin_filename: str | None = None,\n    exit_zero: bool | None = None,\n    exit_non_zero_on_fix: bool | None = None,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False\n) -&gt; int\n</code></pre> <p>Run Ruff on the given files or directories.</p> <p>Parameters:</p> <ul> <li> <code>fix</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Attempt to automatically fix lint violations</p> </li> <li> <code>config</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Path to the <code>pyproject.toml</code> or <code>ruff.toml</code> file to use for configuration</p> </li> <li> <code>show_source</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show violations with source code</p> </li> <li> <code>show_fixes</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show an enumeration of all autofixed lint violations</p> </li> <li> <code>diff</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Avoid writing any fixed files back; instead, output a diff for each changed file to stdout</p> </li> <li> <code>watch</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Run in watch mode by re-running whenever files change</p> </li> <li> <code>fix_only</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Fix any fixable lint violations, but don't report on leftover violations. Implies <code>--fix</code></p> </li> <li> <code>output_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Output serialization format for violations [env: RUFF_FORMAT=] [possible values: text, json, junit, grouped, github, gitlab, pylint]</p> </li> <li> <code>statistics</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Show counts for every rule with at least one violation</p> </li> <li> <code>add_noqa</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable automatic additions of <code>noqa</code> directives to failing lines</p> </li> <li> <code>show_files</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>See the files Ruff will be run against with the current settings</p> </li> <li> <code>show_settings</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>See the settings Ruff will use to lint a given Python file</p> </li> <li> <code>select</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Comma-separated list of rule codes to enable (or ALL, to enable all rules)</p> </li> <li> <code>ignore</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Comma-separated list of rule codes to disable</p> </li> <li> <code>extend_select</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Like --select, but adds additional rule codes on top of the selected ones</p> </li> <li> <code>per_file_ignores</code>             (<code>dict[str, list[str]] | None</code>, default:                 <code>None</code> )         \u2013          <p>List of mappings from file pattern to code to exclude</p> </li> <li> <code>fixable</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>List of rule codes to treat as eligible for autofix. Only applicable when autofix itself is enabled (e.g., via <code>--fix</code>)</p> </li> <li> <code>unfixable</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>List of rule codes to treat as ineligible for autofix. Only applicable when autofix itself is enabled (e.g., via <code>--fix</code>)</p> </li> <li> <code>exclude</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>List of paths, used to omit files and/or directories from analysis</p> </li> <li> <code>extend_exclude</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Like --exclude, but adds additional files and directories on top of those already excluded</p> </li> <li> <code>respect_gitignore</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Respect file exclusions via <code>.gitignore</code> and other standard ignore files</p> </li> <li> <code>force_exclude</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enforce exclusions, even for paths passed to Ruff directly on the command-line</p> </li> <li> <code>no_cache</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable cache reads</p> </li> <li> <code>isolated</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore all configuration files</p> </li> <li> <code>cache_dir</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Path to the cache directory [env: RUFF_CACHE_DIR=]</p> </li> <li> <code>stdin_filename</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The name of the file when passing it through stdin</p> </li> <li> <code>exit_zero</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit with status code \"0\", even upon detecting lint violations</p> </li> <li> <code>exit_non_zero_on_fix</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Exit with a non-zero status code if any files were modified via autofix, even if no lint violations remain</p> </li> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose logging.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Print lint violations, but nothing else.</p> </li> <li> <code>silent</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Disable all logging (but still exit with status code \"1\" upon detecting lint violations).</p> </li> </ul> Source code in <code>src/duty/callables/ruff.py</code> <pre><code>@lazy(name=\"ruff.check\")\ndef check(\n    *files: str,\n    config: str | None = None,\n    fix: bool | None = None,\n    show_source: bool | None = None,\n    show_fixes: bool | None = None,\n    diff: bool | None = None,\n    watch: bool | None = None,\n    fix_only: bool | None = None,\n    output_format: str | None = None,\n    statistics: bool | None = None,\n    add_noqa: bool | None = None,\n    show_files: bool | None = None,\n    show_settings: bool | None = None,\n    select: list[str] | None = None,\n    ignore: list[str] | None = None,\n    extend_select: list[str] | None = None,\n    per_file_ignores: dict[str, list[str]] | None = None,\n    fixable: list[str] | None = None,\n    unfixable: list[str] | None = None,\n    exclude: list[str] | None = None,\n    extend_exclude: list[str] | None = None,\n    respect_gitignore: bool | None = None,\n    force_exclude: bool | None = None,\n    no_cache: bool | None = None,\n    isolated: bool | None = None,\n    cache_dir: str | None = None,\n    stdin_filename: str | None = None,\n    exit_zero: bool | None = None,\n    exit_non_zero_on_fix: bool | None = None,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False,\n) -&gt; int:\n    \"\"\"Run Ruff on the given files or directories.\n\n    Parameters:\n        fix: Attempt to automatically fix lint violations\n        config: Path to the `pyproject.toml` or `ruff.toml` file to use for configuration\n        show_source: Show violations with source code\n        show_fixes: Show an enumeration of all autofixed lint violations\n        diff: Avoid writing any fixed files back; instead, output a diff for each changed file to stdout\n        watch: Run in watch mode by re-running whenever files change\n        fix_only: Fix any fixable lint violations, but don't report on leftover violations. Implies `--fix`\n        output_format: Output serialization format for violations [env: RUFF_FORMAT=] [possible values: text, json, junit, grouped, github, gitlab, pylint]\n        statistics: Show counts for every rule with at least one violation\n        add_noqa: Enable automatic additions of `noqa` directives to failing lines\n        show_files: See the files Ruff will be run against with the current settings\n        show_settings: See the settings Ruff will use to lint a given Python file\n        select: Comma-separated list of rule codes to enable (or ALL, to enable all rules)\n        ignore: Comma-separated list of rule codes to disable\n        extend_select: Like --select, but adds additional rule codes on top of the selected ones\n        per_file_ignores: List of mappings from file pattern to code to exclude\n        fixable: List of rule codes to treat as eligible for autofix. Only applicable when autofix itself is enabled (e.g., via `--fix`)\n        unfixable: List of rule codes to treat as ineligible for autofix. Only applicable when autofix itself is enabled (e.g., via `--fix`)\n        exclude: List of paths, used to omit files and/or directories from analysis\n        extend_exclude: Like --exclude, but adds additional files and directories on top of those already excluded\n        respect_gitignore: Respect file exclusions via `.gitignore` and other standard ignore files\n        force_exclude: Enforce exclusions, even for paths passed to Ruff directly on the command-line\n        no_cache: Disable cache reads\n        isolated: Ignore all configuration files\n        cache_dir: Path to the cache directory [env: RUFF_CACHE_DIR=]\n        stdin_filename: The name of the file when passing it through stdin\n        exit_zero: Exit with status code \"0\", even upon detecting lint violations\n        exit_non_zero_on_fix: Exit with a non-zero status code if any files were modified via autofix, even if no lint violations remain\n        verbose: Enable verbose logging.\n        quiet: Print lint violations, but nothing else.\n        silent: Disable all logging (but still exit with status code \"1\" upon detecting lint violations).\n    \"\"\"\n    cli_args = list(files)\n\n    if fix:\n        cli_args.append(\"--fix\")\n\n    if show_source:\n        cli_args.append(\"--show-source\")\n\n    if show_fixes:\n        cli_args.append(\"--show-fixes\")\n\n    if diff:\n        cli_args.append(\"--diff\")\n\n    if watch:\n        cli_args.append(\"--watch\")\n\n    if fix_only:\n        cli_args.append(\"--fix-only\")\n\n    if output_format:\n        cli_args.append(\"--format\")\n        cli_args.append(output_format)\n\n    if config:\n        cli_args.append(\"--config\")\n        cli_args.append(config)\n\n    if statistics:\n        cli_args.append(\"--statistics\")\n\n    if add_noqa:\n        cli_args.append(\"--add-noqa\")\n\n    if show_files:\n        cli_args.append(\"--show-files\")\n\n    if show_settings:\n        cli_args.append(\"--show-settings\")\n\n    if select:\n        cli_args.append(\"--select\")\n        cli_args.append(\",\".join(select))\n\n    if ignore:\n        cli_args.append(\"--ignore\")\n        cli_args.append(\",\".join(ignore))\n\n    if extend_select:\n        cli_args.append(\"--extend-select\")\n        cli_args.append(\",\".join(extend_select))\n\n    if per_file_ignores:\n        cli_args.append(\"--per-file-ignores\")\n        cli_args.append(\n            \" \".join(f\"{path}:{','.join(codes)}\" for path, codes in per_file_ignores.items()),\n        )\n\n    if fixable:\n        cli_args.append(\"--fixable\")\n        cli_args.append(\",\".join(fixable))\n\n    if unfixable:\n        cli_args.append(\"--unfixable\")\n        cli_args.append(\",\".join(unfixable))\n\n    if exclude:\n        cli_args.append(\"--exclude\")\n        cli_args.append(\",\".join(exclude))\n\n    if extend_exclude:\n        cli_args.append(\"--extend-exclude\")\n        cli_args.append(\",\".join(extend_exclude))\n\n    if respect_gitignore:\n        cli_args.append(\"--respect-gitignore\")\n\n    if force_exclude:\n        cli_args.append(\"--force-exclude\")\n\n    if no_cache:\n        cli_args.append(\"--no-cache\")\n\n    if isolated:\n        cli_args.append(\"--isolated\")\n\n    if cache_dir:\n        cli_args.append(\"--cache-dir\")\n        cli_args.append(cache_dir)\n\n    if stdin_filename:\n        cli_args.append(\"--stdin-filename\")\n        cli_args.append(stdin_filename)\n\n    if exit_zero:\n        cli_args.append(\"--exit-zero\")\n\n    if exit_non_zero_on_fix:\n        cli_args.append(\"--exit-non-zero-on-fix\")\n\n    return _run(\"check\", *cli_args, verbose=verbose, quiet=quiet, silent=silent)\n</code></pre>"},{"location":"reference/duty/callables/ruff/#duty.callables.ruff.clean","title":"clean","text":"<pre><code>clean(\n    *,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False\n) -&gt; int\n</code></pre> <p>Clear any caches in the current directory and any subdirectories.</p> <p>Parameters:</p> <ul> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose logging.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Print lint violations, but nothing else.</p> </li> <li> <code>silent</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Disable all logging (but still exit with status code \"1\" upon detecting lint violations).</p> </li> </ul> Source code in <code>src/duty/callables/ruff.py</code> <pre><code>@lazy(name=\"ruff.clean\")\ndef clean(\n    *,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False,\n) -&gt; int:\n    \"\"\"Clear any caches in the current directory and any subdirectories.\n\n    Parameters:\n        verbose: Enable verbose logging.\n        quiet: Print lint violations, but nothing else.\n        silent: Disable all logging (but still exit with status code \"1\" upon detecting lint violations).\n    \"\"\"\n    return _run(\"clean\", verbose=verbose, quiet=quiet, silent=silent)\n</code></pre>"},{"location":"reference/duty/callables/ruff/#duty.callables.ruff.config","title":"config","text":"<pre><code>config(\n    *,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False\n) -&gt; int\n</code></pre> <p>List or describe the available configuration options.</p> <p>Parameters:</p> <ul> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose logging.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Print lint violations, but nothing else.</p> </li> <li> <code>silent</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Disable all logging (but still exit with status code \"1\" upon detecting lint violations).</p> </li> </ul> Source code in <code>src/duty/callables/ruff.py</code> <pre><code>@lazy(name=\"ruff.config\")\ndef config(\n    *,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False,\n) -&gt; int:\n    \"\"\"List or describe the available configuration options.\n\n    Parameters:\n        verbose: Enable verbose logging.\n        quiet: Print lint violations, but nothing else.\n        silent: Disable all logging (but still exit with status code \"1\" upon detecting lint violations).\n    \"\"\"\n    return _run(\"config\", verbose=verbose, quiet=quiet, silent=silent)\n</code></pre>"},{"location":"reference/duty/callables/ruff/#duty.callables.ruff.format","title":"format","text":"<pre><code>format(\n    *files: str,\n    config: str | None = None,\n    check: bool | None = None,\n    diff: bool | None = None,\n    target_version: str | None = None,\n    preview: bool | None = None,\n    exclude: list[str] | None = None,\n    extend_exclude: list[str] | None = None,\n    respect_gitignore: bool | None = None,\n    force_exclude: bool | None = None,\n    no_cache: bool | None = None,\n    isolated: bool | None = None,\n    cache_dir: str | None = None,\n    stdin_filename: str | None = None,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False\n) -&gt; int\n</code></pre> <p>Run Ruff formatter on the given files or directories.</p> <p>Parameters:</p> <ul> <li> <code>check</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Avoid writing any formatted files back; instead, exit with a non-zero status code if any files would have been modified, and zero otherwise</p> </li> <li> <code>config</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Path to the <code>pyproject.toml</code> or <code>ruff.toml</code> file to use for configuration</p> </li> <li> <code>diff</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Avoid writing any fixed files back; instead, output a diff for each changed file to stdout</p> </li> <li> <code>target_version</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The minimum Python version that should be supported [possible values: py37, py38, py39, py310, py311, py312]</p> </li> <li> <code>preview</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enable preview mode; enables unstable formatting</p> </li> <li> <code>exclude</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>List of paths, used to omit files and/or directories from analysis</p> </li> <li> <code>extend_exclude</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Like --exclude, but adds additional files and directories on top of those already excluded</p> </li> <li> <code>respect_gitignore</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Respect file exclusions via <code>.gitignore</code> and other standard ignore files</p> </li> <li> <code>force_exclude</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Enforce exclusions, even for paths passed to Ruff directly on the command-line</p> </li> <li> <code>no_cache</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Disable cache reads</p> </li> <li> <code>isolated</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Ignore all configuration files</p> </li> <li> <code>cache_dir</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Path to the cache directory [env: RUFF_CACHE_DIR=]</p> </li> <li> <code>stdin_filename</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>The name of the file when passing it through stdin</p> </li> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose logging.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Print lint violations, but nothing else.</p> </li> <li> <code>silent</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Disable all logging (but still exit with status code \"1\" upon detecting lint violations).</p> </li> </ul> Source code in <code>src/duty/callables/ruff.py</code> <pre><code>@lazy(name=\"ruff.format\")\ndef format(\n    *files: str,\n    config: str | None = None,\n    check: bool | None = None,\n    diff: bool | None = None,\n    target_version: str | None = None,\n    preview: bool | None = None,\n    exclude: list[str] | None = None,\n    extend_exclude: list[str] | None = None,\n    respect_gitignore: bool | None = None,\n    force_exclude: bool | None = None,\n    no_cache: bool | None = None,\n    isolated: bool | None = None,\n    cache_dir: str | None = None,\n    stdin_filename: str | None = None,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False,\n) -&gt; int:\n    \"\"\"Run Ruff formatter on the given files or directories.\n\n    Parameters:\n        check: Avoid writing any formatted files back; instead, exit with a non-zero status code if any files would have been modified, and zero otherwise\n        config: Path to the `pyproject.toml` or `ruff.toml` file to use for configuration\n        diff: Avoid writing any fixed files back; instead, output a diff for each changed file to stdout\n        target_version: The minimum Python version that should be supported [possible values: py37, py38, py39, py310, py311, py312]\n        preview: Enable preview mode; enables unstable formatting\n        exclude: List of paths, used to omit files and/or directories from analysis\n        extend_exclude: Like --exclude, but adds additional files and directories on top of those already excluded\n        respect_gitignore: Respect file exclusions via `.gitignore` and other standard ignore files\n        force_exclude: Enforce exclusions, even for paths passed to Ruff directly on the command-line\n        no_cache: Disable cache reads\n        isolated: Ignore all configuration files\n        cache_dir: Path to the cache directory [env: RUFF_CACHE_DIR=]\n        stdin_filename: The name of the file when passing it through stdin\n        verbose: Enable verbose logging.\n        quiet: Print lint violations, but nothing else.\n        silent: Disable all logging (but still exit with status code \"1\" upon detecting lint violations).\n    \"\"\"\n    cli_args = list(files)\n\n    if check:\n        cli_args.append(\"--check\")\n\n    if diff:\n        cli_args.append(\"--diff\")\n\n    if config:\n        cli_args.append(\"--config\")\n        cli_args.append(config)\n\n    if target_version:\n        cli_args.append(\"--target-version\")\n        cli_args.append(target_version)\n\n    if preview:\n        cli_args.append(\"--preview\")\n\n    if exclude:\n        cli_args.append(\"--exclude\")\n        cli_args.append(\",\".join(exclude))\n\n    if extend_exclude:\n        cli_args.append(\"--extend-exclude\")\n        cli_args.append(\",\".join(extend_exclude))\n\n    if respect_gitignore:\n        cli_args.append(\"--respect-gitignore\")\n\n    if force_exclude:\n        cli_args.append(\"--force-exclude\")\n\n    if no_cache:\n        cli_args.append(\"--no-cache\")\n\n    if isolated:\n        cli_args.append(\"--isolated\")\n\n    if cache_dir:\n        cli_args.append(\"--cache-dir\")\n        cli_args.append(cache_dir)\n\n    if stdin_filename:\n        cli_args.append(\"--stdin-filename\")\n        cli_args.append(stdin_filename)\n\n    return _run(\"format\", *cli_args, verbose=verbose, quiet=quiet, silent=silent)\n</code></pre>"},{"location":"reference/duty/callables/ruff/#duty.callables.ruff.linter","title":"linter","text":"<pre><code>linter(\n    *,\n    output_format: str | None = None,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False\n) -&gt; int\n</code></pre> <p>List all supported upstream linters.</p> <p>Parameters:</p> <ul> <li> <code>output_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Output format [default: pretty] [possible values: text, json, pretty].</p> </li> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose logging.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Print lint violations, but nothing else.</p> </li> <li> <code>silent</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Disable all logging (but still exit with status code \"1\" upon detecting lint violations).</p> </li> </ul> Source code in <code>src/duty/callables/ruff.py</code> <pre><code>@lazy(name=\"ruff.linter\")\ndef linter(\n    *,\n    output_format: str | None = None,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False,\n) -&gt; int:\n    \"\"\"List all supported upstream linters.\n\n    Parameters:\n        output_format: Output format [default: pretty] [possible values: text, json, pretty].\n        verbose: Enable verbose logging.\n        quiet: Print lint violations, but nothing else.\n        silent: Disable all logging (but still exit with status code \"1\" upon detecting lint violations).\n    \"\"\"\n    cli_args = []\n\n    if output_format:\n        cli_args.append(\"--format\")\n        cli_args.append(output_format)\n\n    return _run(\"linter\", *cli_args, verbose=verbose, quiet=quiet, silent=silent)\n</code></pre>"},{"location":"reference/duty/callables/ruff/#duty.callables.ruff.rule","title":"rule","text":"<pre><code>rule(\n    *,\n    output_format: str | None = None,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False\n) -&gt; int\n</code></pre> <p>Explain a rule.</p> <p>Parameters:</p> <ul> <li> <code>output_format</code>             (<code>str | None</code>, default:                 <code>None</code> )         \u2013          <p>Output format (default: pretty, possible values: text, json, pretty).</p> </li> <li> <code>verbose</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Enable verbose logging.</p> </li> <li> <code>quiet</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Print lint violations, but nothing else.</p> </li> <li> <code>silent</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Disable all logging (but still exit with status code \"1\" upon detecting lint violations).</p> </li> </ul> Source code in <code>src/duty/callables/ruff.py</code> <pre><code>@lazy(name=\"ruff.rule\")\ndef rule(\n    *,\n    output_format: str | None = None,\n    verbose: bool = False,\n    quiet: bool = False,\n    silent: bool = False,\n) -&gt; int:\n    \"\"\"Explain a rule.\n\n    Parameters:\n        output_format: Output format (default: pretty, possible values: text, json, pretty).\n        verbose: Enable verbose logging.\n        quiet: Print lint violations, but nothing else.\n        silent: Disable all logging (but still exit with status code \"1\" upon detecting lint violations).\n    \"\"\"\n    cli_args = []\n\n    if output_format:\n        cli_args.append(\"--format\")\n        cli_args.append(output_format)\n\n    return _run(\"rule\", *cli_args, verbose=verbose, quiet=quiet, silent=silent)\n</code></pre>"},{"location":"reference/duty/callables/safety/","title":"safety","text":""},{"location":"reference/duty/callables/safety/#duty.callables.safety","title":"safety","text":"<p>Callable for Safety.</p> <p>Functions:</p> <ul> <li> <code>check</code>           \u2013            <p>Run the safety check command.</p> </li> </ul>"},{"location":"reference/duty/callables/safety/#duty.callables.safety.check","title":"check","text":"<pre><code>check(\n    requirements: str | Sequence[str],\n    *,\n    ignore_vulns: dict[str, str] | None = None,\n    formatter: Literal[\"json\", \"bare\", \"text\"] = \"text\",\n    full_report: bool = True\n) -&gt; bool\n</code></pre> <p>Run the safety check command.</p> <p>This function makes sure we load the original, unpatched version of safety.</p> <p>Parameters:</p> <ul> <li> <code>requirements</code>             (<code>str | Sequence[str]</code>)         \u2013          <p>Python \"requirements\" (list of pinned dependencies).</p> </li> <li> <code>ignore_vulns</code>             (<code>dict[str, str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Vulnerabilities to ignore.</p> </li> <li> <code>formatter</code>             (<code>Literal['json', 'bare', 'text']</code>, default:                 <code>'text'</code> )         \u2013          <p>Report format.</p> </li> <li> <code>full_report</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to output a full report.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>         \u2013          <p>Success/failure.</p> </li> </ul> Source code in <code>src/duty/callables/safety.py</code> <pre><code>@lazy(name=\"safety.check\")\ndef check(\n    requirements: str | Sequence[str],\n    *,\n    ignore_vulns: dict[str, str] | None = None,\n    formatter: Literal[\"json\", \"bare\", \"text\"] = \"text\",\n    full_report: bool = True,\n) -&gt; bool:\n    \"\"\"Run the safety check command.\n\n    This function makes sure we load the original, unpatched version of safety.\n\n    Parameters:\n        requirements: Python \"requirements\" (list of pinned dependencies).\n        ignore_vulns: Vulnerabilities to ignore.\n        formatter: Report format.\n        full_report: Whether to output a full report.\n\n    Returns:\n        Success/failure.\n    \"\"\"\n    # set default parameter values\n    ignore_vulns = ignore_vulns or {}\n\n    # undo possible patching\n    # see https://github.com/pyupio/safety/issues/348\n    for module in sys.modules:\n        if module.startswith(\"safety.\") or module == \"safety\":\n            del sys.modules[module]\n\n    importlib.invalidate_caches()\n\n    # reload original, unpatched safety\n    from safety.formatter import SafetyFormatter\n    from safety.safety import calculate_remediations, check\n    from safety.util import read_requirements\n\n    # check using safety as a library\n    if isinstance(requirements, (list, tuple, set)):\n        requirements = \"\\n\".join(requirements)\n    packages = list(read_requirements(StringIO(cast(str, requirements))))\n    vulns, db_full = check(packages=packages, ignore_vulns=ignore_vulns)\n    remediations = calculate_remediations(vulns, db_full)\n    output_report = SafetyFormatter(formatter).render_vulnerabilities(\n        announcements=[],\n        vulnerabilities=vulns,\n        remediations=remediations,\n        full=full_report,\n        packages=packages,\n    )\n\n    # print report, return status\n    if vulns:\n        print(output_report)  # noqa: T201\n        return False\n    return True\n</code></pre>"},{"location":"reference/duty/callables/ssort/","title":"ssort","text":""},{"location":"reference/duty/callables/ssort/#duty.callables.ssort","title":"ssort","text":"<p>Callable for ssort.</p> <p>Functions:</p> <ul> <li> <code>run</code>           \u2013            <p>Run <code>ssort</code>.</p> </li> </ul>"},{"location":"reference/duty/callables/ssort/#duty.callables.ssort.run","title":"run","text":"<pre><code>run(\n    *files: str,\n    diff: bool | None = None,\n    check: bool | None = None\n) -&gt; int\n</code></pre> <p>Run <code>ssort</code>.</p> <p>Parameters:</p> <ul> <li> <code>*files</code>             (<code>str</code>, default:                 <code>()</code> )         \u2013          <p>Files to format.</p> </li> <li> <code>diff</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Prints a diff of all changes ssort would make to a file.</p> </li> <li> <code>check</code>             (<code>bool | None</code>, default:                 <code>None</code> )         \u2013          <p>Check the file for unsorted statements. Returns 0 if nothing needs to be changed. Otherwise returns 1.</p> </li> </ul> Source code in <code>src/duty/callables/ssort.py</code> <pre><code>@lazy(name=\"ssort\")\ndef run(\n    *files: str,\n    diff: bool | None = None,\n    check: bool | None = None,\n) -&gt; int:\n    \"\"\"Run `ssort`.\n\n    Parameters:\n        *files: Files to format.\n        diff: Prints a diff of all changes ssort would make to a file.\n        check: Check the file for unsorted statements. Returns 0 if nothing needs to be changed. Otherwise returns 1.\n    \"\"\"\n    from ssort._main import main as ssort\n\n    cli_args = list(files)\n\n    if diff:\n        cli_args.append(\"--diff\")\n\n    if check:\n        cli_args.append(\"--check\")\n\n    old_sys_argv = sys.argv\n    sys.argv = [\"ssort*\", *cli_args]\n    try:\n        return ssort()\n    finally:\n        sys.argv = old_sys_argv\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}