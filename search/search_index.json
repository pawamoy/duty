{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Duty \u00a4 A simple task runner. Inspired by Invoke . Requirements \u00a4 Duty requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12 Installation \u00a4 With pip : python3.6 -m pip install duty With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 duty Quick start \u00a4 Create a duties.py file at the root of your repository. from duty import duty @duty def docs ( ctx ): ctx . run ( \"mkdocs build\" , title = \"Building documentation\" ) You can now use the command line tool to run it: duty docs See the Usage section in the documentation for more examples.","title":"Overview"},{"location":"#duty","text":"A simple task runner. Inspired by Invoke .","title":"Duty"},{"location":"#requirements","text":"Duty requires Python 3.6 or above. To install Python 3.6, I recommend using pyenv . # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3.6 pyenv install 3 .6.12 # make it available globally pyenv global system 3 .6.12","title":"Requirements"},{"location":"#installation","text":"With pip : python3.6 -m pip install duty With pipx : python3.6 -m pip install --user pipx pipx install --python python3.6 duty","title":"Installation"},{"location":"#quick-start","text":"Create a duties.py file at the root of your repository. from duty import duty @duty def docs ( ctx ): ctx . run ( \"mkdocs build\" , title = \"Building documentation\" ) You can now use the command line tool to run it: duty docs See the Usage section in the documentation for more examples.","title":"Quick start"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.6.0 - 2021-02-06 \u00a4 Compare with 0.5.0 This release greatly improves usability on the command line! You will now be able to override silent , capture and other options with arguments like --silent , --no-silent , --capture=both , etc. See Usage in the docs for details! Features \u00a4 Implement type casting based on annotations ( 52ea614 by Timoth\u00e9e Mazzucotelli). Improve CLI usage ( 93e10cd by Timoth\u00e9e Mazzucotelli). 0.5.0 - 2020-10-11 \u00a4 Compare with 0.4.1 Packaging \u00a4 Use failprint version 0.6.0 ( changelog ). 0.4.1 - 2020-10-05 \u00a4 Compare with 0.4.0 Bug Fixes \u00a4 Fix -d option parsing ( a004c7f by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Accept args and kwargs in decorator ( 567334f by Timoth\u00e9e Mazzucotelli). 0.4.0 - 2020-10-05 \u00a4 Compare with 0.3.1 Features \u00a4 Add list options and aliases ( c238110 by Timoth\u00e9e Mazzucotelli). 0.3.1 - 2020-10-04 \u00a4 Compare with 0.3.0 Bug Fixes \u00a4 Add missing failprint dependency ( 5b1663c by Timoth\u00e9e Mazzucotelli). 0.3.0 - 2020-10-04 \u00a4 Compare with 0.2.0 Bug Fixes \u00a4 Add missing __call__ method to Duty ( 290e283 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Better handle CLI arguments ( 144b33d by Timoth\u00e9e Mazzucotelli). Features \u00a4 Handle keyboard interruptions ( 1c5b594 by Timoth\u00e9e Mazzucotelli). 0.2.0 - 2020-10-02 \u00a4 Compare with 0.1.0 Features \u00a4 Initial features ( 3c395d3 by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2020-10-02 \u00a4 Compare with first commit Features \u00a4 Initial commit ( 371ef31 by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#060-2021-02-06","text":"Compare with 0.5.0 This release greatly improves usability on the command line! You will now be able to override silent , capture and other options with arguments like --silent , --no-silent , --capture=both , etc. See Usage in the docs for details!","title":"0.6.0 - 2021-02-06"},{"location":"changelog/#features","text":"Implement type casting based on annotations ( 52ea614 by Timoth\u00e9e Mazzucotelli). Improve CLI usage ( 93e10cd by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#050-2020-10-11","text":"Compare with 0.4.1","title":"0.5.0 - 2020-10-11"},{"location":"changelog/#packaging","text":"Use failprint version 0.6.0 ( changelog ).","title":"Packaging"},{"location":"changelog/#041-2020-10-05","text":"Compare with 0.4.0","title":"0.4.1 - 2020-10-05"},{"location":"changelog/#bug-fixes","text":"Fix -d option parsing ( a004c7f by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring","text":"Accept args and kwargs in decorator ( 567334f by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#040-2020-10-05","text":"Compare with 0.3.1","title":"0.4.0 - 2020-10-05"},{"location":"changelog/#features_1","text":"Add list options and aliases ( c238110 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#031-2020-10-04","text":"Compare with 0.3.0","title":"0.3.1 - 2020-10-04"},{"location":"changelog/#bug-fixes_1","text":"Add missing failprint dependency ( 5b1663c by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#030-2020-10-04","text":"Compare with 0.2.0","title":"0.3.0 - 2020-10-04"},{"location":"changelog/#bug-fixes_2","text":"Add missing __call__ method to Duty ( 290e283 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#code-refactoring_1","text":"Better handle CLI arguments ( 144b33d by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#features_2","text":"Handle keyboard interruptions ( 1c5b594 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#020-2020-10-02","text":"Compare with 0.1.0","title":"0.2.0 - 2020-10-02"},{"location":"changelog/#features_3","text":"Initial features ( 3c395d3 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#010-2020-10-02","text":"Compare with first commit","title":"0.1.0 - 2020-10-02"},{"location":"changelog/#features_4","text":"Initial commit ( 371ef31 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: cd duty make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run duty [ARGS...] . Run make help to see all the available actions! Tasks \u00a4 This project uses Duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd duty make setup Note If it fails for some reason, you'll need to install Poetry manually. You can install it with: python3 -m pip install --user pipx pipx install poetry Now you can try running make setup again, or simply poetry install . You now have the dependencies installed. You can run the application with poetry run duty [ARGS...] . Run make help to see all the available actions!","title":"Environment setup"},{"location":"contributing/#tasks","text":"This project uses Duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following: export PYTHON_VERSIONS= : this will run the task with only the current Python version run the task directly with poetry run duty TASK , or duty TASK if the environment was already activated through poetry shell The Makefile detects if the Poetry environment is activated, so make will work the same with the virtualenv activated or not.","title":"Tasks"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run make docs-regen run make docs-serve , go to http://localhost:8000 and check that everything looks good Before committing: run make format to auto-format the code run make check to check everything (fix any warning) run make test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"credits/","text":"Credits \u00a4 These projects were used to build duty . Thank you! python | poetry | copier-poetry Direct dependencies \u00a4 autoflake | black | cached-property | failprint | flake8-black | flake8-builtins | flake8-pytest-style | flake8-tidy-imports | flake8-variables-names | flakehell | git-changelog | httpx | ipython | isort | jinja2-cli | markdown-include | mkdocs | mkdocs-coverage | mkdocs-material | mkdocstrings | mypy | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | toml | wemake-python-styleguide Indirect dependencies \u00a4 ansimarkup | apipkg | appdirs | appnope | astor | astroid | atomicwrites | attrs | backcall | bandit | certifi | chardet | click | colorama | contextvars | coverage | darglint | dataclasses | decorator | docutils | entrypoints | eradicate | execnet | flake8 | flake8-bandit | flake8-broken-line | flake8-bugbear | flake8-commas | flake8-comprehensions | flake8-debugger | flake8-docstrings | flake8-eradicate | flake8-isort | flake8-plugin-utils | flake8-polyfill | flake8-quotes | flake8-rst-docstrings | flake8-string-format | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | ipython-genutils | jedi | Jinja2 | joblib | lazy-object-proxy | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pep8-naming | pexpect | pickleshare | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pylint | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | restructuredtext-lint | rfc3986 | six | smmap | sniffio | snowballstemmer | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | wrapt | zipp More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build duty . Thank you! python | poetry | copier-poetry","title":"Credits"},{"location":"credits/#direct-dependencies","text":"autoflake | black | cached-property | failprint | flake8-black | flake8-builtins | flake8-pytest-style | flake8-tidy-imports | flake8-variables-names | flakehell | git-changelog | httpx | ipython | isort | jinja2-cli | markdown-include | mkdocs | mkdocs-coverage | mkdocs-material | mkdocstrings | mypy | pytest | pytest-cov | pytest-randomly | pytest-sugar | pytest-xdist | toml | wemake-python-styleguide","title":"Direct dependencies"},{"location":"credits/#indirect-dependencies","text":"ansimarkup | apipkg | appdirs | appnope | astor | astroid | atomicwrites | attrs | backcall | bandit | certifi | chardet | click | colorama | contextvars | coverage | darglint | dataclasses | decorator | docutils | entrypoints | eradicate | execnet | flake8 | flake8-bandit | flake8-broken-line | flake8-bugbear | flake8-commas | flake8-comprehensions | flake8-debugger | flake8-docstrings | flake8-eradicate | flake8-isort | flake8-plugin-utils | flake8-polyfill | flake8-quotes | flake8-rst-docstrings | flake8-string-format | future | gitdb | GitPython | h11 | httpcore | idna | immutables | importlib-metadata | iniconfig | ipython-genutils | jedi | Jinja2 | joblib | lazy-object-proxy | livereload | lunr | Markdown | MarkupSafe | mccabe | mkdocs-material-extensions | mypy-extensions | nltk | packaging | parso | pathspec | pbr | pep8-naming | pexpect | pickleshare | pluggy | prompt-toolkit | ptyprocess | py | pycodestyle | pydocstyle | pyflakes | Pygments | pylint | pymdown-extensions | pyparsing | pytest-forked | pytkdocs | PyYAML | regex | restructuredtext-lint | rfc3986 | six | smmap | sniffio | snowballstemmer | stevedore | termcolor | testfixtures | tornado | tqdm | traitlets | typed-ast | typing-extensions | urllib3 | wcwidth | wrapt | zipp More credits from the author","title":"Indirect dependencies"},{"location":"usage/","text":"Usage \u00a4 Writing duties \u00a4 Your tasks, or duties, are defined in a Python module. By default, duty will load these tasks from a duties.py file at the root of your repository. Each task is declared as a \"duty\", using the duty.duty decorator. from duty import duty @duty def docs ( ctx ): ctx . run ( \"mkdocs build\" , title = \"Building documentation\" ) The ctx argument is the \"context\" of the duty. It is automatically created and passed to your function. It has only one purpose: running command with its run method. The run method accepts strings, list of strings, or even Python callables. The above duty can be rewritten as: from duty import duty @duty def docs ( ctx ): ctx . run ([ \"mkdocs\" , \"build\" ], title = \"Building documentation\" ) # avoid the overhead of an extra shell process Or: from duty import duty from mkdocs import build , config @duty def docs ( ctx ): ctx . run ( build . build , args = [ config . load_config ()], title = \"Building documentation\" ) # avoid the overhead of an extra Python process ctx.run() options \u00a4 The run methods accepts various options, mostly coming from its underlying dependency: failprint . Arguments of the run method: Name Type Description Default cmd str , list of str , or Python callable The command to run. required args list Arguments to pass to the callable. [] kwargs dict Keyword arguments to pass to the callable. {} number int The command number (useful for the tap format). None capture str The type of output: \"stdout\" , \"stderr\" , True (or \"both\" ) and False (or \"none\" ) True title str The command title. cmd as a shell command or Python statement fmt str The output format as a Jinja template: \"pretty\" , \"tap\" or \"custom=...\" \"pretty\" pty bool Whether to run in a PTY. False progress bool Whether to show progress. True nofail bool Whether to always succeed. False quiet bool Don't print the command output, even if it failed. False silent bool Don't print anything. False Example usage of the silent option: @duty def clean ( ctx ): ctx . run ( \"find . -type d -name __pycache__ | xargs rm -rf\" , silent = True ) Default options \u00a4 Let's say you have more than one command, and you want to silence all of them. Instead of passing silent=True to all ctx.run() calls, you can set this option as default in the decorator itself: @duty ( silent = True ) def clean ( ctx ): ctx . run ( \"rm -rf .coverage*\" ) ctx . run ( \"rm -rf .mypy_cache\" ) ctx . run ( \"rm -rf .pytest_cache\" ) ctx . run ( \"rm -rf build\" ) ctx . run ( \"rm -rf dist\" ) ctx . run ( \"rm -rf pip-wheel-metadata\" ) ctx . run ( \"rm -rf site\" ) ctx . run ( \"find . -type d -name __pycache__ | xargs rm -rf\" ) ctx . run ( \"find . -name '*.rej' -delete\" ) You can of course override the default options in the ctx.run() calls: @duty ( capture = True ) def run_scripts ( ctx ): ctx . run ( \"bash script1.sh\" ) ctx . run ( \"bash script2.sh\" ) ctx . run ( \"bash script3.sh\" , capture = False ) Running duties \u00a4 To run a duty, simply use: duty clean If you are using Poetry or PDM : poetry run duty clean pdm run duty clean You can pass multiple duties in one command: duty clean docs Passing parameters \u00a4 Duties can accept arguments (or parameters): @duty def docs ( ctx , serve : bool = False ): command = \"serve\" if serve else \"build\" ctx . run ( f \"mkdocs { command } \" ) When passing the argument from the command line, it will be type-casted using the parameter annotation in the duty's signature. We only support types that are callable and accept one positional argument: a string. Examples of supported builtin types: int , str , float , bool , list , etc. The bool type uses a special conversion table: Value (case-insensitive) Result \"\" (empty string) False \"0\" False \"off\" False \"n\" False \"no\" False \"false\" False anything else (including \"-1\" ) True To pass a parameter as a keyword argument, use the name=value form: duty docs serve = yes # --> serve = True You can use your own custom types as well: class Point : def __init__ ( self , xy : str ): self . x , self . y = xy . split ( \",\" ) @duty def shoot ( ctx , point : Point ): ctx . run ( f \"shoot -x { point . x } -y { point . y } \" ) Then, when running the duty: duty shoot point = 5 ,15 You can also pass parameters as positional arguments: duty shoot 5 ,15 Limitation with positional arguments When passing positional arguments, make sure there is no overlap between other duties' names and the argument value, otherwise duty will not be able to parse the command correctly. Passing options \u00a4 Usage summary: duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...] Global options \u00a4 The duty command line tool accepts global options that will affect all the duties selected to run. These options are the same you can use in ctx.run() calls, except for number and title (because it wouldn't make sense). The specified global options will override the default options of duties, as well as the options passed in ctx.run() calls! For example, with a duty declaring these options: @duty ( capture = \"both\" ) def play ( ctx , file ): ctx . run ( f \"play { file } \" , nofail = True ) ...you can override both the capture and nofail options like this: duty --capture = none --strict play this-file.mp4 # or with the short options duty -Zc none play this-file.mp4 Local options \u00a4 Local options are the same as global options. Instead of passing them to duty directly, you can pass them to a specific duty on the command line. If we use the previous example again: duty play -Zc none this-file.mp4 It allows to use different options for different duties selected on the command line. In the following example, the format and check duties will have their output captured, while the test duty will not: duty -cboth format check test -cnone Capturing commands output \u00a4 When running a command through ctx.run() , you can choose to capture its standard output, its standard error, both, or none. Captured output is then available as an output variable when formatting duty's output . capture=stdout will capture both stdout and stderr, but will only make stdout available while formatting capture=stderr will capture both stdout and stderr, but will only make stderr available while formatting capture=both will capture both stdout and stderr as one single stream, and will make it available while formatting capture=none will not capture anything, and both stdout and stderr will be printed in real-time to the console It is not possible to capture only stdout, or only stderr, and let the other one be printed to the console. Capturing one is capturing both, but discarding the other. Formatting duty output \u00a4 Thanks to its underlying failprint dependency, it is possible to change the output of command runs. The output of a command is rendered using a Jinja template string. For example, the two builtin failprint formats are: pretty (default) {% if success %} <green>\u2713</green> {% elif nofail %} <yellow>\u2717</yellow> {% else %} <red>\u2717</red> {% endif %} <bold> {{ title or command }} </bold> {% if failure %} ( {{ code }} ) {% endif %} {% if failure and output and not quiet %} \\n {{ ( ' > ' + command + '\\n' ) if title else '' }} {{ output | indent ( 2 * ' ' ) }}{% endif %} Its \"progress\" template is > {{ title or command }} . tap {% if failure %} not {% endif %} ok {{ number }} - {{ title or command }} {% if failure and output %} \\n --- \\n {{ ( 'command: ' + command + '\\n ' ) if title else '' }} output: |\\n {{ output | indent ( 4 * ' ' ) }} \\n ... {% endif %} As you can see there are variables you can use in your format template: Variable Description command A stringified version of the command. title The title passed with the title option. code The command exit status. success A boolean indicating if the command succeeded. failure A boolean indicating if the command failed. number The command number passed with the number option. output The command output (stdout, stderr, both or none, depending on the capture option). nofail A boolean indicating if the command was allowed to fail. quiet A boolean instructing to be quiet, i.e. don't print the command output even if it failed. silent A boolean indicating to be silent, i.e. don't print anything. There is also one Jinja filter available Filter Description indent The textwrap.indent function To select a different format than the default one, or to provide your own, you can use the fmt option of ctx.run() , the --format CLI option (global and local), and the FAILPRINT_FORMAT environment variable. For example, here is how to use the tap format: # in the ctx.run() call @duty def task1 ( ctx ): ctx . run ( \"echo failed && false\" , fmt = \"tap\" ) # or as a default duty option @duty ( fmt = \"tap\" ) def task2 ( ctx ): ctx . run ( \"echo failed && false\" ) ctx . run ( \"echo failed && false\" ) # or with the CLI global option duty --format tap task1 task2 # or with a CLI local option duty task1 -ftap task2 # or with an environment variable FAILPRINT_FORMAT = tap duty task1 task2 To use your own format template, just make the value of the fmt option start with custom= . For example, with an environment variable: export FAILPRINT_FORMAT = \"custom={{output}}\" # always print the captured output, nothing else duty task1 task2","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#writing-duties","text":"Your tasks, or duties, are defined in a Python module. By default, duty will load these tasks from a duties.py file at the root of your repository. Each task is declared as a \"duty\", using the duty.duty decorator. from duty import duty @duty def docs ( ctx ): ctx . run ( \"mkdocs build\" , title = \"Building documentation\" ) The ctx argument is the \"context\" of the duty. It is automatically created and passed to your function. It has only one purpose: running command with its run method. The run method accepts strings, list of strings, or even Python callables. The above duty can be rewritten as: from duty import duty @duty def docs ( ctx ): ctx . run ([ \"mkdocs\" , \"build\" ], title = \"Building documentation\" ) # avoid the overhead of an extra shell process Or: from duty import duty from mkdocs import build , config @duty def docs ( ctx ): ctx . run ( build . build , args = [ config . load_config ()], title = \"Building documentation\" ) # avoid the overhead of an extra Python process","title":"Writing duties"},{"location":"usage/#ctxrun-options","text":"The run methods accepts various options, mostly coming from its underlying dependency: failprint . Arguments of the run method: Name Type Description Default cmd str , list of str , or Python callable The command to run. required args list Arguments to pass to the callable. [] kwargs dict Keyword arguments to pass to the callable. {} number int The command number (useful for the tap format). None capture str The type of output: \"stdout\" , \"stderr\" , True (or \"both\" ) and False (or \"none\" ) True title str The command title. cmd as a shell command or Python statement fmt str The output format as a Jinja template: \"pretty\" , \"tap\" or \"custom=...\" \"pretty\" pty bool Whether to run in a PTY. False progress bool Whether to show progress. True nofail bool Whether to always succeed. False quiet bool Don't print the command output, even if it failed. False silent bool Don't print anything. False Example usage of the silent option: @duty def clean ( ctx ): ctx . run ( \"find . -type d -name __pycache__ | xargs rm -rf\" , silent = True )","title":"ctx.run() options"},{"location":"usage/#default-options","text":"Let's say you have more than one command, and you want to silence all of them. Instead of passing silent=True to all ctx.run() calls, you can set this option as default in the decorator itself: @duty ( silent = True ) def clean ( ctx ): ctx . run ( \"rm -rf .coverage*\" ) ctx . run ( \"rm -rf .mypy_cache\" ) ctx . run ( \"rm -rf .pytest_cache\" ) ctx . run ( \"rm -rf build\" ) ctx . run ( \"rm -rf dist\" ) ctx . run ( \"rm -rf pip-wheel-metadata\" ) ctx . run ( \"rm -rf site\" ) ctx . run ( \"find . -type d -name __pycache__ | xargs rm -rf\" ) ctx . run ( \"find . -name '*.rej' -delete\" ) You can of course override the default options in the ctx.run() calls: @duty ( capture = True ) def run_scripts ( ctx ): ctx . run ( \"bash script1.sh\" ) ctx . run ( \"bash script2.sh\" ) ctx . run ( \"bash script3.sh\" , capture = False )","title":"Default options"},{"location":"usage/#running-duties","text":"To run a duty, simply use: duty clean If you are using Poetry or PDM : poetry run duty clean pdm run duty clean You can pass multiple duties in one command: duty clean docs","title":"Running duties"},{"location":"usage/#passing-parameters","text":"Duties can accept arguments (or parameters): @duty def docs ( ctx , serve : bool = False ): command = \"serve\" if serve else \"build\" ctx . run ( f \"mkdocs { command } \" ) When passing the argument from the command line, it will be type-casted using the parameter annotation in the duty's signature. We only support types that are callable and accept one positional argument: a string. Examples of supported builtin types: int , str , float , bool , list , etc. The bool type uses a special conversion table: Value (case-insensitive) Result \"\" (empty string) False \"0\" False \"off\" False \"n\" False \"no\" False \"false\" False anything else (including \"-1\" ) True To pass a parameter as a keyword argument, use the name=value form: duty docs serve = yes # --> serve = True You can use your own custom types as well: class Point : def __init__ ( self , xy : str ): self . x , self . y = xy . split ( \",\" ) @duty def shoot ( ctx , point : Point ): ctx . run ( f \"shoot -x { point . x } -y { point . y } \" ) Then, when running the duty: duty shoot point = 5 ,15 You can also pass parameters as positional arguments: duty shoot 5 ,15 Limitation with positional arguments When passing positional arguments, make sure there is no overlap between other duties' names and the argument value, otherwise duty will not be able to parse the command correctly.","title":"Passing parameters"},{"location":"usage/#passing-options","text":"Usage summary: duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...]","title":"Passing options"},{"location":"usage/#global-options","text":"The duty command line tool accepts global options that will affect all the duties selected to run. These options are the same you can use in ctx.run() calls, except for number and title (because it wouldn't make sense). The specified global options will override the default options of duties, as well as the options passed in ctx.run() calls! For example, with a duty declaring these options: @duty ( capture = \"both\" ) def play ( ctx , file ): ctx . run ( f \"play { file } \" , nofail = True ) ...you can override both the capture and nofail options like this: duty --capture = none --strict play this-file.mp4 # or with the short options duty -Zc none play this-file.mp4","title":"Global options"},{"location":"usage/#local-options","text":"Local options are the same as global options. Instead of passing them to duty directly, you can pass them to a specific duty on the command line. If we use the previous example again: duty play -Zc none this-file.mp4 It allows to use different options for different duties selected on the command line. In the following example, the format and check duties will have their output captured, while the test duty will not: duty -cboth format check test -cnone","title":"Local options"},{"location":"usage/#capturing-commands-output","text":"When running a command through ctx.run() , you can choose to capture its standard output, its standard error, both, or none. Captured output is then available as an output variable when formatting duty's output . capture=stdout will capture both stdout and stderr, but will only make stdout available while formatting capture=stderr will capture both stdout and stderr, but will only make stderr available while formatting capture=both will capture both stdout and stderr as one single stream, and will make it available while formatting capture=none will not capture anything, and both stdout and stderr will be printed in real-time to the console It is not possible to capture only stdout, or only stderr, and let the other one be printed to the console. Capturing one is capturing both, but discarding the other.","title":"Capturing commands output"},{"location":"usage/#formatting-duty-output","text":"Thanks to its underlying failprint dependency, it is possible to change the output of command runs. The output of a command is rendered using a Jinja template string. For example, the two builtin failprint formats are: pretty (default) {% if success %} <green>\u2713</green> {% elif nofail %} <yellow>\u2717</yellow> {% else %} <red>\u2717</red> {% endif %} <bold> {{ title or command }} </bold> {% if failure %} ( {{ code }} ) {% endif %} {% if failure and output and not quiet %} \\n {{ ( ' > ' + command + '\\n' ) if title else '' }} {{ output | indent ( 2 * ' ' ) }}{% endif %} Its \"progress\" template is > {{ title or command }} . tap {% if failure %} not {% endif %} ok {{ number }} - {{ title or command }} {% if failure and output %} \\n --- \\n {{ ( 'command: ' + command + '\\n ' ) if title else '' }} output: |\\n {{ output | indent ( 4 * ' ' ) }} \\n ... {% endif %} As you can see there are variables you can use in your format template: Variable Description command A stringified version of the command. title The title passed with the title option. code The command exit status. success A boolean indicating if the command succeeded. failure A boolean indicating if the command failed. number The command number passed with the number option. output The command output (stdout, stderr, both or none, depending on the capture option). nofail A boolean indicating if the command was allowed to fail. quiet A boolean instructing to be quiet, i.e. don't print the command output even if it failed. silent A boolean indicating to be silent, i.e. don't print anything. There is also one Jinja filter available Filter Description indent The textwrap.indent function To select a different format than the default one, or to provide your own, you can use the fmt option of ctx.run() , the --format CLI option (global and local), and the FAILPRINT_FORMAT environment variable. For example, here is how to use the tap format: # in the ctx.run() call @duty def task1 ( ctx ): ctx . run ( \"echo failed && false\" , fmt = \"tap\" ) # or as a default duty option @duty ( fmt = \"tap\" ) def task2 ( ctx ): ctx . run ( \"echo failed && false\" ) ctx . run ( \"echo failed && false\" ) # or with the CLI global option duty --format tap task1 task2 # or with a CLI local option duty task1 -ftap task2 # or with an environment variable FAILPRINT_FORMAT = tap duty task1 task2 To use your own format template, just make the value of the fmt option start with custom= . For example, with an environment variable: export FAILPRINT_FORMAT = \"custom={{output}}\" # always print the captured output, nothing else duty task1 task2","title":"Formatting duty output"},{"location":"reference/cli/","text":"\u00a4 Module that contains the command line application. get_duty_parser ( duty ) \u00a4 Get a duty-specific options parser. Parameters: Name Type Description Default duty Duty The duty to parse for. required Returns: Type Description ArgParser A duty-specific parser. Source code in duty/cli.py def get_duty_parser ( duty : Duty ) -> ArgParser : \"\"\" Get a duty-specific options parser. Arguments: duty: The duty to parse for. Returns: A duty-specific parser. \"\"\" parser = ArgParser ( prog = f \"duty { duty . name } \" , add_help = False , description = duty . description , formatter_class = argparse . RawDescriptionHelpFormatter , ) add_flags ( parser , set_defaults = False ) return parser get_parser () \u00a4 Return the CLI argument parser. Returns: Type Description ArgParser An argparse parser. Source code in duty/cli.py def get_parser () -> ArgParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" usage = \"duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...]\" description = \"A simple task runner.\" parser = ArgParser ( add_help = False , usage = usage , description = description ) parser . add_argument ( \"-d\" , \"--duties-file\" , default = \"duties.py\" , help = \"Python file where the duties are defined.\" , ) parser . add_argument ( \"-l\" , \"--list\" , action = \"store_true\" , dest = \"list\" , help = \"List the available duties.\" , ) parser . add_argument ( \"-h\" , \"--help\" , dest = \"help\" , nargs = \"*\" , metavar = \"DUTY\" , help = \"Show this help message and exit. Pass duties names to print their help.\" , ) add_flags ( parser , set_defaults = False ) parser . add_argument ( \"remainder\" , nargs = argparse . REMAINDER ) parser . _optionals . title = \"Global options\" # noqa: WPS437 return parser main ( args = None ) \u00a4 Run the main program. This function is executed when you type duty or python -m duty . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in duty/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : # noqa: WPS212 (return statements) \"\"\" Run the main program. This function is executed when you type `duty` or `python -m duty`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) remainder = opts . remainder collection = Collection ( opts . duties_file ) collection . load () if opts . help is not None : print_help ( parser , opts , collection ) return 0 if opts . list : print ( textwrap . indent ( collection . format_help (), prefix = \" \" )) return 0 try : arg_lists = split_args ( remainder , collection . names ()) except ValueError as error : print ( error , file = sys . stderr ) return 1 if not arg_lists : print ( \"> Please choose at least one duty\" , file = sys . stderr ) return 1 global_opts = specified_options ( opts , exclude = { \"duties_file\" , \"list\" , \"help\" , \"remainder\" }) try : commands = parse_commands ( arg_lists , global_opts , collection ) except TypeError as error : # noqa: WPS440 (variable overlap) print ( f \"> { error } \" , file = sys . stderr ) return 1 for duty , posargs , kwargs in commands : try : duty . run ( * posargs , ** kwargs ) except DutyFailure as failure : return failure . code return 0 parse_args ( duty , args ) \u00a4 Parse the positional and keyword arguments of a duty. Parameters: Name Type Description Default duty Duty The duty to parse for. required args List[str] The list of arguments. required Returns: Type Description Tuple The positional and keyword arguments. Source code in duty/cli.py def parse_args ( duty : Duty , args : List [ str ]) -> Tuple : # noqa: WPS231 (complex) \"\"\" Parse the positional and keyword arguments of a duty. Arguments: duty: The duty to parse for. args: The list of arguments. Returns: The positional and keyword arguments. \"\"\" posargs = [] kwargs = {} for arg in args : if \"=\" in arg : # we found a keyword argument arg_name , arg_value = arg . split ( \"=\" , 1 ) kwargs [ arg_name ] = arg_value else : # we found a positional argument posargs . append ( arg ) return validate ( duty . function , * posargs , ** kwargs ) parse_commands ( arg_lists , global_opts , collection ) \u00a4 Parse argument lists into ready-to-run duties. Parameters: Name Type Description Default arg_lists Lists of arguments lists. required global_opts The global options. required collection The duties collection. required Returns: Type Description List[Tuple] A list of tuples composed of: a duty its positional arguments its keyword arguments Source code in duty/cli.py def parse_commands ( arg_lists , global_opts , collection ) -> List [ Tuple ]: \"\"\" Parse argument lists into ready-to-run duties. Arguments: arg_lists: Lists of arguments lists. global_opts: The global options. collection: The duties collection. Returns: A list of tuples composed of: - a duty - its positional arguments - its keyword arguments \"\"\" commands = [] for arg_list in arg_lists : duty = collection . get ( arg_list [ 0 ]) opts , remainder = parse_options ( duty , arg_list [ 1 :]) duty . options_override = { ** global_opts , ** opts } commands . append (( duty , * parse_args ( duty , remainder ))) return commands parse_options ( duty , args ) \u00a4 Parse options for a duty. Parameters: Name Type Description Default duty Duty The duty to parse for. required args List[str] The CLI args passed for this duty. required Returns: Type Description Tuple[Dict, List[str]] The parsed opts, and the remaining arguments. Source code in duty/cli.py def parse_options ( duty : Duty , args : List [ str ]) -> Tuple [ Dict , List [ str ]]: \"\"\" Parse options for a duty. Arguments: duty: The duty to parse for. args: The CLI args passed for this duty. Returns: The parsed opts, and the remaining arguments. \"\"\" parser = get_duty_parser ( duty ) opts , remainder = parser . parse_known_args ( args ) return specified_options ( opts ), remainder print_help ( parser , opts , collection ) \u00a4 Print general help or duties help. Parameters: Name Type Description Default parser ArgParser The main parser. required opts Namespace The main parsed options. required collection Collection A collection of duties. required Source code in duty/cli.py def print_help ( parser : ArgParser , opts : argparse . Namespace , collection : Collection ) -> None : \"\"\" Print general help or duties help. Arguments: parser: The main parser. opts: The main parsed options. collection: A collection of duties. \"\"\" if opts . help : for duty_name in opts . help : try : duty = collection . get ( duty_name ) except KeyError : print ( f \"> Unknown duty ' { duty_name } '\" ) else : print ( get_duty_parser ( duty ) . format_help ()) else : print ( parser . format_help ()) print ( \"Available duties:\" ) print ( textwrap . indent ( collection . format_help (), prefix = \" \" )) specified_options ( opts , exclude = None ) \u00a4 Cast an argparse Namespace into a dictionary of options. Remove all options that were not specified (equal to None). Parameters: Name Type Description Default opts Namespace The namespace to cast. required exclude Names of options to exclude from the result. None Returns: Type Description Dict A dictionary of specified-only options. Source code in duty/cli.py def specified_options ( opts : argparse . Namespace , exclude = None ) -> Dict : \"\"\" Cast an argparse Namespace into a dictionary of options. Remove all options that were not specified (equal to None). Arguments: opts: The namespace to cast. exclude: Names of options to exclude from the result. Returns: A dictionary of specified-only options. \"\"\" exclude = exclude or set () options = opts . __dict__ . items () # noqa: WPS609 return { opt : value for opt , value in options if value is not None and opt not in exclude } # noqa: WPS221 split_args ( args , names ) \u00a4 Split command line arguments into duty commands. Parameters: Name Type Description Default args List[str] The CLI arguments. required names List[str] The known duty names. required Exceptions: Type Description ValueError When a duty name is missing before an argument, or when the duty name is unknown. Returns: Type Description List[List[str]] The split commands. Source code in duty/cli.py def split_args ( args : List [ str ], names : List [ str ]) -> List [ List [ str ]]: # noqa: WPS231 (complex) \"\"\" Split command line arguments into duty commands. Arguments: args: The CLI arguments. names: The known duty names. Raises: ValueError: When a duty name is missing before an argument, or when the duty name is unknown. Returns: The split commands. \"\"\" arg_lists = [] current_arg_list : List [ str ] = [] for arg in args : if arg in names : # We found a duty name. if current_arg_list : # Append the previous arg list to the result and reset it. arg_lists . append ( current_arg_list ) current_arg_list = [] current_arg_list . append ( arg ) elif current_arg_list : # We found an argument. current_arg_list . append ( arg ) else : # We found an argument but no duty name. raise ValueError ( f \"> Missing duty name before argument ' { arg } ', or unknown duty name\" ) # Don't forget the last arg list. if current_arg_list : arg_lists . append ( current_arg_list ) return arg_lists","title":"cli.py"},{"location":"reference/cli/#duty.cli","text":"Module that contains the command line application.","title":"duty.cli"},{"location":"reference/cli/#duty.cli.get_duty_parser","text":"Get a duty-specific options parser. Parameters: Name Type Description Default duty Duty The duty to parse for. required Returns: Type Description ArgParser A duty-specific parser. Source code in duty/cli.py def get_duty_parser ( duty : Duty ) -> ArgParser : \"\"\" Get a duty-specific options parser. Arguments: duty: The duty to parse for. Returns: A duty-specific parser. \"\"\" parser = ArgParser ( prog = f \"duty { duty . name } \" , add_help = False , description = duty . description , formatter_class = argparse . RawDescriptionHelpFormatter , ) add_flags ( parser , set_defaults = False ) return parser","title":"get_duty_parser()"},{"location":"reference/cli/#duty.cli.get_parser","text":"Return the CLI argument parser. Returns: Type Description ArgParser An argparse parser. Source code in duty/cli.py def get_parser () -> ArgParser : \"\"\" Return the CLI argument parser. Returns: An argparse parser. \"\"\" usage = \"duty [GLOBAL_OPTS...] [DUTY [DUTY_OPTS...] [DUTY_PARAMS...]...]\" description = \"A simple task runner.\" parser = ArgParser ( add_help = False , usage = usage , description = description ) parser . add_argument ( \"-d\" , \"--duties-file\" , default = \"duties.py\" , help = \"Python file where the duties are defined.\" , ) parser . add_argument ( \"-l\" , \"--list\" , action = \"store_true\" , dest = \"list\" , help = \"List the available duties.\" , ) parser . add_argument ( \"-h\" , \"--help\" , dest = \"help\" , nargs = \"*\" , metavar = \"DUTY\" , help = \"Show this help message and exit. Pass duties names to print their help.\" , ) add_flags ( parser , set_defaults = False ) parser . add_argument ( \"remainder\" , nargs = argparse . REMAINDER ) parser . _optionals . title = \"Global options\" # noqa: WPS437 return parser","title":"get_parser()"},{"location":"reference/cli/#duty.cli.main","text":"Run the main program. This function is executed when you type duty or python -m duty . Parameters: Name Type Description Default args Optional[List[str]] Arguments passed from the command line. None Returns: Type Description int An exit code. Source code in duty/cli.py def main ( args : Optional [ List [ str ]] = None ) -> int : # noqa: WPS212 (return statements) \"\"\" Run the main program. This function is executed when you type `duty` or `python -m duty`. Arguments: args: Arguments passed from the command line. Returns: An exit code. \"\"\" parser = get_parser () opts = parser . parse_args ( args = args ) remainder = opts . remainder collection = Collection ( opts . duties_file ) collection . load () if opts . help is not None : print_help ( parser , opts , collection ) return 0 if opts . list : print ( textwrap . indent ( collection . format_help (), prefix = \" \" )) return 0 try : arg_lists = split_args ( remainder , collection . names ()) except ValueError as error : print ( error , file = sys . stderr ) return 1 if not arg_lists : print ( \"> Please choose at least one duty\" , file = sys . stderr ) return 1 global_opts = specified_options ( opts , exclude = { \"duties_file\" , \"list\" , \"help\" , \"remainder\" }) try : commands = parse_commands ( arg_lists , global_opts , collection ) except TypeError as error : # noqa: WPS440 (variable overlap) print ( f \"> { error } \" , file = sys . stderr ) return 1 for duty , posargs , kwargs in commands : try : duty . run ( * posargs , ** kwargs ) except DutyFailure as failure : return failure . code return 0","title":"main()"},{"location":"reference/cli/#duty.cli.parse_args","text":"Parse the positional and keyword arguments of a duty. Parameters: Name Type Description Default duty Duty The duty to parse for. required args List[str] The list of arguments. required Returns: Type Description Tuple The positional and keyword arguments. Source code in duty/cli.py def parse_args ( duty : Duty , args : List [ str ]) -> Tuple : # noqa: WPS231 (complex) \"\"\" Parse the positional and keyword arguments of a duty. Arguments: duty: The duty to parse for. args: The list of arguments. Returns: The positional and keyword arguments. \"\"\" posargs = [] kwargs = {} for arg in args : if \"=\" in arg : # we found a keyword argument arg_name , arg_value = arg . split ( \"=\" , 1 ) kwargs [ arg_name ] = arg_value else : # we found a positional argument posargs . append ( arg ) return validate ( duty . function , * posargs , ** kwargs )","title":"parse_args()"},{"location":"reference/cli/#duty.cli.parse_commands","text":"Parse argument lists into ready-to-run duties. Parameters: Name Type Description Default arg_lists Lists of arguments lists. required global_opts The global options. required collection The duties collection. required Returns: Type Description List[Tuple] A list of tuples composed of: a duty its positional arguments its keyword arguments Source code in duty/cli.py def parse_commands ( arg_lists , global_opts , collection ) -> List [ Tuple ]: \"\"\" Parse argument lists into ready-to-run duties. Arguments: arg_lists: Lists of arguments lists. global_opts: The global options. collection: The duties collection. Returns: A list of tuples composed of: - a duty - its positional arguments - its keyword arguments \"\"\" commands = [] for arg_list in arg_lists : duty = collection . get ( arg_list [ 0 ]) opts , remainder = parse_options ( duty , arg_list [ 1 :]) duty . options_override = { ** global_opts , ** opts } commands . append (( duty , * parse_args ( duty , remainder ))) return commands","title":"parse_commands()"},{"location":"reference/cli/#duty.cli.parse_options","text":"Parse options for a duty. Parameters: Name Type Description Default duty Duty The duty to parse for. required args List[str] The CLI args passed for this duty. required Returns: Type Description Tuple[Dict, List[str]] The parsed opts, and the remaining arguments. Source code in duty/cli.py def parse_options ( duty : Duty , args : List [ str ]) -> Tuple [ Dict , List [ str ]]: \"\"\" Parse options for a duty. Arguments: duty: The duty to parse for. args: The CLI args passed for this duty. Returns: The parsed opts, and the remaining arguments. \"\"\" parser = get_duty_parser ( duty ) opts , remainder = parser . parse_known_args ( args ) return specified_options ( opts ), remainder","title":"parse_options()"},{"location":"reference/cli/#duty.cli.print_help","text":"Print general help or duties help. Parameters: Name Type Description Default parser ArgParser The main parser. required opts Namespace The main parsed options. required collection Collection A collection of duties. required Source code in duty/cli.py def print_help ( parser : ArgParser , opts : argparse . Namespace , collection : Collection ) -> None : \"\"\" Print general help or duties help. Arguments: parser: The main parser. opts: The main parsed options. collection: A collection of duties. \"\"\" if opts . help : for duty_name in opts . help : try : duty = collection . get ( duty_name ) except KeyError : print ( f \"> Unknown duty ' { duty_name } '\" ) else : print ( get_duty_parser ( duty ) . format_help ()) else : print ( parser . format_help ()) print ( \"Available duties:\" ) print ( textwrap . indent ( collection . format_help (), prefix = \" \" ))","title":"print_help()"},{"location":"reference/cli/#duty.cli.specified_options","text":"Cast an argparse Namespace into a dictionary of options. Remove all options that were not specified (equal to None). Parameters: Name Type Description Default opts Namespace The namespace to cast. required exclude Names of options to exclude from the result. None Returns: Type Description Dict A dictionary of specified-only options. Source code in duty/cli.py def specified_options ( opts : argparse . Namespace , exclude = None ) -> Dict : \"\"\" Cast an argparse Namespace into a dictionary of options. Remove all options that were not specified (equal to None). Arguments: opts: The namespace to cast. exclude: Names of options to exclude from the result. Returns: A dictionary of specified-only options. \"\"\" exclude = exclude or set () options = opts . __dict__ . items () # noqa: WPS609 return { opt : value for opt , value in options if value is not None and opt not in exclude } # noqa: WPS221","title":"specified_options()"},{"location":"reference/cli/#duty.cli.split_args","text":"Split command line arguments into duty commands. Parameters: Name Type Description Default args List[str] The CLI arguments. required names List[str] The known duty names. required Exceptions: Type Description ValueError When a duty name is missing before an argument, or when the duty name is unknown. Returns: Type Description List[List[str]] The split commands. Source code in duty/cli.py def split_args ( args : List [ str ], names : List [ str ]) -> List [ List [ str ]]: # noqa: WPS231 (complex) \"\"\" Split command line arguments into duty commands. Arguments: args: The CLI arguments. names: The known duty names. Raises: ValueError: When a duty name is missing before an argument, or when the duty name is unknown. Returns: The split commands. \"\"\" arg_lists = [] current_arg_list : List [ str ] = [] for arg in args : if arg in names : # We found a duty name. if current_arg_list : # Append the previous arg list to the result and reset it. arg_lists . append ( current_arg_list ) current_arg_list = [] current_arg_list . append ( arg ) elif current_arg_list : # We found an argument. current_arg_list . append ( arg ) else : # We found an argument but no duty name. raise ValueError ( f \"> Missing duty name before argument ' { arg } ', or unknown duty name\" ) # Don't forget the last arg list. if current_arg_list : arg_lists . append ( current_arg_list ) return arg_lists","title":"split_args()"},{"location":"reference/collection/","text":"\u00a4 Module containing all the logic. Collection \u00a4 A collection of duties. Attributes: Name Type Description path The path to the duties file. duties Dict[str, Duty] The list of duties. aliases Dict[str, Duty] A dictionary of aliases pointing to their respective duties. __init__ ( self , path = 'duties.py' ) special \u00a4 Initialize the collection. Parameters: Name Type Description Default path str The path to the duties file. 'duties.py' Source code in duty/collection.py def __init__ ( self , path : str = default_duties_file ): \"\"\" Initialize the collection. Arguments: path: The path to the duties file. \"\"\" self . path = path self . duties : Dict [ str , Duty ] = {} self . aliases : Dict [ str , Duty ] = {} add ( self , duty ) \u00a4 Add a duty to the collection. Parameters: Name Type Description Default duty Duty The duty to add. required Source code in duty/collection.py def add ( self , duty : \"Duty\" ) -> None : \"\"\" Add a duty to the collection. Arguments: duty: The duty to add. \"\"\" if duty . collection is not None : # we must copy the duty to be able to add it # in multiple collections duty = deepcopy ( duty ) duty . collection = self # type: ignore self . duties [ duty . name ] = duty for alias in duty . aliases : self . aliases [ alias ] = duty clear ( self ) \u00a4 Clear the collection. Source code in duty/collection.py def clear ( self ) -> None : \"\"\"Clear the collection.\"\"\" self . duties . clear () self . aliases . clear () format_help ( self ) \u00a4 Format a message listing the duties. Returns: Type Description str A string listing the duties and their summary. Source code in duty/collection.py def format_help ( self ) -> str : \"\"\" Format a message listing the duties. Returns: A string listing the duties and their summary. \"\"\" lines = [] # 20 makes the summary aligned with options description longest_name = max ( max ( len ( name ) for name in self . duties ), 20 ) # noqa: WPS432 (magic number) for name , duty in self . duties . items (): description = duty . description . split ( \" \\n \" )[ 0 ] lines . append ( f \" { name :{ longest_name }} { description } \" ) return \" \\n \" . join ( lines ) get ( self , name_or_alias ) \u00a4 Get a duty by its name or alias. Parameters: Name Type Description Default name_or_alias str The name or alias of the duty. required Returns: Type Description Duty A duty. Source code in duty/collection.py def get ( self , name_or_alias : str ) -> \"Duty\" : \"\"\" Get a duty by its name or alias. Arguments: name_or_alias: The name or alias of the duty. Returns: A duty. \"\"\" try : return self . duties [ name_or_alias ] except KeyError : return self . aliases [ name_or_alias ] load ( self , path = None ) \u00a4 Load duties from a Python file. Parameters: Name Type Description Default path Optional[str] The path to the Python file to load. Uses the collection's path by default. None Source code in duty/collection.py def load ( self , path : Optional [ str ] = None ) -> None : \"\"\" Load duties from a Python file. Arguments: path: The path to the Python file to load. Uses the collection's path by default. \"\"\" path = path or self . path spec = importlib_util . spec_from_file_location ( \"duty.duties\" , path ) duties = importlib_util . module_from_spec ( spec ) spec . loader . exec_module ( duties ) # type: ignore for _ , duty in inspect . getmembers ( duties , lambda member : isinstance ( member , Duty )): self . add ( duty ) names ( self ) \u00a4 Return the list of duties names and aliases. Returns: Type Description List[str] The list of duties names and aliases. Source code in duty/collection.py def names ( self ) -> List [ str ]: \"\"\" Return the list of duties names and aliases. Returns: The list of duties names and aliases. \"\"\" return list ( self . duties . keys ()) + list ( self . aliases . keys ()) Duty \u00a4 The main duty class. context : Context property readonly \u00a4 Return a new context instance. Returns: Type Description Context A new context instance. __call__ ( self , context , * args , ** kwargs ) special \u00a4 Run the duty function. Parameters: Name Type Description Default context The context to use. required args Positional arguments passed to the function. () kwargs Keyword arguments passed to the function. {} Source code in duty/collection.py def __call__ ( self , context , * args , ** kwargs ) -> None : \"\"\" Run the duty function. Arguments: context: The context to use. args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. \"\"\" self . run_duties ( context , self . pre ) self . function ( context , * args , ** kwargs ) self . run_duties ( context , self . post ) __init__ ( self , name , description , function , collection = None , aliases = None , pre = None , post = None , opts = None ) special \u00a4 Initialize the duty. Parameters: Name Type Description Default name str The duty name. required description str The duty description. required function Callable The duty function. required collection Optional[duty.collection.Collection] The collection on which to attach this duty. None aliases Optional[set] A list of aliases for this duty. None pre Optional[List[Union[str, Callable, Duty]]] A list of duties to run before this one. None post Optional[List[Union[str, Callable, Duty]]] A list of duties to run after this one. None opts Dict[str, Any] Options used to create the context instance. None Source code in duty/collection.py def __init__ ( self , name : str , description : str , function : Callable , collection : Optional [ Collection ] = None , aliases : Optional [ set ] = None , pre : Optional [ DutyListType ] = None , post : Optional [ DutyListType ] = None , opts : Dict [ str , Any ] = None , ) -> None : \"\"\" Initialize the duty. Arguments: name: The duty name. description: The duty description. function: The duty function. collection: The collection on which to attach this duty. aliases: A list of aliases for this duty. pre: A list of duties to run before this one. post: A list of duties to run after this one. opts: Options used to create the context instance. \"\"\" self . name = name self . description = description self . function = function self . aliases = aliases or set () self . pre = pre or [] self . post = post or [] self . options = opts or self . default_options self . options_override : Dict = {} self . collection = None if collection : collection . add ( self ) run ( self , * args , ** kwargs ) \u00a4 Run the duty. This is just a shortcut for duty(duty.context, *args, **kwargs) . Parameters: Name Type Description Default args Positional arguments passed to the function. () kwargs Keyword arguments passed to the function. {} Source code in duty/collection.py def run ( self , * args , ** kwargs ) -> None : \"\"\" Run the duty. This is just a shortcut for `duty(duty.context, *args, **kwargs)`. Arguments: args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. \"\"\" self ( self . context , * args , ** kwargs ) run_duties ( self , context , duties_list ) \u00a4 Run a list of duties. Parameters: Name Type Description Default context The context to use. required duties_list List[Union[str, Callable, Duty]] The list of duties to run. required Exceptions: Type Description RuntimeError When a duty name is given to pre or post duties. Indeed, without a parent collection, it is impossible to find another duty by its name. Source code in duty/collection.py def run_duties ( self , context , duties_list : DutyListType ) -> None : # noqa: WPS231 (not complex) \"\"\" Run a list of duties. Arguments: context: The context to use. duties_list: The list of duties to run. Raises: RuntimeError: When a duty name is given to pre or post duties. Indeed, without a parent collection, it is impossible to find another duty by its name. \"\"\" for duty_item in duties_list : if callable ( duty_item ): # Item is a proper duty, or a callable: run it. duty_item ( context ) elif isinstance ( duty_item , str ): # Item is a reference to a duty. if self . collection is None : raise RuntimeError ( f \"Can't find duty by name without a collection ( { duty_item } )\" , ) # Get the duty and run it. self . collection . get ( duty_item )( context )","title":"collection.py"},{"location":"reference/collection/#duty.collection","text":"Module containing all the logic.","title":"duty.collection"},{"location":"reference/collection/#duty.collection.Collection","text":"A collection of duties. Attributes: Name Type Description path The path to the duties file. duties Dict[str, Duty] The list of duties. aliases Dict[str, Duty] A dictionary of aliases pointing to their respective duties.","title":"Collection"},{"location":"reference/collection/#duty.collection.Collection.__init__","text":"Initialize the collection. Parameters: Name Type Description Default path str The path to the duties file. 'duties.py' Source code in duty/collection.py def __init__ ( self , path : str = default_duties_file ): \"\"\" Initialize the collection. Arguments: path: The path to the duties file. \"\"\" self . path = path self . duties : Dict [ str , Duty ] = {} self . aliases : Dict [ str , Duty ] = {}","title":"__init__()"},{"location":"reference/collection/#duty.collection.Collection.add","text":"Add a duty to the collection. Parameters: Name Type Description Default duty Duty The duty to add. required Source code in duty/collection.py def add ( self , duty : \"Duty\" ) -> None : \"\"\" Add a duty to the collection. Arguments: duty: The duty to add. \"\"\" if duty . collection is not None : # we must copy the duty to be able to add it # in multiple collections duty = deepcopy ( duty ) duty . collection = self # type: ignore self . duties [ duty . name ] = duty for alias in duty . aliases : self . aliases [ alias ] = duty","title":"add()"},{"location":"reference/collection/#duty.collection.Collection.clear","text":"Clear the collection. Source code in duty/collection.py def clear ( self ) -> None : \"\"\"Clear the collection.\"\"\" self . duties . clear () self . aliases . clear ()","title":"clear()"},{"location":"reference/collection/#duty.collection.Collection.format_help","text":"Format a message listing the duties. Returns: Type Description str A string listing the duties and their summary. Source code in duty/collection.py def format_help ( self ) -> str : \"\"\" Format a message listing the duties. Returns: A string listing the duties and their summary. \"\"\" lines = [] # 20 makes the summary aligned with options description longest_name = max ( max ( len ( name ) for name in self . duties ), 20 ) # noqa: WPS432 (magic number) for name , duty in self . duties . items (): description = duty . description . split ( \" \\n \" )[ 0 ] lines . append ( f \" { name :{ longest_name }} { description } \" ) return \" \\n \" . join ( lines )","title":"format_help()"},{"location":"reference/collection/#duty.collection.Collection.get","text":"Get a duty by its name or alias. Parameters: Name Type Description Default name_or_alias str The name or alias of the duty. required Returns: Type Description Duty A duty. Source code in duty/collection.py def get ( self , name_or_alias : str ) -> \"Duty\" : \"\"\" Get a duty by its name or alias. Arguments: name_or_alias: The name or alias of the duty. Returns: A duty. \"\"\" try : return self . duties [ name_or_alias ] except KeyError : return self . aliases [ name_or_alias ]","title":"get()"},{"location":"reference/collection/#duty.collection.Collection.load","text":"Load duties from a Python file. Parameters: Name Type Description Default path Optional[str] The path to the Python file to load. Uses the collection's path by default. None Source code in duty/collection.py def load ( self , path : Optional [ str ] = None ) -> None : \"\"\" Load duties from a Python file. Arguments: path: The path to the Python file to load. Uses the collection's path by default. \"\"\" path = path or self . path spec = importlib_util . spec_from_file_location ( \"duty.duties\" , path ) duties = importlib_util . module_from_spec ( spec ) spec . loader . exec_module ( duties ) # type: ignore for _ , duty in inspect . getmembers ( duties , lambda member : isinstance ( member , Duty )): self . add ( duty )","title":"load()"},{"location":"reference/collection/#duty.collection.Collection.names","text":"Return the list of duties names and aliases. Returns: Type Description List[str] The list of duties names and aliases. Source code in duty/collection.py def names ( self ) -> List [ str ]: \"\"\" Return the list of duties names and aliases. Returns: The list of duties names and aliases. \"\"\" return list ( self . duties . keys ()) + list ( self . aliases . keys ())","title":"names()"},{"location":"reference/collection/#duty.collection.Duty","text":"The main duty class.","title":"Duty"},{"location":"reference/collection/#duty.collection.Duty.context","text":"Return a new context instance. Returns: Type Description Context A new context instance.","title":"context"},{"location":"reference/collection/#duty.collection.Duty.__call__","text":"Run the duty function. Parameters: Name Type Description Default context The context to use. required args Positional arguments passed to the function. () kwargs Keyword arguments passed to the function. {} Source code in duty/collection.py def __call__ ( self , context , * args , ** kwargs ) -> None : \"\"\" Run the duty function. Arguments: context: The context to use. args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. \"\"\" self . run_duties ( context , self . pre ) self . function ( context , * args , ** kwargs ) self . run_duties ( context , self . post )","title":"__call__()"},{"location":"reference/collection/#duty.collection.Duty.__init__","text":"Initialize the duty. Parameters: Name Type Description Default name str The duty name. required description str The duty description. required function Callable The duty function. required collection Optional[duty.collection.Collection] The collection on which to attach this duty. None aliases Optional[set] A list of aliases for this duty. None pre Optional[List[Union[str, Callable, Duty]]] A list of duties to run before this one. None post Optional[List[Union[str, Callable, Duty]]] A list of duties to run after this one. None opts Dict[str, Any] Options used to create the context instance. None Source code in duty/collection.py def __init__ ( self , name : str , description : str , function : Callable , collection : Optional [ Collection ] = None , aliases : Optional [ set ] = None , pre : Optional [ DutyListType ] = None , post : Optional [ DutyListType ] = None , opts : Dict [ str , Any ] = None , ) -> None : \"\"\" Initialize the duty. Arguments: name: The duty name. description: The duty description. function: The duty function. collection: The collection on which to attach this duty. aliases: A list of aliases for this duty. pre: A list of duties to run before this one. post: A list of duties to run after this one. opts: Options used to create the context instance. \"\"\" self . name = name self . description = description self . function = function self . aliases = aliases or set () self . pre = pre or [] self . post = post or [] self . options = opts or self . default_options self . options_override : Dict = {} self . collection = None if collection : collection . add ( self )","title":"__init__()"},{"location":"reference/collection/#duty.collection.Duty.run","text":"Run the duty. This is just a shortcut for duty(duty.context, *args, **kwargs) . Parameters: Name Type Description Default args Positional arguments passed to the function. () kwargs Keyword arguments passed to the function. {} Source code in duty/collection.py def run ( self , * args , ** kwargs ) -> None : \"\"\" Run the duty. This is just a shortcut for `duty(duty.context, *args, **kwargs)`. Arguments: args: Positional arguments passed to the function. kwargs: Keyword arguments passed to the function. \"\"\" self ( self . context , * args , ** kwargs )","title":"run()"},{"location":"reference/collection/#duty.collection.Duty.run_duties","text":"Run a list of duties. Parameters: Name Type Description Default context The context to use. required duties_list List[Union[str, Callable, Duty]] The list of duties to run. required Exceptions: Type Description RuntimeError When a duty name is given to pre or post duties. Indeed, without a parent collection, it is impossible to find another duty by its name. Source code in duty/collection.py def run_duties ( self , context , duties_list : DutyListType ) -> None : # noqa: WPS231 (not complex) \"\"\" Run a list of duties. Arguments: context: The context to use. duties_list: The list of duties to run. Raises: RuntimeError: When a duty name is given to pre or post duties. Indeed, without a parent collection, it is impossible to find another duty by its name. \"\"\" for duty_item in duties_list : if callable ( duty_item ): # Item is a proper duty, or a callable: run it. duty_item ( context ) elif isinstance ( duty_item , str ): # Item is a reference to a duty. if self . collection is None : raise RuntimeError ( f \"Can't find duty by name without a collection ( { duty_item } )\" , ) # Get the duty and run it. self . collection . get ( duty_item )( context )","title":"run_duties()"},{"location":"reference/context/","text":"\u00a4 Module containing the context definition. Context \u00a4 A simple context class. Context instances are passed to functions decorated with duty . __init__ ( self , options , options_override = None ) special \u00a4 Initialize the context. Parameters: Name Type Description Default options Base options specified in @duty(**options) . required options_override Options that override run and @duty options. This argument is used to allow users to override options from the CLI or environment. None Source code in duty/context.py def __init__ ( self , options , options_override = None ) -> None : \"\"\" Initialize the context. Arguments: options: Base options specified in `@duty(**options)`. options_override: Options that override `run` and `@duty` options. This argument is used to allow users to override options from the CLI or environment. \"\"\" self . options = options self . options_override = options_override or {} run ( self , cmd , args = None , kwargs = None , ** options ) \u00a4 Run a command in a subprocess or a Python callable. Parameters: Name Type Description Default cmd Union[str, List[str], Callable] A command or a Python callable. required args Positional arguments passed to the Python callable. None kwargs Keyword arguments passed to the Python callable. None options Options passed to failprint functions. {} Exceptions: Type Description DutyFailure When the exit code / function result is greather than 0. Source code in duty/context.py def run ( self , cmd : CmdType , args = None , kwargs = None , ** options ): \"\"\" Run a command in a subprocess or a Python callable. Arguments: cmd: A command or a Python callable. args: Positional arguments passed to the Python callable. kwargs: Keyword arguments passed to the Python callable. options: Options passed to `failprint` functions. Raises: DutyFailure: When the exit code / function result is greather than 0. \"\"\" final_options = dict ( self . options ) final_options . update ( options ) final_options . update ( self . options_override ) try : code = failprint_run ( cmd , args = args , kwargs = kwargs , ** final_options ) except KeyboardInterrupt : code = 130 if code : raise DutyFailure ( code )","title":"context.py"},{"location":"reference/context/#duty.context","text":"Module containing the context definition.","title":"duty.context"},{"location":"reference/context/#duty.context.Context","text":"A simple context class. Context instances are passed to functions decorated with duty .","title":"Context"},{"location":"reference/context/#duty.context.Context.__init__","text":"Initialize the context. Parameters: Name Type Description Default options Base options specified in @duty(**options) . required options_override Options that override run and @duty options. This argument is used to allow users to override options from the CLI or environment. None Source code in duty/context.py def __init__ ( self , options , options_override = None ) -> None : \"\"\" Initialize the context. Arguments: options: Base options specified in `@duty(**options)`. options_override: Options that override `run` and `@duty` options. This argument is used to allow users to override options from the CLI or environment. \"\"\" self . options = options self . options_override = options_override or {}","title":"__init__()"},{"location":"reference/context/#duty.context.Context.run","text":"Run a command in a subprocess or a Python callable. Parameters: Name Type Description Default cmd Union[str, List[str], Callable] A command or a Python callable. required args Positional arguments passed to the Python callable. None kwargs Keyword arguments passed to the Python callable. None options Options passed to failprint functions. {} Exceptions: Type Description DutyFailure When the exit code / function result is greather than 0. Source code in duty/context.py def run ( self , cmd : CmdType , args = None , kwargs = None , ** options ): \"\"\" Run a command in a subprocess or a Python callable. Arguments: cmd: A command or a Python callable. args: Positional arguments passed to the Python callable. kwargs: Keyword arguments passed to the Python callable. options: Options passed to `failprint` functions. Raises: DutyFailure: When the exit code / function result is greather than 0. \"\"\" final_options = dict ( self . options ) final_options . update ( options ) final_options . update ( self . options_override ) try : code = failprint_run ( cmd , args = args , kwargs = kwargs , ** final_options ) except KeyboardInterrupt : code = 130 if code : raise DutyFailure ( code )","title":"run()"},{"location":"reference/decorator/","text":"\u00a4 Module containing the decorator provided to users. create_duty ( func , name = None , aliases = None , pre = None , post = None , ** opts ) \u00a4 Register a duty in the collection. Parameters: Name Type Description Default func Callable The callable to register as a duty. required name Optional[str] The duty name. None aliases Optional[Iterable[str]] A set of aliases for this duty. None pre Optional[List[Union[str, Callable, Duty]]] Pre-duties. None post Optional[List[Union[str, Callable, Duty]]] Post-duties. None opts Options passed to the context. {} Returns: Type Description Duty The registered duty. Source code in duty/decorator.py def create_duty ( func : Callable , name : Optional [ str ] = None , aliases : Optional [ Iterable [ str ]] = None , pre : Optional [ DutyListType ] = None , post : Optional [ DutyListType ] = None , ** opts , ) -> Duty : \"\"\" Register a duty in the collection. Arguments: func: The callable to register as a duty. name: The duty name. aliases: A set of aliases for this duty. pre: Pre-duties. post: Post-duties. opts: Options passed to the context. Returns: The registered duty. \"\"\" aliases = set ( aliases ) if aliases else set () name = name or func . __name__ dash_name = name . replace ( \"_\" , \"-\" ) if name != dash_name : aliases . add ( name ) name = dash_name description = inspect . getdoc ( func ) or \"\" return Duty ( name , description , func , aliases = aliases , pre = pre , post = post , opts = opts ) duty ( * args , ** kwargs ) \u00a4 Decorate a callable to transform it and register it as a duty. Parameters: Name Type Description Default args One callable. () kwargs Context options. {} Exceptions: Type Description ValueError When the decorator is misused. Examples: Decorate a function: @duty def clean ( ctx ): ctx . run ( \"rm -rf build\" , silent = True ) Pass options to the context: @duty ( silent = True ) def clean ( ctx ): ctx . run ( \"rm -rf build\" ) # silent=True is implied Returns: Type Description Union[Callable, duty.collection.Duty] A duty when used without parentheses, a decorator otherwise. Source code in duty/decorator.py def duty ( * args , ** kwargs ) -> Union [ Callable , Duty ]: \"\"\" Decorate a callable to transform it and register it as a duty. Arguments: args: One callable. kwargs: Context options. Raises: ValueError: When the decorator is misused. Examples: Decorate a function: ```python @duty def clean(ctx): ctx.run(\"rm -rf build\", silent=True) ``` Pass options to the context: ```python @duty(silent=True) def clean(ctx): ctx.run(\"rm -rf build\") # silent=True is implied ``` Returns: A duty when used without parentheses, a decorator otherwise. \"\"\" if args : if len ( args ) > 1 : raise ValueError ( \"The duty decorator accepts only one positional argument\" , ) return create_duty ( args [ 0 ], ** kwargs ) def decorator ( func ): return create_duty ( func , ** kwargs ) return decorator","title":"decorator.py"},{"location":"reference/decorator/#duty.decorator","text":"Module containing the decorator provided to users.","title":"duty.decorator"},{"location":"reference/decorator/#duty.decorator.create_duty","text":"Register a duty in the collection. Parameters: Name Type Description Default func Callable The callable to register as a duty. required name Optional[str] The duty name. None aliases Optional[Iterable[str]] A set of aliases for this duty. None pre Optional[List[Union[str, Callable, Duty]]] Pre-duties. None post Optional[List[Union[str, Callable, Duty]]] Post-duties. None opts Options passed to the context. {} Returns: Type Description Duty The registered duty. Source code in duty/decorator.py def create_duty ( func : Callable , name : Optional [ str ] = None , aliases : Optional [ Iterable [ str ]] = None , pre : Optional [ DutyListType ] = None , post : Optional [ DutyListType ] = None , ** opts , ) -> Duty : \"\"\" Register a duty in the collection. Arguments: func: The callable to register as a duty. name: The duty name. aliases: A set of aliases for this duty. pre: Pre-duties. post: Post-duties. opts: Options passed to the context. Returns: The registered duty. \"\"\" aliases = set ( aliases ) if aliases else set () name = name or func . __name__ dash_name = name . replace ( \"_\" , \"-\" ) if name != dash_name : aliases . add ( name ) name = dash_name description = inspect . getdoc ( func ) or \"\" return Duty ( name , description , func , aliases = aliases , pre = pre , post = post , opts = opts )","title":"create_duty()"},{"location":"reference/decorator/#duty.decorator.duty","text":"Decorate a callable to transform it and register it as a duty. Parameters: Name Type Description Default args One callable. () kwargs Context options. {} Exceptions: Type Description ValueError When the decorator is misused. Examples: Decorate a function: @duty def clean ( ctx ): ctx . run ( \"rm -rf build\" , silent = True ) Pass options to the context: @duty ( silent = True ) def clean ( ctx ): ctx . run ( \"rm -rf build\" ) # silent=True is implied Returns: Type Description Union[Callable, duty.collection.Duty] A duty when used without parentheses, a decorator otherwise. Source code in duty/decorator.py def duty ( * args , ** kwargs ) -> Union [ Callable , Duty ]: \"\"\" Decorate a callable to transform it and register it as a duty. Arguments: args: One callable. kwargs: Context options. Raises: ValueError: When the decorator is misused. Examples: Decorate a function: ```python @duty def clean(ctx): ctx.run(\"rm -rf build\", silent=True) ``` Pass options to the context: ```python @duty(silent=True) def clean(ctx): ctx.run(\"rm -rf build\") # silent=True is implied ``` Returns: A duty when used without parentheses, a decorator otherwise. \"\"\" if args : if len ( args ) > 1 : raise ValueError ( \"The duty decorator accepts only one positional argument\" , ) return create_duty ( args [ 0 ], ** kwargs ) def decorator ( func ): return create_duty ( func , ** kwargs ) return decorator","title":"duty()"},{"location":"reference/exceptions/","text":"\u00a4 Module containing the project's exceptions. DutyFailure \u00a4 An exception raised when a duty fails. __init__ ( self , code ) special \u00a4 Initialize the object. Parameters: Name Type Description Default code int The exit code of a command. required Source code in duty/exceptions.py def __init__ ( self , code : int ): \"\"\" Initialize the object. Arguments: code: The exit code of a command. \"\"\" super () . __init__ ( self ) self . code = code","title":"exceptions.py"},{"location":"reference/exceptions/#duty.exceptions","text":"Module containing the project's exceptions.","title":"duty.exceptions"},{"location":"reference/exceptions/#duty.exceptions.DutyFailure","text":"An exception raised when a duty fails.","title":"DutyFailure"},{"location":"reference/exceptions/#duty.exceptions.DutyFailure.__init__","text":"Initialize the object. Parameters: Name Type Description Default code int The exit code of a command. required Source code in duty/exceptions.py def __init__ ( self , code : int ): \"\"\" Initialize the object. Arguments: code: The exit code of a command. \"\"\" super () . __init__ ( self ) self . code = code","title":"__init__()"},{"location":"reference/validation/","text":"\u00a4 This module contains logic used to validate parameters passed to duties. We validate the parameters before running the duties, effectively checking all CLI arguments and failing early if they are incorrect. ParamsCaster \u00a4 A helper class to cast parameters based on a function's signature annotations. __init__ ( self , function ) special \u00a4 Initialize the object. Parameters: Name Type Description Default function Callable The function to use to cast arguments. required Source code in duty/validation.py def __init__ ( self , function : Callable ) -> None : \"\"\" Initialize the object. Arguments: function: The function to use to cast arguments. \"\"\" self . function = function self . signature = signature ( function ) self . params_dict = self . signature . parameters self . params_list = list ( self . params_dict . values ())[ 1 :] annotation_at_pos ( self , pos ) \u00a4 Give the annotation for the parameter at the given position. Parameters: Name Type Description Default pos The position of the parameter. required Returns: Type Description Any The positional parameter annotation. Source code in duty/validation.py def annotation_at_pos ( self , pos ) -> Any : \"\"\" Give the annotation for the parameter at the given position. Arguments: pos: The position of the parameter. Returns: The positional parameter annotation. \"\"\" return self . params_list [ pos ] . annotation cast ( self , * args , ** kwargs ) \u00a4 Cast all positional and keyword arguments. Parameters: Name Type Description Default *args The positional arguments. () **kwargs The keyword arguments. {} Returns: Type Description Tuple[Sequence, Dict[str, Any]] The cast arguments. Source code in duty/validation.py def cast ( self , * args , ** kwargs ) -> Tuple [ Sequence , Dict [ str , Any ]]: \"\"\" Cast all positional and keyword arguments. Arguments: *args: The positional arguments. **kwargs: The keyword arguments. Returns: The cast arguments. \"\"\" positional = tuple ( self . cast_posarg ( pos , arg ) for pos , arg in enumerate ( args )) # noqa: WPS221 keyword = { name : self . cast_kwarg ( name , value ) for name , value in kwargs . items ()} # noqa: WPS221 return positional , keyword cast_kwarg ( self , name , value ) \u00a4 Cast a keyword argument. Parameters: Name Type Description Default name The name of the argument in the signature. required value The argument value. required Returns: Type Description Any The cast value. Source code in duty/validation.py def cast_kwarg ( self , name , value ) -> Any : \"\"\" Cast a keyword argument. Arguments: name: The name of the argument in the signature. value: The argument value. Returns: The cast value. \"\"\" if name in self . params_dict : return cast_arg ( value , self . params_dict [ name ] . annotation ) return cast_arg ( value , self . var_keyword_annotation ) cast_posarg ( self , pos , arg ) \u00a4 Cast a positional argument. Parameters: Name Type Description Default pos The position of the argument in the signature. required arg The argument value. required Returns: Type Description Any The cast value. Source code in duty/validation.py def cast_posarg ( self , pos , arg ) -> Any : \"\"\" Cast a positional argument. Arguments: pos: The position of the argument in the signature. arg: The argument value. Returns: The cast value. \"\"\" if self . eaten_by_var_positional ( pos ): return cast_arg ( arg , self . var_positional_annotation ) return cast_arg ( arg , self . annotation_at_pos ( pos )) eaten_by_var_positional ( self , pos ) \u00a4 Tell if the parameter at this position is eaten by a variable positional parameter. Parameters: Name Type Description Default pos The position of the parameter. required Returns: Type Description bool Whether the parameter is eaten. Source code in duty/validation.py def eaten_by_var_positional ( self , pos ) -> bool : \"\"\" Tell if the parameter at this position is eaten by a variable positional parameter. Arguments: pos: The position of the parameter. Returns: Whether the parameter is eaten. \"\"\" return self . has_var_positional and pos >= self . var_positional_position cast_arg ( arg , annotation ) \u00a4 Cast an argument using a type annotation. Parameters: Name Type Description Default arg The argument value. required annotation A type annotation. required Returns: Type Description Any The cast value. Source code in duty/validation.py def cast_arg ( arg , annotation ) -> Any : \"\"\" Cast an argument using a type annotation. Arguments: arg: The argument value. annotation: A type annotation. Returns: The cast value. \"\"\" if annotation is Parameter . empty : return arg if annotation is bool : annotation = to_bool try : return annotation ( arg ) except Exception : # noqa: W0703 (catching all on purpose) return arg to_bool ( value ) \u00a4 Convert a string to a boolean. Parameters: Name Type Description Default value str The string to convert. required Returns: Type Description bool True or False. Source code in duty/validation.py def to_bool ( value : str ) -> bool : \"\"\" Convert a string to a boolean. Arguments: value: The string to convert. Returns: True or False. \"\"\" return value . lower () not in { \"\" , \"0\" , \"no\" , \"n\" , \"false\" , \"off\" } validate ( func , * args , ** kwargs ) \u00a4 Validate positional and keyword arguments against a function. First we clone the function, removing the first parameter (the context) and the body, to fail early with a TypeError if the arguments are incorrect: not enough, too much, in the wrong order, etc. Then we cast all the arguments using the function's signature and we return them. Parameters: Name Type Description Default func Callable The function to copy. required *args The positional arguments. () **kwargs The keyword arguments. {} Returns: Type Description Tuple[Sequence, Dict[str, Any]] The casted arguments. Source code in duty/validation.py def validate ( func : Callable , * args , ** kwargs , ) -> Tuple [ Sequence , Dict [ str , Any ]]: \"\"\" Validate positional and keyword arguments against a function. First we clone the function, removing the first parameter (the context) and the body, to fail early with a `TypeError` if the arguments are incorrect: not enough, too much, in the wrong order, etc. Then we cast all the arguments using the function's signature and we return them. Arguments: func: The function to copy. *args: The positional arguments. **kwargs: The keyword arguments. Returns: The casted arguments. \"\"\" name = func . __name__ # don't keep first parameter: context params_list = list ( signature ( func ) . parameters . values ())[ 1 :] params = [ Parameter ( param . name , param . kind , default = param . default ) for param in params_list ] sig = Signature ( parameters = params ) trixx : dict = {} exec ( f \"def { name }{ sig } : ... \\n trixx[0] = { name } \" ) # noqa: S102,W0122 (use of exec) trixx [ 0 ]( * args , ** kwargs ) caster = ParamsCaster ( func ) return caster . cast ( * args , ** kwargs )","title":"validation.py"},{"location":"reference/validation/#duty.validation","text":"This module contains logic used to validate parameters passed to duties. We validate the parameters before running the duties, effectively checking all CLI arguments and failing early if they are incorrect.","title":"duty.validation"},{"location":"reference/validation/#duty.validation.ParamsCaster","text":"A helper class to cast parameters based on a function's signature annotations.","title":"ParamsCaster"},{"location":"reference/validation/#duty.validation.ParamsCaster.__init__","text":"Initialize the object. Parameters: Name Type Description Default function Callable The function to use to cast arguments. required Source code in duty/validation.py def __init__ ( self , function : Callable ) -> None : \"\"\" Initialize the object. Arguments: function: The function to use to cast arguments. \"\"\" self . function = function self . signature = signature ( function ) self . params_dict = self . signature . parameters self . params_list = list ( self . params_dict . values ())[ 1 :]","title":"__init__()"},{"location":"reference/validation/#duty.validation.ParamsCaster.annotation_at_pos","text":"Give the annotation for the parameter at the given position. Parameters: Name Type Description Default pos The position of the parameter. required Returns: Type Description Any The positional parameter annotation. Source code in duty/validation.py def annotation_at_pos ( self , pos ) -> Any : \"\"\" Give the annotation for the parameter at the given position. Arguments: pos: The position of the parameter. Returns: The positional parameter annotation. \"\"\" return self . params_list [ pos ] . annotation","title":"annotation_at_pos()"},{"location":"reference/validation/#duty.validation.ParamsCaster.cast","text":"Cast all positional and keyword arguments. Parameters: Name Type Description Default *args The positional arguments. () **kwargs The keyword arguments. {} Returns: Type Description Tuple[Sequence, Dict[str, Any]] The cast arguments. Source code in duty/validation.py def cast ( self , * args , ** kwargs ) -> Tuple [ Sequence , Dict [ str , Any ]]: \"\"\" Cast all positional and keyword arguments. Arguments: *args: The positional arguments. **kwargs: The keyword arguments. Returns: The cast arguments. \"\"\" positional = tuple ( self . cast_posarg ( pos , arg ) for pos , arg in enumerate ( args )) # noqa: WPS221 keyword = { name : self . cast_kwarg ( name , value ) for name , value in kwargs . items ()} # noqa: WPS221 return positional , keyword","title":"cast()"},{"location":"reference/validation/#duty.validation.ParamsCaster.cast_kwarg","text":"Cast a keyword argument. Parameters: Name Type Description Default name The name of the argument in the signature. required value The argument value. required Returns: Type Description Any The cast value. Source code in duty/validation.py def cast_kwarg ( self , name , value ) -> Any : \"\"\" Cast a keyword argument. Arguments: name: The name of the argument in the signature. value: The argument value. Returns: The cast value. \"\"\" if name in self . params_dict : return cast_arg ( value , self . params_dict [ name ] . annotation ) return cast_arg ( value , self . var_keyword_annotation )","title":"cast_kwarg()"},{"location":"reference/validation/#duty.validation.ParamsCaster.cast_posarg","text":"Cast a positional argument. Parameters: Name Type Description Default pos The position of the argument in the signature. required arg The argument value. required Returns: Type Description Any The cast value. Source code in duty/validation.py def cast_posarg ( self , pos , arg ) -> Any : \"\"\" Cast a positional argument. Arguments: pos: The position of the argument in the signature. arg: The argument value. Returns: The cast value. \"\"\" if self . eaten_by_var_positional ( pos ): return cast_arg ( arg , self . var_positional_annotation ) return cast_arg ( arg , self . annotation_at_pos ( pos ))","title":"cast_posarg()"},{"location":"reference/validation/#duty.validation.ParamsCaster.eaten_by_var_positional","text":"Tell if the parameter at this position is eaten by a variable positional parameter. Parameters: Name Type Description Default pos The position of the parameter. required Returns: Type Description bool Whether the parameter is eaten. Source code in duty/validation.py def eaten_by_var_positional ( self , pos ) -> bool : \"\"\" Tell if the parameter at this position is eaten by a variable positional parameter. Arguments: pos: The position of the parameter. Returns: Whether the parameter is eaten. \"\"\" return self . has_var_positional and pos >= self . var_positional_position","title":"eaten_by_var_positional()"},{"location":"reference/validation/#duty.validation.cast_arg","text":"Cast an argument using a type annotation. Parameters: Name Type Description Default arg The argument value. required annotation A type annotation. required Returns: Type Description Any The cast value. Source code in duty/validation.py def cast_arg ( arg , annotation ) -> Any : \"\"\" Cast an argument using a type annotation. Arguments: arg: The argument value. annotation: A type annotation. Returns: The cast value. \"\"\" if annotation is Parameter . empty : return arg if annotation is bool : annotation = to_bool try : return annotation ( arg ) except Exception : # noqa: W0703 (catching all on purpose) return arg","title":"cast_arg()"},{"location":"reference/validation/#duty.validation.to_bool","text":"Convert a string to a boolean. Parameters: Name Type Description Default value str The string to convert. required Returns: Type Description bool True or False. Source code in duty/validation.py def to_bool ( value : str ) -> bool : \"\"\" Convert a string to a boolean. Arguments: value: The string to convert. Returns: True or False. \"\"\" return value . lower () not in { \"\" , \"0\" , \"no\" , \"n\" , \"false\" , \"off\" }","title":"to_bool()"},{"location":"reference/validation/#duty.validation.validate","text":"Validate positional and keyword arguments against a function. First we clone the function, removing the first parameter (the context) and the body, to fail early with a TypeError if the arguments are incorrect: not enough, too much, in the wrong order, etc. Then we cast all the arguments using the function's signature and we return them. Parameters: Name Type Description Default func Callable The function to copy. required *args The positional arguments. () **kwargs The keyword arguments. {} Returns: Type Description Tuple[Sequence, Dict[str, Any]] The casted arguments. Source code in duty/validation.py def validate ( func : Callable , * args , ** kwargs , ) -> Tuple [ Sequence , Dict [ str , Any ]]: \"\"\" Validate positional and keyword arguments against a function. First we clone the function, removing the first parameter (the context) and the body, to fail early with a `TypeError` if the arguments are incorrect: not enough, too much, in the wrong order, etc. Then we cast all the arguments using the function's signature and we return them. Arguments: func: The function to copy. *args: The positional arguments. **kwargs: The keyword arguments. Returns: The casted arguments. \"\"\" name = func . __name__ # don't keep first parameter: context params_list = list ( signature ( func ) . parameters . values ())[ 1 :] params = [ Parameter ( param . name , param . kind , default = param . default ) for param in params_list ] sig = Signature ( parameters = params ) trixx : dict = {} exec ( f \"def { name }{ sig } : ... \\n trixx[0] = { name } \" ) # noqa: S102,W0122 (use of exec) trixx [ 0 ]( * args , ** kwargs ) caster = ParamsCaster ( func ) return caster . cast ( * args , ** kwargs )","title":"validate()"},{"location":"coverage/","text":".md-content { max-width: none !important; } article h1, article > a { display: none; } function resizeIframe(obj) { obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px'; }","title":"Coverage report"}]}